extended_summary: |
  This module provides the functionality for functional environment
  objects and associated functionality. Specifically, it contains the
  models that perform computations related to environment models of
  natural and artificial bodies.

enums:

  - name: AerodynamicsReferenceFrames
    short_summary: "Enumeration of reference frame identifiers typical for aerodynamic calculations."
    extended_summary: |
      Enumeration of reference frame identifiers typical for aerodynamic calculations. Note that the frames are also defined
      in the absence of any aerodynamic forces and/or atmosphere. They define frames of a body w.r.t. a central body, with
      the details given by Mooij (1994). The chain of frames starts from the inertial frame, to the frame fixed to the
      central body (corotating), to the vertical frame (defined by the body's relative position), the trajectory and aerodynamic frames
      (defined by the body's relative velocity) and finally the body's own body-fixed frame.

    members:
      - name: inertial_frame
      - name: corotating_frame
      - name: vertical_frame
      - name: trajectory_frame
      - name: aerodynamic_frame
      - name: body_frame

classes:
  - name: FlightConditions
    short_summary: |
       Object that calculates various state-derived quantities typically
       relevant for flight dynamics.
    extendend_summary: |
       Object that calculates various state-derived quantities typically
       relevant for flight dynamics, such as latitude, longitude,
       altitude, etc. It also contains an
       :py:class:`~AerodynamicAngleCalculator` that computes derived
       angles (flight path, heading angle, etc.). This object is limited
       to non-atmospheric flight. For flight through Body objects
       endowed with an atmosphere model, the derived class
       :py:class:`~AtmosphericFlightConditions` is used. This object is
       stored inside a Body object, and represents the flight conditions
       of a single body w.r.t. a single central body.

    properties: # [py]
      - name: aerodynamic_angle_calculator # [py]
        type: AerodynamicAngleCalculator # [py]
        readonly: Yes
        description: |  # [py]
          The object that is responsible for computing various relevant
          flight dynamics angles and frame rotations.

      - name: longitude # [py]
        type: float # [py]
        readonly: Yes
        description: |  # [py]
          The body-fixed longitude of the body w.r.t. its central body.

      - name: latitude # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The body-fixed geographic latitude of the body w.r.t. its
          central body.

      - name: geodetic_latitude # [py]
        type: float # [py]
        readonly: Yes
        description: |  # [py]
          The body-fixed geodetic latitude of the body w.r.t. its central
          body, using an :py:class:`~OblateSpheroidBodyShapeModel` of the
          central body. If no such model is defined in the central body,
          this attribute equals the latitude.

      - name: altitude # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The altitude of this body w.r.t. the central body (using the
          :py:class:`~ShapeModel` of the central body).

      - name: time # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The current time, at which this object was last updated

      - name: body_centered_body_fixed_state # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description:  | # [py]
          Cartesian translational state, expressed in a frame centered
          at, and fixed to, the central body. Note that, due to the
          rotation of the central body, the norm of the body-fixed,
          body-centered, velocity differs from the norm of the inertial
          body-centered velocity. # [py]

    #methods:
      

  - name: AtmosphericFlightConditions
    short_summary: |
       Object that calculates various state-derived quantities typically
       relevant for flight dynamics, for flight in an atmosphere.
    extendend_summary: |
       Object that calculates various state-derived quantities typically
       relevant for flight dynamics, for flight in an atmosphere, such
       as latitude,  longitude, altitude, density, Mach number etc. It
       also contains an ``AerodynamicAngleCalculator`` that computes
       derived angles (flight path, heading angle, etc.). This object is
       derived from ``FlightConditions``, which performs computations for
       non-atmospheric flight only. This object is stored inside a Body
       object, and represents the flight conditions of a single body
       w.r.t. a single central body.

    properties: # [py]
      - name: density # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The freestream atmospheric density at the body's current
          location.

      - name: temperature # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The freestream atmospheric temperature at the body's current
          location.

      - name: dynamic_pressure # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The freestream atmospheric dynamic pressure at the body's
          current location.

      - name: pressure # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The freestream atmospheric static pressure at the body's
          current location.

      - name: speed_of_sound # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The freestream atmospheric speed of sound at the body's current
          location.

      - name: airspeed # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The airspeed of the body w.r.t. the atmosphere.

      - name: airspeed_velocity # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: | # [py]
          The velocity vector of the body w.r.t. the freestream
          atmosphere (e.g. vectorial counterpart of airspeed).

      - name: mach_number # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The freestream Mach number of the body

      - name: aero_coefficient_independent_variables # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: | # [py]
          List of current values of independent variables of aerodynamic
          coefficients. This list is only defined if the body has an
          :py:class:`~AerodynamicCoefficientInterface` that has
          dependencies on environmental variables (e.g. Mach number,
          angle of attack, etc.).

      - name: control_surface_aero_coefficient_independent_variables # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: | # [py]
          List of lists current values of independent variables of
          aerodynamic coefficients for control surfaces. The outer list
          defines the control surface, the inner list the values of the
          independent variables. This list is only defined if the body
          has an :py:class:`~AerodynamicCoefficientInterface` with
          control surfaces that have dependencies on environmental
          variables (e.g. Mach number, angle of attack, etc.).

      - name: aerodynamic_coefficient_interface # [py]
        type: AerodynamicCoefficientInterface # [py]
        readonly: Yes
        description: | # [py]
          Object extracted from the same Body object as this
          :py:class:`~AtmosphericFlightConditions` object, which defines
          the aerodynamic coefficients.

    #methods:
      

  - name: Body
    short_summary: |
       Object that stores the environment properties and current state of
       a single body.
    extendend_summary: |
       Object that stores the environment properties and current state
       of a single celestial body (natural or artificial). Each separate
       environment model (gravity field, ephemeris, etc.) is stored as a
       member object in this class. During each time step, the Body gets
       updated to teh current time/propagated state, and the current
       properties, in as much as they are time-dependent, can be
       extracted from this object

    properties: # [py]
      - name: state # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          The translational state of the Body, as set during the current
          step of the numerical propagation. The translational state
          stored here is always in Cartesian elements, w.r.t. the global
          frame origin, with axes along the global frame orientation. If
          the body's translational state is numerically propagated, this
          property gets extracted from the propagated state vector. If it
          is not propagated, the state is extracted from this body's
          ephemeris. In both cases, any required state transformations
          are automatically applied. Note that this function  is *only*
          valid during the numerical propagation if any aspects of the
          dynamics or dependent variables require the body's state.

      - name: position # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          The translational position of the Body, as set during the
          current step of the numerical propagation
          (see :py:attr:`~state`).

      - name: velocity # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          The translational velocity of the Body, as set during the
          current step of the numerical propagation
          (see :py:attr:`~state`).

      - name: inertial_to_body_fixed_frame # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          The rotation from inertial frame (with global frame
          orientation) to this Body's body-fixed frame. The rotation is
          always returned here as a rotation matrix.  If the body's
          rotational state is numerically propagated, this property gets
          extracted from the propagated state vector. If it is not
          propagated, the state is extracted from this body's rotatitonal
          ephemeris.

          .. note:: This function is **only** valid during the
                    numerical propagation if any aspects of the dynamics
                    or dependent variables require the body's rotational
                    state.

      - name: body_fixed_to_inertial_frame # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          The rotation from this Body's body-fixed frame to inertial
          frame (see :py:attr:`~inertial_to_body_fixed_frame`).

      - name: inertial_to_body_fixed_frame_derivative # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          Time derivative of rotation matrix from inertial frame to this
          Body's body-fixed frame
          (see :py:attr:`~inertial_to_body_fixed_frame`).

      - name: body_fixed_to_inertial_frame_derivative # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          Time derivative of rotation matrix from this Body's body-fixed
          frame to inertial frame
          (see :py:attr:`~inertial_to_body_fixed_frame`).

      - name: inertial_angular_velocity # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          Angular velocity vector of the body, expressed in inertial
          frame (see :py:attr:`~inertial_to_body_fixed_frame`).
    
      - name: body_fixed_angular_velocity # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          Angular velocity vector of the body, expressed in body-fixed
          frame (see :py:attr:`~inertial_to_body_fixed_frame`).

      - name: mass # [py]
        type: float # [py]
        description: |
          Denotes the current mass of the vehicle, as used in the calculation of
          non-conservative acceleration. Note that defining a mass for a vehicle
          does *not* define a gravity field (this is done through a gravity field model).
          However, defining a gravity field model in a body automatically assigns it
          a mass here.
          Unlike the attributes containing the state, orientation, angular velocity
          of the Body, this attribute may be used to retrieve the state during the
          propagation *and* to define the mass of a vehicle

      - name: ephemeris # [py]
        type: Ephemeris # [py]
        description: |
          Ephemeris model of this body, used to calculate its current state as a function of time.
          Depending on the selected type of model, the type of this attribute
              is of type Ephemeris, or a derived class thereof.

      - name: atmosphere_model # [py]
        type: AtmosphereModel # [py]
        description: |
          Atmosphere model of this body, used to calculate density, temperature, etc. at a given
          state/time. Depending on the selected type of model, the type of this attribute
          is of type AtmosphereModel, or a derived class thereof.

      - name: shape_model # [py]
        type: BodyShapeModel # [py]
        description: |
          Shape model of this body, used to define the exterior shape of the body, for instance for
          the calculation of vehicle's altitude. Depending on the selected type of model, the type of this attribute
          is of type BodyShapeModel, or a derived class thereof.

      - name: gravity_field_model # [py]
        type: GravityFieldModel # [py]
        description: |
          Gravity field model of this body, used to define the exterior gravitational potential, and
          its gradient(s). Depending on the selected type of model, the type of this attribute
          is of type GravityFieldModel, or a derived class thereof.

      - name: aerodynamic_coefficient_interface # [py]
        type: AerodynamicCoefficientInterface # [py]
        description: |
          Object definining the aerodynamic coefficients of a vehicle (force-only, or force and moment)
          as a function of any number of independent variables. Depending on the selected type of model, the type of this attribute
          is of type AerodynamicCoefficientInterface, or a derived class thereof.

      - name: rotation_model # [py]
        type: RotationalEphemeris # [py]
        description: |
          Object definining the orientation of a body, used to calculate the rotation to/from a body-fixed
          frame (and its derivate). Depending on the selected type of model, the type of this attribute
          is of type RotationalEphemeris, or a derived class thereof.

      - name: gravitational_parameter # [py]
        type: float # [py]
        readonly: Yes
        description: |
          Attribute of convenience, equivalent to ``.gravity_field_model.gravitational_parameter``

  - name: SystemOfBodies
    short_summary: |
       Object that contains a set of Body objects and associated frame
       information.
    extendend_summary: |
       Object that contains a set of Body objects and associated frame
       information. This object stored the entire environment for a
       typical Tudat numerical simulation, and is fundamental for the
       overall Tudat architecture.

    # attributes:

    methods:
      - name: getBody # [cpp]
      - name: get # [py]
        short_summary: "This function extracts a single Body object from the SystemOfBodies."
        #extended_summary: |
        #  This function extracts a single Body object from the SystemOfBodies

        parameters:
        - name: bodyName # [cpp]
          type: std::string # [cpp]
        - name: body_name # [py]
          type: numpy.ndarray # [py]
          description: |
            Name of the Body that is to be retrieved.

        returns:
          type: Body
          description: Body object of the requested name

      - name: get_body # [py]
        short_summary: "Deprecated version of :py:func:`~get`"

      - name: createEmptyBody # [cpp]
      - name: create_empty_body # [py]
        short_summary: "This function creates a new empty body."
        extended_summary: |
          This function creates a new empty body, and adds it to the
          :py:class:`~SystemOfBodies`. Since the body is empty, it will
          not have any environment models defined. These must all be
          added manually by a user.

        examples: |

          This function is often used early on in the environment
          creation segment of a simulation, following the creation of
          a :py:class:`~SystemOfBodies` from the default settings
          for celestial bodies.

          .. code-block:: python
             :emphasize-lines: 18

             # Define string names for bodies to be created from default.
             bodies_to_create = ["Sun", "Earth", "Moon", "Mars", "Venus"]

             # Use "Earth"/"J2000" as global frame origin and orientation.
             global_frame_origin = "Earth"
             global_frame_orientation = "J2000"

             # Create default body settings, usually from `spice`.
             body_settings = environment_setup.get_default_body_settings(
                 bodies_to_create,
                 global_frame_origin,
                 global_frame_orientation)

             # Create system of selected celestial bodies
             bodies = environment_setup.create_system_of_bodies(body_settings)

             # Create vehicle objects.
             bodies.create_empty_body("Delfi-C3")


        parameters:
        - name: bodyName # [cpp]
          type: std::string # [cpp]
        - name: body_name # [py]
          type: string # [py]
          description: |
            Name of the Body that is to be added

        - name: processBody # [cpp]
          type: bool, default=True # [cpp]
        - name: process_body # [py]
          type: bool, default=True # [py]
          description: |
            Variable that defines whether this new Body will have its
            global frame origin/orientation set to conform to rest of
            the environment.

            .. warning:: Only in very rare cases should
                         this variable be anything other than ``True``.
                         Users are recommended to keep this default value
                         intact.

      - name: addBody # [cpp]
      - name: add_body # [py]
        short_summary: |
          This function adds an existing body, which the user has
          separately created, to the :py:class:`~SystemOfBodies`.

        parameters:
        - name: bodyToAdd # [cpp]
          type: std::shared_ptr< Body > # [cpp]
        - name: body_to_add # [py]
          type: Body # [py]
          description: |
            Body object that is to be added.

        - name: bodyName # [cpp]
          type: std::string # [cpp]
        - name: body_name # [py]
          type: numpy.ndarray # [py]
          description: |
            Name of the Body that is to be added.

        - name: processBody # [cpp]
          type: bool, default=True # [cpp]
        - name: process_body # [py]
          type: bool, default=True # [py]
          description: |
            Variable that defines whether this new Body will have its
            global frame origin/orientation set to conform to rest of
            the environment.

            .. warning:: Only in very rare cases should this variable be
                         anything other than ``True``. Users are
                         recommended to keep this default value intact.

      - name: deleteBody # [cpp]
      - name: remove_body # [py]
        short_summary: |
           This function removes an existing body from the
           :py:class:`~SystemOfBodies`.
        extended_summary: |

          .. warning:: This function does *not* necessarilly delete the
                       Body object, it only removes it from this object.
                       If any existing models in the simulation refer to
                       this Body, it will persist in memory.

        parameters:
        - name: bodyName # [cpp]
          type: std::string # [cpp]
        - name: body_name # [py]
          type: numpy.ndarray # [py]
          description: |
            Name of the Body that is to be removed.

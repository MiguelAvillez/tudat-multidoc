description: "This module provides the functionality for creating propagator settings."
notes: "None"

# The structure of this file follows the order of expose_propagator_setup.cpp (tudatpy) and
# includes content for nBodyStateDerivative.h, bulirschStoerVariableStepsizeIntegrator.h,
# propagationSettings.h, propagationTerminationSettings.h (tudat)



classes:

  ###### enums from all included headers

  #       py::enum_<tp::TranslationalPropagatorType>
  #        enum tudat::propagators::TranslationalPropagatorType

  - name: TranslationalPropagatorType
    short_summary: "Enumeration of available translational propagator types."
    extended_summary: |
      Enumeration of translational propagator types supported by tudat.

    attributes:
      - name: undefined_translational_propagator
      - name: cowell
      - name: encke
      - name: gauss_keplerian
      - name: gauss_modified_equinoctial
      - name: unified_state_model_quaternions
      - name: unified_state_model_modified_rodrigues_parameters
      - name: unified_state_model_exponential_map

  #       py::enum_<tp::RotationalPropagatorType>
  #        enum tudat::propagators::RotationalPropagatorType

  - name: RotationalPropagatorType
    short_summary: "Enumeration of available rotational propagator types."
    extended_summary: |
      Enumeration of rotational propagator types supported by tudat.

    attributes:
      - name: undefined_rotational_propagator
      - name: quaternions
      - name: modified_rodrigues_parameters
      - name: exponential_map

  #       py::enum_<tp::IntegratedStateType>
  #        enum tudat::propagators::IntegratedStateType

  - name: IntegratedStateType # [cpp]
  - name: StateType # [py]
    short_summary: "Enumeration of available integrated state types."
    extended_summary: |
      Enumeration of integrated state types supported by tudat.

    attributes:

      - name: hybrid  # [cpp]
      - name: translational_state # [cpp]
      - name: rotational_state # [cpp]
      - name: body_mass_state # [cpp]
      - name: custom_state # [cpp]

      - name: hybrid_type # [py]
      - name: translational_type # [py]
      - name: rotational_type # [py]
      - name: body_mass_type # [py]
      - name: custom_type # [py]


  #   enum tudatpy.simulation.propagation_setup.propagator.PropagationTerminationTypes # python only(?)

  - name: RotationalPropagatorType # [py]
    short_summary: "Enumeration of available rotational propagator types." # [py]
    extended_summary: | # [py]
      Enumeration of rotational propagator types supported by tudat. # [py]

    attributes:
      - name: time_stopping_condition # [py]
      - name: cpu_time_stopping_condition # [py]
      - name: dependent_variable_stopping_condition # [py]
      - name: hybrid_stopping_condition # [py]
      - name: custom_stopping_condition # [py]

  ######

  # base: dependent variables
  - name: DependentVariableSaveSettings
    short_summary: "Functional class to define settings for dependent variable to save."
    extendend_summary: |
      Class to define settings for dependent variable to save.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user because this is a base class.


  # base: propagator
  - name: PropagatorSettings
    short_summary: "Functional base class to define settings for propagators."
    extendend_summary: |
      Base class to define settings for propagators. Derived classes are split into settings for single- and multi-arc dynamics.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user because this is a base class.

      - name: resetInitialStates # [cpp]
      - name: reset_initial_states # [py]
        short_summary: "Function to reset the initial state used as input for numerical integration."
        extended_summary: |
          Function to reset the initial state used as input for numerical integration.
        parameters:
        - name: initialBodyStates # [cpp]
          type: Eigen::Matrix # [cpp]
        - name: initial_states # [py]
          type: numpy.ndarray # [py]
          description: Initial states to be reset for the numerical propagation.


  # derived: propagator (1)
  - name: MultiArcPropagatorSettings
    short_summary: "`PropagatorSettings`-derived class to define settings for multi-arc dynamics."
    extendend_summary: |
       `PropagatorSettings`-derived class to define settings for multi-arc dynamics.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.


  # derived: propagator (2)
  - name: HybridArcPropagatorSettings
    short_summary: "`PropagatorSettings`-derived class to define settings for hybrid-arc dynamics."
    extendend_summary: |
       `PropagatorSettings`-derived class to define settings for hybrid-arc dynamics.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.


  # derived: propagator (3)
  - name: SingleArcPropagatorSettings
    short_summary: "`PropagatorSettings`-derived class to define settings for single-arc dynamics."
    extendend_summary: |
       `PropagatorSettings`-derived class to define settings for single-arc dynamics.

    attributes:
    - name: terminationSettings_ # [cpp]
      type: PropagationTerminationSettings # [cpp]
    - name: termination_settings # [py]
      type: PropagationTerminationSettings # [py]
      description: Settings for creating the object that checks whether the propagation is finished.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.

  # derived, level 2: translational propagator
  - name: TranslationalStatePropagatorSettings
    short_summary: "`SingleArcPropagatorSettings`-derived class to define settings for single-arc translational dynamics."
    extendend_summary: |
       `SingleArcPropagatorSettings`-derived class to define settings for single-arc translational dynamics.

    attributes:
    - name: accelerationSettingsMap_ # [cpp] readonly
      type: SelectedAccelerationMap # [cpp] readonly
    - name: acceleration_settings # [py] readonly
      type: SelectedAccelerationMap # [py] readonly
      description: Settings for retrieving the accelerations acting on the body during propagation.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.

      - name: resetInitialStates # [cpp]
      - name: reset_initial_states # [py]
        short_summary: "Function to reset the initial state used as input for numerical integration."
        extended_summary: |
          Function to reset the initial state used as input for numerical integration.
        parameters:
        - name: initialBodyStates # [cpp]
          type: Eigen::Matrix # [cpp]
        - name: initial_states # [py]
          type: numpy.ndarray # [py]
          description: Initial states to be reset for the numerical propagation.

      - name: resetIntegratedStateModels # [cpp]
      - name: recreate_state_derivative_models # [py]
        short_summary: "Function to (re)create the integrated state models (e.g. acceleration/torque/mass models)."
        extended_summary: |
          Function to create the integrated state models (e.g. acceleration/torque/mass models) for
          each fo the propagators state types contained in `propagatorSettingsMap_`.
        parameters:
        - name: bodies # [cpp]
          type: SystemOfBodies # [cpp]
        - name: bodies # [py]
          type: SystemOfBodies # [py]
          description: System of bodies used in the propagation.

      - name: getSingleTypePropagatorSettings # [cpp]
      - name: single_type_settings # [py]
        short_summary: "Function to retrieve a single type of propagator."
        extended_summary: |
          Function to retrieve a single type of propagator (translational, rotational or mass). This function is
          often used in multi-type propagation.
        parameters:
        - name: stateType # [cpp]
          type: IntegratedStateType # [cpp]
        - name: state_type # [py]
          type: IntegratedStateType # [py]
          description: State type to be retrieved.


  # derived, level 2: rotational state propagator
  - name: RotationalStatePropagatorSettings
    short_summary: "`SingleArcPropagatorSettings`-derived class to define settings for single-arc rotational state propagation."
    extendend_summary: |
       `SingleArcPropagatorSettings`-derived class to define settings for single-arc rotational state propagation.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.


  # derived, level 2: multitype propagator
  - name: MultiTypePropagatorSettings
    short_summary: "`SingleArcPropagatorSettings`-derived class to define settings for propagation of multiple quantities."
    extendend_summary: |
       `SingleArcPropagatorSettings`-derived class to define settings for propagation of multiple quantities.

    attributes:
    - name: propagator_settings_per_type # [py]
      type: dict[IntegratedStateType, list[SingleArcPropagatorSettings]] # [py]

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.

      - name: resetInitialStates # [cpp]
      - name: reset_initial_states # [py]
        short_summary: "Function to reset the initial states used as input for numerical integration."
        extended_summary: |
          Function to reset the initial states used as input for numerical integration.
        parameters:
        - name: initialBodyStates # [cpp]
          type: Eigen::Matrix # [cpp]
        - name: initial_states # [py]
          type: numpy.ndarray # [py]
          description: Initial states to be reset for the numerical propagation.

      - name: resetIntegratedStateModels # [cpp]
      - name: recreate_state_derivative_models # [py]
        short_summary: "Function to (re)create the integrated state models (e.g. acceleration/torque/mass models)."
        extended_summary: |
          Function to create the integrated state models (e.g. acceleration/torque/mass models) for
          each of the propagators state types contained in `propagatorSettingsMap_`.
        parameters:
        - name: bodies # [cpp]
          type: SystemOfBodies # [cpp]
        - name: bodies # [py]
          type: SystemOfBodies # [py]
          description: System of bodies used in the propagation.

      - name: getSingleTypePropagatorSettings # [cpp]
      - name: single_type_settings # [py]
        short_summary: "Function to retrieve a single type of propagator."
        extended_summary: |
          Function to retrieve a single type of propagator (translational, rotational or mass). This function is
          often used in multi-type propagation.
        parameters:
        - name: stateType # [cpp]
          type: IntegratedStateType # [cpp]
        - name: state_type # [py]
          type: IntegratedStateType # [py]
          description: State type to be retrieved.

      - name: getPropagatorSettingsMap # [cpp]
        short_summary: "Function to retrieve the propagator settings map." # [cpp]
        extended_summary: "Function to retrieve the propagator settings map." # [cpp]


  # base: termination settings
  - name: PropagationTerminationSettings
    short_summary: "Functional base class to define termination settings for the propagation."
    extendend_summary: |
       Functional base classclass to define termination settings for the propagation.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user because this is a base class.


  # derived (1): dependent variable termination settings
  - name: PropagationDependentVariableTerminationSettings
    short_summary: "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from dependent variables."
    extendend_summary: |
       `PropagationTerminationSettings`-derived class to define termination settings for the propagation from dependent variables.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.


  # derived (2): time termination settings
  - name: PropagationTimeTerminationSettings
    short_summary: "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from propagation time."
    extendend_summary: |
       `PropagationTerminationSettings`-derived class to define termination settings for the propagation from propagation time.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.


  # derived (3): CPU time termination settings
  - name: PropagationCPUTimeTerminationSettings
    short_summary: "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from CPU time."
    extendend_summary: |
       `PropagationTerminationSettings`-derived class to define termination settings for the propagation from CPU time.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.


  # derived (4): custom termination settings
  - name: PropagationCustomTerminationSettings
    short_summary: "`PropagationTerminationSettings`-derived class to define custom termination settings for the propagation."
    extendend_summary: |
       `PropagationTerminationSettings`-derived class to define custom termination settings for the propagation.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.


  # derived (5): hybrid termination settings
  - name: PropagationHybridTerminationSettings
    short_summary: "`PropagationTerminationSettings`-derived class to define hybrid termination settings for the propagation."
    extendend_summary: |
       `PropagationTerminationSettings`-derived class to define hybrid termination settings for the propagation.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.


  # Base: dynamics simulator
  - name: SingleArcDynamicsSimulator
    short_summary: "Base class to define single arc dynamics simulator settings."
    extendend_summary: |
       Functional base class to define settings for single arc dynamics simulation.

    attributes:
      - name: equationsOfMotionNumericalSolution_ # [cpp]
        type: std::map<double, Eigen::Matrix> # [cpp]
      - name: state_history # [py]
        type: Dict[float, numpy.ndarray] # [py]
        description: |
          Numerical solution of the equations of motion as key-value pairs. This consists of the state history
          of the propagated bodies expressed in cartesian coordinates (X, Y, Z, Vx, Vy, Vz) in the base reference frame
          as value, with the epoch as key.

      - name: equationsOfMotionNumericalSolutionRaw_ # [cpp]
        type: std::map<double, Eigen::Matrix> # [cpp]
      - name: unprocessed_state_history # [py]
        type: Dict[float, numpy.ndarray] # [py]
        description: |
          Raw numerical solution of the equations of motion as key-value pairs. This consists of the state history
          of the propagated bodies expressed in the "raw" form in which the propagation took place (e.g., Encke, Gauss,
          etc...) as value, with the epoch as key.

      - name: dependentVariableHistory_ # [cpp]
        type: std::map<double, Eigen::Vector> # [cpp]
      - name: dependent_variable_history # [py]
        type: Dict[float, numpy.ndarray] # [py]
        description: |
          Dependent variables computed during the propagation as key-value pairs.
          They are returned in the order with the same order of the DependentVariableSaveSettings object as values,
          as value, with the epoch as key.

      - name: cumulativeComputationTimeHistory_ # [cpp]
        type: std::map<double, double> # [cpp]
      - name: cumulative_computation_time_history # [py]
        type: Dict[float, float] # [py]
        description: |
          History of cumulative computation time needed during the propagation as key-value
          pairs. This means that at each time step the computation time is the sum of the computation time needed for that particular
          time step and the computation time needed for all the previous time steps. The computation time is returned
          as value, with time as key.

      - name: cumulativeNumberOfFunctionEvaluations_ # [cpp]
        type: std::map<double, int> # [cpp]
      - name: cumulative_number_of_function_evaluations # [py]
        type: Dict[float, int] # [py]
        description: |
          This function returns the history of cumulative computation number of function evaluations needed during the propagation as key-value
          pairs. This means that at each time step the number of function evaluations is the sum of the computation time needed for that particular
          time step and the number of function evaluations needed for all the previous time steps. The number of function evaluations is returned
          as value, with time as key.

      - name: state_history_base # [py]
        type: numpy.ndarray[Dict[float, numpy.ndarray]] # [py]
        description: |
          Numerical solution of the equations of motion as a vector of key-value containers. This consists of the state history
          of the propagated bodies expressed in cartesian coordinates (X, Y, Z, Vx, Vy, Vz) in the base reference frame
          as value, with the epoch as key. This function is similar to the corresponding function without "base", with
          different return types.

      - name: getDependentVariableHistoryBase # [cpp]
        type: numpy.ndarray[Dict[float, numpy.ndarray]] # [py]
        description: |
          This function returns the dependent variables computed during the propagation as a vector of key-value containers.
          They are returned in the order with the same order of the DependentVariableSaveSettings object as values,
          as value, with the epoch as key. This function is similar to the corresponding function without "base", with
          different return types.

      - name: getCumulativeComputationTimeHistoryBase # [cpp]
        type: numpy.ndarray[Dict[float, numpy.ndarray]] # [py]
        description: |
          This function returns the history of cumulative computation time needed during the propagationas a vector of key-value containers.
          This means that at each time step the computation time is the sum of the computation time needed for that particular
          time step and the computation time needed for all the previous time steps. The computation time is returned
          as value, with time as key. This function is similar to the corresponding function without "base", with
          different return types.

      - name: integratorSettings_ # [cpp]
      - name: integrator_settings # [py]
        type: IntegratorSettings
        description: |
          Object used in the propagation to specify the integrator settings.

      - name: stateDerivativeFunction_ # [cpp]
        type: std::function<Eigen::Matrix>(double, Eigen::Matrix)
      - name: state_derivative_function # [py]
        type: Callable[[float, numpy.ndarray], numpy.ndarray]
        description: |
          Function that performs a single state derivative function evaluation.

      - name: doubleStateDerivativeFunction_ # [cpp]
        type: std::function<Eigen::Matrix>(double, Eigen::Matrix) # [cpp]
      - name: double_state_derivative_function # [py]
        type: Callable[[float, numpy.ndarray], numpy.ndarray] # [py]
        description: |
          Function that performs a single state derivative function evaluation with double precision.

      - name: environmentUpdater_ # [cpp]
      - name: environment_updater # [py]
        type: EnvironmentUpdater
        description: |
          Object used in the propagation to update the enviroment.

      - name: propagationTerminationCondition_ # [cpp]
      - name: propagation_termination_condition # [py]
        type: PropagationTerminationCondition
        description: |
          Object used in the propagation to define when the propagation should stop.

      - name: integratedStateProcessors_ # [cpp]
        type: std::map<IntegratedStateType, std::vector<IntegratedStateProcessor>> # [cpp]
      - name: integrated_state_processors # [py]
        type: Dict[float, List[IntegratedStateProcessor]] # [py]
        description: |
          List of object (per dynamics type) that process the integrated numerical solution by updating the environment.

      - name: propagationTerminationReason_ # [cpp]
      - name: propagation_termination_reason # [py]
        type: PropagationTerminationCondition
        description: |
          Event that triggered the termination of the last propagation.

      - name: integratedStateProcessors_ # [cpp]
        type: bool # [cpp]
      - name: integrated_state_processors # [py]
        type: bool # [py]
        description: |
          Whether the integration was completed successfully.

      - name: dependentVariableIds_ # [cpp]
        type: std::map< int, std::string > # [cpp]
      - name: dependent_variable_ids # [py]
        type: Dict[int, str] # [py]
        description: |
          Key-value container with the starting entry of the dependent variables saved (key), along with associated ID (value).

      - name: initialPropagationTime_ # [cpp]
        type: double # [cpp]
      - name: initial_propagation_time # [py]
        type: float # [py]
        description: |
          Initial time of the propagation.

      - name: dependentVariablesFunctions_ # [cpp]
        type: std::function<Eigen::Vector> # [cpp]
      - name: dependent_variables_functions # [py]
        type: List[numpy.ndarray] # [py]
        description: |
          List of functions that compute the dependent variables at each time step.


    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user because this is a base class.

      - name: integrateEquationsOfMotion # [cpp]
      - name: integrate_equations_of_motion # [py]
        short_summary: "This function numerically (re-)integrates the equations of motion."
        extended_summary: |
          This function numerically (re-)integrates the equations of motion, using the settings set through the constructor
          and a new initial state vector provided here. The raw results are set in the equationsOfMotionNumericalSolution_
          attribute.

        parameters:
        - name: initialStates # [cpp]
          type: Eigen::Matrix # [cpp]
        - name: initial_states # [py]
          type: numpy.ndarray # [py]
          description: |
            Initial state vector that is to be used for numerical integration. Note that this state should
            be in the correct frame (i.e. corresponding to centralBodies in propagatorSettings_), but not in the propagator-
            specific form (i.e Encke, Gauss, etc. for translational dynamics).

      - name: manuallySetAndProcessRawNumericalEquationsOfMotionSolution # [cpp]
      - name: manually_set_and_process_raw_numerical_equations_of_motion_solution # [py]
        short_summary: "This function returns the history of cumulative computation time needed during the propagation as a vector of key-value containers."
        extended_summary: |
          This function returns the history of cumulative computation time needed during the propagationas a vector of key-value containers.
          This means that at each time step the computation time is the sum of the computation time needed for that particular
          time step and the computation time needed for all the previous time steps. The computation time is returned
          as value, with time as key. This function is similar to the corresponding function without "base", with
          different return types.

        parameters:
          - name: equationsOfMotionNumericalSolution # [cpp]
            type: std::map<double, Eigen::Matrix> # [cpp]
          - name: equations_of_motion_numerical_solution # [py]
            type: Dict[float, numpy.ndarray] # [py]
            description: State history generated externally.

          - name: dependentVariableHistory # [cpp]
            type: std::map<double, Eigen::Vector> # [cpp]
          - name: dependent_variable_history # [py]
            type: Dict[float, numpy.ndarray] # [py]
            description: Dependent variable history generated externally.

          - name: processSolution # [cpp]
            type: bool # [cpp]
          - name: process_solution # [py]
            type: bool # [py]
            description: If true, the new solution will be reprocessed immediately.

      - name: resetInitialPropagationTime # [cpp]
      - name: reset_initial_propagation_time # [py]
        short_summary: "This function resets the initial time of the propagation."
        extended_summary: |
          This function resets the initial time of the propagation.

        parameters:
        - name: initialPropagationTime # [cpp]
          type: double # [cpp]
        - name: new_initial_propagation_time # [py]
          type: float # [py]
          description: |
            New value for the initial time of the propagation.

      - name: resetPropagationTerminationConditions # [cpp]
      - name: reset_propagation_termination_conditions # [py]
        short_summary: "This function resets the termination conditions of the propagation."
        extended_summary: |
          Function to reset the object that checks whether the simulation should be stopped based on the (newly)
          defined propagation settings.

      - name: processNumericalEquationsOfMotionSolution # [cpp]
      - name: process_numerical_equations_of_motion_solution # [py]
        short_summary: "This function updates the environment with the numerical solution of the propagation."
        extended_summary: |
          This function updates the environment with the numerical solution of the propagation. It sets
          the propagated translational dynamics solution as the new input for the Ephemeris object of the body that was
          propagated.

      - name: suppressDependentVariableDataPrinting # [cpp]
      - name: suppress_dependent_variable_terminal_printing # [py]
        short_summary: "This function is used to deactivate the output to the terminal informing the user about the dependent variable saved."
        extended_summary: |
          This function is used to deactivate the output to the terminal informing the user about the dependent variable saved.

      - name: enableDependentVariableDataPrinting # [cpp]
      - name: enable_dependent_variable_terminal_printing # [py]
        short_summary: "This function is used to activate the output to the terminal informing the user about the dependent variable saved."
        extended_summary: |
          This function is used to activate the output to the terminal informing the user about the dependent variable saved.


functions:

  # Free function
  - name: createCombinedInitialState # [cpp]
  - name: combine_initial_states # [py]
    short_summary: "Function to retrieve the initial state for a list of propagator settings."
    extended_summary: |
      Function to retrieve the initial state for a list of propagator settings. This way, the initial state for
      different quantities to be propagated (e.g., translational state, rotational state, mass) are retrieved and
      organized in a single container.

    parameters:
      - name: propagatorSettingsList # [cpp]
        type: map # [cpp]
      - name: propagator_settings_per_type # [py]
        type: dict # [py]
        description: Propagator settings where the type of propagation is reported as key and the respective list of propagator settings as value.

    returns:
        type: Eigen::Matrix # [cpp]
        type: numpy.ndarray # [py]
        description: Vector of initial states, sorted in order of IntegratedStateType, and then in the order of the vector of SingleArcPropagatorSettings of given type.

  # First overload
  - name: createAccelerationModelsMap # [cpp]
  - name: create_acceleration_models # [py]
    short_summary: "Function to create a set of acceleration models from a dictionary of bodies linked to acceleration model types."

    extended_summary: |
      Function to create a set of acceleration models from a map of bodies and acceleration model types. The propagated
      bodies and central bodies are provided through a dictionary.

    parameters:
      - name: bodies # [cpp]
        type: SystemOfBodies # [cpp]
      - name: body_system # [py]
        type: SystemOfBodies # [py]
        description: System of bodies to be used in the propagation.

      - name: selectedAccelerationPerBody # [cpp]
        type: SelectedAccelerationMap # [cpp]
      - name: selected_acceleration_per_body # [py]
        type: SelectedAccelerationMap # [py]
        description: Key-value container indicating the acceleration type(s) as value and the body undergoing such acceleration(s) as key.

      - name: centralBodies # [cpp]
        type: map # [cpp]
      - name: central_bodies # [py]
        type: dict # [py]
        description: Key-value container indicating the body to propagate as key and its central body as value.

    returns:
        type: AccelerationMap # [cpp]
        type: AccelerationMap # [py]
        description: Set of accelerations acting on the bodies to propagate, provided as acceleration models.


  # Second overload
  - name: createAccelerationModelsMap # [cpp]
  - name: create_acceleration_models # [py]
    short_summary: "Function to create a set of acceleration models from a dictionary of bodies linked to acceleration model types."

    extended_summary: |
      Function to create a set of acceleration models from a map of bodies and acceleration model types. The propagated
      bodies and central bodies are provided as two separate lists with the same order.

    parameters:
      - name: bodies # [cpp]
        type: SystemOfBodies # [cpp]
      - name: body_system # [py]
        type: SystemOfBodies # [py]
        description: System of bodies to be used in the propagation.

      - name: selectedAccelerationPerBody # [cpp]
        type: SelectedAccelerationMap # [cpp]
      - name: selected_acceleration_per_body # [py]
        type: SelectedAccelerationMap # [py]
        description: Key-value container indicating the acceleration type(s) as value and the body undergoing such acceleration(s) as key.

      - name: propagatedBodies # [cpp]
        type: std::vector # [cpp]
      - name: bodies_to_propagate # [py]
        type: list # [py]
        description: List of bodies to propagate.

      - name: centralBodies # [cpp]
        type: std::vector # [cpp]
      - name: central_bodies # [py]
        type: list # [py]
        description: List of central bodies, each referred to each propagated body in the same order.

    returns:
        type: AccelerationMap # [cpp]
        type: AccelerationMap # [py]
        description: Set of accelerations acting on the bodies to propagate, provided as acceleration models.


  - name: createTorqueModelsMap # [cpp]
  - name: create_acceleration_models # [py]
    short_summary: "Function to create a set of acceleration models from a dictionary of bodies linked to acceleration model types."

    extended_summary: |
      Function to create a set of acceleration models from a map of bodies and acceleration model types. The propagated
      bodies is provided as a list.

    parameters:
      - name: bodies # [cpp]
        type: SystemOfBodies # [cpp]
      - name: body_system # [py]
        type: SystemOfBodies # [py]
        description: System of bodies to be used in the propagation.

      - name: selectedTorquePerBody # [cpp]
        type: SelectedTorqueMap # [cpp]
      - name: selected_torque_per_body # [py]
        type: SelectedTorqueMap # [py]
        description: Key-value container indicating the acceleration type(s) as value and the body undergoing such acceleration(s) as key.

      - name: propagatedBodies # [cpp]
        type: std::vector # [cpp]
      - name: bodies_to_propagate # [py]
        type: list # [py]
        description: List of bodies to propagate.

    returns:
        type: TorqueModelMap # [cpp]
        type: TorqueModelMap # [py]
        description: Set of torques acting on the bodies to propagate, provided as torque models.


  - name: getInitialStatesOfBodies # [cpp]
  - name: create_acceleration_models # [py]
    short_summary: "Function to get the states of a set of bodies, with respect to some set of central bodies, at the requested time."

    extended_summary: |
      Function to get the states of a set of bodies, with respect to some set of central bodies, at the requested time.

    parameters:
      - name: bodiesToIntegrate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_to_propagate # [py]
        type: List[str] # [py]
        description: List of bodies to be propagated.

      - name: centralBodies # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: central_bodies # [py]
        type: List[str] # [py]
        description: List of central bodies, each referred to a body being propagated (in the same order).

      - name: bodies # [cpp]
        type: SystemOfBodies # [cpp]
      - name: bodies_to_propagate # [py]
        type: body_system # [py]
        description: System of bodies used in the propagation.

      - name: initialTime # [cpp]
        type: double # [cpp]
      - name: initial_time # [py]
        type: float # [py]
        description: Initial time of the propagation.

    returns:
        type: Eigen::Matrix # [cpp]
        type: numpy.ndarray # [py]
        description: Time at which the states should be retrieved.


  # Translational propagator (overload 2)
  - name: translationalStatePropagatorSettings # [cpp]
  - name: translational # [py]
    short_summary: "Factory function to create translational state propagator settings with generic stopping conditions."
    extended_summary: |
      Factory function to create translational state propagator settings with generic stopping conditions.
      It works by providing a key-value acceleration container, containing the list of accelerations acting on
      each body. The map has as key a string denoting the name of the body on which a set of accelerations, provided
      as value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration
      and the value (a pointer to) an acceleration model. In this function, the termination conditions are set
      through the termination settings object provided.

    parameters:
      - name: centralBodies # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: central_bodies # [py]
        type: list[str] # [py]
        description: List of central bodies with respect to which the bodies to be integrated are propagated.

      - name: accelerationsMap # [cpp]
        type: AccelerationMap # [cpp]
      - name: acceleration_models # [py]
        type: AccelerationMap # [py]
        description: Set of accelerations acting on the bodies to propagate, provided as acceleration models.

      - name: bodiesToIntegrate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_to_integrate # [py]
        type: list[str] # [py]
        description: List of bodies to be numerically propagated, whose order reflects the order of the central bodies.

      - name: initialBodyStates # [cpp]
        type: Eigen::Matrix # [cpp]
      - name: initial_states # [py]
        type: numpy.ndarray # [py]
        description: Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.

      - name: terminationSettings # [cpp]
        type: PropagationTerminationSettings # [cpp]
      - name: termination_settings # [py]
        type: PropagationTerminationSettings # [py]
        description: Generic termination settings object to check whether the propagation should be ended.

      - name: propagator # [cpp]
        type: TranslationalPropagatorType, default=cowell # [cpp]
      - name: propagator # [py]
        type: TranslationalPropagatorType, default=cowell # [py]
        description: Type of translational propagator to be used (see `TranslationalPropagatorType` enum).

      - name: dependentVariablesToSave # [cpp]
        type: std::vector<SingleDependentVariableSaveSettings>, default=std::vector() # [cpp]
      - name: output_variables # [py]
        type: list[SingleDependentVariableSaveSettings], default=[] # [py]
        description: List of dependent variables to be saved, provided as a list of SingleDependentVariableSaveSettings objects (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: TranslationalStatePropagatorSettings
        description: Translational state propagator settings object.


  # Translational propagator (overload 6)
  - name: translationalStatePropagatorSettings # [cpp]
  - name: translational_with_time_termination # [py]
    short_summary: "Factory function to create translational state propagator settings with stopping condition at given final time."
    extended_summary: |
      Factory function to create translational state propagator settings with stopping condition at given final time.
      It works by providing a key-value acceleration container, containing the list of accelerations acting on
      each body. The map has as key a string denoting the name of the body on which a set of accelerations, provided
      as value, act. This set is again a key-value container, with the key denoting the body exerting the acceleration
      and the value (a pointer to) an acceleration model. In this function, the termination conditions are set
      through the final time provided.

    parameters:
      - name: centralBodies # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: central_bodies # [py]
        type: list[str] # [py]
        description: List of central bodies with respect to which the bodies to be integrated are propagated.

      - name: accelerationsMap # [cpp]
        type: AccelerationMap # [cpp]
      - name: acceleration_models # [py]
        type: AccelerationMap # [py]
        description: Set of accelerations acting on the bodies to propagate, provided as acceleration models.

      - name: bodiesToIntegrate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_to_integrate # [py]
        type: list[str] # [py]
        description: List of bodies to be numerically propagated, whose order reflects the order of the central bodies.

      - name: initialBodyStates # [cpp]
        type: Eigen::Matrix # [cpp]
      - name: initial_states # [py]
        type: numpy.ndarray # [py]
        description: Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.

      - name: endTime # [cpp]
        type: double # [cpp]
      - name: termination_time # [py]
        type: float # [py]
        description: Final time of the propagation to be used as termination criterion.

      - name: propagator # [cpp]
        type: TranslationalPropagatorType, default=cowell # [cpp]
      - name: propagator # [py]
        type: TranslationalPropagatorType, default=cowell # [py]
        description: Type of translational propagator to be used (see `TranslationalPropagatorType` enum).

      - name: dependentVariablesToSave # [cpp]
        type: std::vector<SingleDependentVariableSaveSettings>, default=std::vector() # [cpp]
      - name: output_variables # [py]
        type: list[SingleDependentVariableSaveSettings], default=[] # [py]
        description: List of dependent variables to be saved (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: TranslationalStatePropagatorSettings
        description: Translational state propagator settings object.


  # Translational propagator (overload 7)
  - name: translationalStatePropagatorSettings # [cpp]
  - name: translational_from_acceleration_settings # [py]
    short_summary: "Factory function to create translational state propagator settings with generic stopping conditions, and acceleration settings input."
    extended_summary: |
      Factory function to create translational state propagator settings with generic stopping conditions, and acceleration
      settings input. Unlike the typical propagator settings factory functions, it works by providing a key-value acceleration
      *settings* container, containing the list of accelerations settings acting on each body. The map has as key a string
      denoting the name of the body on which a set of accelerations, provided as value, act. This set is again a key-value
      container, with the key denoting the body exerting the acceleration  and the value (a pointer to) an acceleration settings
      object. In this function, the termination conditions are set through the final time provided. NOTE, this function is *only*
      used in the rare cases where the creation of the acceleration models is to be deferred until after the propagator settings
      creation, or where the acceleration settings of the same propagator settings are to be modified in a loop. When in doubt,
      use the regular ``translational`` function.

    parameters:
      - name: centralBodies # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: central_bodies # [py]
        type: list[str] # [py]
        description: List of central bodies with respect to which the bodies to be integrated are propagated.

      - name: accelerationSettingsMap # [cpp]
        type: SelectedAccelerationMap # [cpp]
      - name: acceleration_settings # [py]
        type: SelectedAccelerationMap # [py]
        description: Set of accelerations acting on the bodies to propagate, provided as acceleration settings objects.

      - name: bodiesToIntegrate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_to_integrate # [py]
        type: list[str] # [py]
        description: List of bodies to be numerically propagated, whose order reflects the order of the central bodies.

      - name: initialBodyStates # [cpp]
        type: Eigen::Matrix # [cpp]
      - name: initial_states # [py]
        type: numpy.ndarray # [py]
        description: Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.

      - name: endTime # [cpp]
        type: double # [cpp]
      - name: termination_time # [py]
        type: float # [py]
        description: Final time of the propagation to be used as termination criterion.

      - name: propagator # [cpp]
        type: TranslationalPropagatorType, default=cowell # [cpp]
      - name: propagator # [py]
        type: TranslationalPropagatorType, default=cowell # [py]
        description: Type of translational propagator to be used (see `TranslationalPropagatorType` enum).

      - name: dependentVariablesToSave # [cpp]
        type: std::vector<SingleDependentVariableSaveSettings>, default=std::vector() # [cpp]
      - name: output_variables # [py]
        type: list[SingleDependentVariableSaveSettings], default=[] # [py]
        description: List of dependent variables to be saved (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: TranslationalStatePropagatorSettings
        description: Translational state propagator settings object.


  # Rotational propagator (overload 1)
  - name: RotationalStatePropagatorSettings # [cpp]
  - name: rotational # [py]
    short_summary: "Factory function to create rotational state propagator settings with generic stopping conditions."
    extended_summary: |
      Factory function to create rotational state propagator settings with generic stopping conditions.
      It works by providing a key-value torque container, containing the list of torques acting on
      each body. The map has as key a string denoting the name of the body on which a set of torques, provided
      as value, act. This set is again a key-value container, with the key denoting the body exerting the torque
      and the value (a pointer to) a torque model. In this function, the termination conditions are set
      through the termination settings object provided.

    parameters:
      - name: torqueModelMap # [cpp]
        type: TorqueModelMap # [cpp]
      - name: torque_models # [py]
        type: TorqueModelMap # [py]
        description: Set of torques acting on the bodies to propagate, provided as torque models.

      - name: bodiesToIntegrate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_to_integrate # [py]
        type: list[str] # [py]
        description: List of bodies to be numerically propagated, whose order reflects the order of the central bodies.

      - name: initialBodyStates # [cpp]
        type: Eigen::Matrix # [cpp]
      - name: initial_states # [py]
        type: numpy.ndarray # [py]
        description: Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.

      - name: terminationSettings # [cpp]
        type: PropagationTerminationSettings # [cpp]
      - name: termination_settings # [py]
        type: PropagationTerminationSettings # [py]
        description: Generic termination settings object to check whether the propagation should be ended.

      - name: propagator # [cpp]
        type: RotationalPropagatorType, default=quaternions # [cpp]
      - name: propagator # [py]
        type: RotationalPropagatorType, default=quaternions # [py]
        description: Type of rotational propagator to be used (see `RotationalPropagatorType` enum).

      - name: dependentVariablesToSave # [cpp]
        type: std::vector<SingleDependentVariableSaveSettings>, default=std::vector() # [cpp]
      - name: output_variables # [py]
        type: list[SingleDependentVariableSaveSettings], default=[] # [py]
        description: List of dependent variables to be saved (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: RotationalStatePropagatorSettings
        description: Rotational state propagator settings object.


  # Rotational propagator (overload 2)
  - name: RotationalStatePropagatorSettings # [cpp]
  - name: rotational_from_torque_settings # [py]
    short_summary: "Factory function to create rotational state propagator settings with generic stopping conditions, and torque settings input."
    extended_summary: |
      Factory function to create rotational state propagator settings with generic stopping conditions, and torque
      settings input. Unlike the typical propagator settings factory functions, it works by providing a key-value torque
      *settings* container, containing the list of torques acting on each body. The map has as key a string denoting the name
      of the body on which a set of torques, provided as value, act. This set is again a key-value container, with the key
      denoting the body exerting the torque and the value (a pointer to) a torque settings object. In this function, the
      termination conditions are set through the termination settings object provided. NOTE, this function is *only* used in the
      rare cases where the creation f the torque models is to be deferred until after the propagator settings creation, or where
      the torque settings the same propagator settings are to be modified in a loop. When in doubt, use the regular ``rotational``
      function.


    parameters:
      - name: torqueSettingsMap # [cpp]
        type: SelectedTorqueMap # [cpp]
      - name: torque_settings # [py]
        type: SelectedTorqueMap # [py]
        description: Set of torques acting on the bodies to propagate, provided as torque settings object.

      - name: bodiesToIntegrate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_to_integrate # [py]
        type: list[str] # [py]
        description: List of bodies to be numerically propagated, whose order reflects the order of the central bodies.

      - name: initialBodyStates # [cpp]
        type: Eigen::Matrix # [cpp]
      - name: initial_states # [py]
        type: numpy.ndarray # [py]
        description: Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.

      - name: terminationSettings # [cpp]
        type: PropagationTerminationSettings # [cpp]
      - name: termination_settings # [py]
        type: PropagationTerminationSettings # [py]
        description: Generic termination settings object to check whether the propagation should be ended.

      - name: propagator # [cpp]
        type: RotationalPropagatorType, default=quaternions # [cpp]
      - name: propagator # [py]
        type: RotationalPropagatorType, default=quaternions # [py]
        description: Type of rotational propagator to be used (see `RotationalPropagatorType` enum).

      - name: dependentVariablesToSave # [cpp]
        type: std::vector<SingleDependentVariableSaveSettings>, default=std::vector() # [cpp]
      - name: output_variables # [py]
        type: list[SingleDependentVariableSaveSettings], default=[] # [py]
        description: List of dependent variables to be saved (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: RotationalStatePropagatorSettings
        description: Rotational state propagator settings object.


  # Rotational propagator (overload 3)
  - name: RotationalStatePropagatorSettings # [cpp]
  - name: rotational_with_time_termination # [py]
    short_summary: "Factory function to create rotational state propagator settings with stopping condition at given final time."
    extended_summary: |
      Factory function to create rotational state propagator settings settings with stopping condition at given final time.
      It works by providing a key-value torque container, containing the list of torques acting on
      each body. The map has as key a string denoting the name of the body on which a set of torques, provided
      as value, act. This set is again a key-value container, with the key denoting the body exerting the torque
      and the value (a pointer to) a torque settings object. In this function, the termination conditions are set
      through the termination settings object provided.

    parameters:
      - name: torqueSettingsMap # [cpp]
        type: SelectedTorqueMap # [cpp]
      - name: torque_settings # [py]
        type: SelectedTorqueMap # [py]
        description: Set of torques acting on the bodies to propagate, provided as torque settings object.

      - name: bodiesToIntegrate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_to_integrate # [py]
        type: list[str] # [py]
        description: List of bodies to be numerically propagated, whose order reflects the order of the central bodies.

      - name: initialBodyStates # [cpp]
        type: Eigen::Matrix # [cpp]
      - name: initial_states # [py]
        type: numpy.ndarray # [py]
        description: Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.

      - name: endTime # [cpp]
        type: double # [cpp]
      - name: termination_time # [py]
        type: float # [py]
        description: Final time of the propagation to be used as termination criterion.

      - name: propagator # [cpp]
        type: RotationalPropagatorType, default=quaternions # [cpp]
      - name: propagator # [py]
        type: RotationalPropagatorType, default=quaternions # [py]
        description: Type of rotational propagator to be used (see `RotationalPropagatorType` enum).

      - name: dependentVariablesToSave # [cpp]
        type: std::vector<SingleDependentVariableSaveSettings>, default=std::vector() # [cpp]
      - name: output_variables # [py]
        type: list[SingleDependentVariableSaveSettings], default=[] # [py]
        description: List of dependent variables to be saved (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: RotationalStatePropagatorSettings
        description: Rotational state propagator settings object.


  # Mass propagator (overload 1)
  - name: massPropagatorSettings # [cpp]
  - name: mass # [py]
    short_summary: "Factory function to create mass propagator settings with generic stopping conditions."
    extended_summary: |
      Factory function to create mass propagator settings with generic stopping conditions.
      It works by providing a key-value mass rate container, containing the list of mass rate models associated to
      each body. In this function, the dependent variables to save are
      provided as a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set
      through the termination settings object provided.

    parameters:
      - name: bodiesWithMassToPropagate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_with_mass_to_propagate # [py]
        type: list[str] # [py]
        description: List of bodies whose mass should be numerically propagated.

      - name: massRateModels # [cpp]
        type: std::map<std::string, MassRateModel> # [cpp]
      - name: mass_rate_models # [py]
        type: dict[str, MassRateModel] # [py]
        description: List of mass rates associated to each body, provided as mass rate models.

      - name: initialBodyMasses # [cpp]
        type: Eigen::Matrix # [cpp]
      - name: initial_body_masses # [py]
        type: numpy.ndarray # [py]
        description: Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate.

      - name: terminationSettings # [cpp]
        type: PropagationTerminationSettings # [cpp]
      - name: termination_settings # [py]
        type: PropagationTerminationSettings # [py]
        description: Generic termination settings object to check whether the propagation should be ended.

      - name: dependentVariablesToSave # [cpp]
        type: DependentVariableSaveSettings, default=none # [cpp]
      - name: output_variables # [py]
        type: DependentVariableSaveSettings, default=none # [py]
        description: Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: MassPropagatorSettings
        description: Mass propagator settings object.


  # Mass propagator (overload 2)
  # TODO: fix description, this function accepts a vector of MassRateModel for each body, why is that? Ask Dominic
  - name: massPropagatorSettings # [cpp]
  - name: mass # [py]
    short_summary: "Factory function to create mass propagator settings with generic stopping conditions."
    extended_summary: |
      Factory function to create mass propagator settings with generic stopping conditions.
      It works by providing a key-value mass rate container, containing the list of mass rate models associated to
      each body. In this function, the dependent variables to save are
      provided as a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set
      through the termination settings object provided.

    parameters:
      - name: bodiesWithMassToPropagate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_with_mass_to_propagate # [py]
        type: list[str] # [py]
        description: List of bodies whose mass should be numerically propagated.

      - name: massRateModels # [cpp]
        type: std::map<std::string, std::vector<MassRateModel>> # [cpp]
      - name: mass_rate_models # [py]
        type: dict[str, MassRateModel] # [py]
        description: List of mass rates associated to each body, provided as mass rate models.

      - name: initialBodyMasses # [cpp]
        type: Eigen::Matrix # [cpp]
      - name: initial_body_masses # [py]
        type: numpy.ndarray # [py]
        description: Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate.

      - name: terminationSettings # [cpp]
        type: PropagationTerminationSettings # [cpp]
      - name: termination_settings # [py]
        type: PropagationTerminationSettings # [py]
        description: Generic termination settings object to check whether the propagation should be ended.

      - name: dependentVariablesToSave # [cpp]
        type: DependentVariableSaveSettings, default=none # [cpp]
      - name: output_variables # [py]
        type: DependentVariableSaveSettings, default=none # [py]
        description: Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: MassPropagatorSettings
        description: Mass propagator settings object.


  # Mass propagator (overload 3)
  - name: massPropagatorSettings # [cpp]
  - name: mass # [py]
    short_summary: "Factory function to create mass propagator settings with generic stopping conditions."
    extended_summary: |
      Factory function to create mass propagator settings with generic stopping conditions.
      It works by providing a key-value mass rate container, containing the list of mass rate settings objects associated to
      each body. In this function, the dependent variables to save are
      provided as a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set
      through the termination settings object provided.

    parameters:
      - name: bodiesWithMassToPropagate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_with_mass_to_propagate # [py]
        type: list[str] # [py]
        description: List of bodies whose mass should be numerically propagated.

      - name: massRateSettings # [cpp]
        type: SelectedMassRateModelMap # [cpp]
      - name: mass_rate_settings # [py]
        type: SelectedMassRateModelMap # [py]
        description: Mass rates associated to each body, provided as a mass rate settings object.

      - name: initialBodyMasses # [cpp]
        type: Eigen::Matrix # [cpp]
      - name: initial_body_masses # [py]
        type: numpy.ndarray # [py]
        description: Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate.

      - name: terminationSettings # [cpp]
        type: PropagationTerminationSettings # [cpp]
      - name: termination_settings # [py]
        type: PropagationTerminationSettings # [py]
        description: Generic termination settings object to check whether the propagation should be ended.

      - name: dependentVariablesToSave # [cpp]
        type: DependentVariableSaveSettings, default=none # [cpp]
      - name: output_variables # [py]
        type: DependentVariableSaveSettings, default=none # [py]
        description: Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: MassPropagatorSettings
        description: Mass propagator settings object.


  # Mass propagator (overload 4)
  - name: massPropagatorSettings # [cpp]
  - name: mass # [py]
    short_summary: "Factory function to create mass propagator settings with generic stopping conditions."
    extended_summary: |
      Factory function to create mass propagator settings with generic stopping conditions.
      It works by providing a key-value mass rate container, containing the list of mass rate models associated to
      each body. In this function, the dependent variables to save are provided
      as a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set
      through the termination settings object provided.

    parameters:
      - name: bodiesWithMassToPropagate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_with_mass_to_propagate # [py]
        type: list[str] # [py]
        description: List of bodies whose mass should be numerically propagated.

      - name: massRateModels # [cpp]
        type: std::map<std::string, MassRateModel> # [cpp]
      - name: mass_rate_models # [py]
        type: dict[str, MassRateModel] # [py]
        description: List of mass rates associated to each body, provided as mass rate models.

      - name: initialBodyMasses # [cpp]
        type: Eigen::Matrix # [cpp]
      - name: initial_body_masses # [py]
        type: numpy.ndarray # [py]
        description: Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate.

      - name: terminationSettings # [cpp]
        type: PropagationTerminationSettings # [cpp]
      - name: termination_settings # [py]
        type: PropagationTerminationSettings # [py]
        description: Generic termination settings object to check whether the propagation should be ended.

      - name: dependentVariablesToSave # [cpp]
        type: std::vector<SingleDependentVariableSaveSettings>, default=std::vector() # [cpp]
      - name: output_variables # [py]
        type: list[SingleDependentVariableSaveSettings], default=[] # [py]
        description: List of dependent variables to be saved (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: MassPropagatorSettings
        description: Mass propagator settings object.


  # Mass propagator (overload 5)
  - name: massPropagatorSettings # [cpp]
  - name: mass # [py]
    short_summary: "Factory function to create mass propagator settings with generic stopping conditions."
    extended_summary: |
      Factory function to create mass propagator settings with generic stopping conditions.
      It works by providing a key-value mass rate container, containing the list of mass rate settings objects associated to
      each body. In this function, the dependent variables to save are provided
      as a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set
      through the termination settings object provided.

    parameters:
      - name: bodiesWithMassToPropagate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_with_mass_to_propagate # [py]
        type: list[str] # [py]
        description: List of bodies whose mass should be numerically propagated.

      - name: massRateSettings # [cpp]
        type: SelectedMassRateModelMap # [cpp]
      - name: mass_rate_settings # [py]
        type: SelectedMassRateModelMap # [py]
        description: Mass rates associated to each body, provided as a mass rate settings object.

      - name: initialBodyMasses # [cpp]
        type: Eigen::Matrix # [cpp]
      - name: initial_body_masses # [py]
        type: numpy.ndarray # [py]
        description: Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate.

      - name: terminationSettings # [cpp]
        type: PropagationTerminationSettings # [cpp]
      - name: termination_settings # [py]
        type: PropagationTerminationSettings # [py]
        description: Generic termination settings object to check whether the propagation should be ended.

      - name: dependentVariablesToSave # [cpp]
        type: std::vector<SingleDependentVariableSaveSettings>, default=std::vector() # [cpp]
      - name: output_variables # [py]
        type: list[SingleDependentVariableSaveSettings], default=[] # [py]
        description: List of dependent variables to be saved (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: MassPropagatorSettings
        description: Mass propagator settings object.


  # Multitype propagator (overload 1)
  - name: multiTypePropagatorSettings # [cpp]
  - name: multitype # [py]
    short_summary: "Factory function to create multitype propagator settings."
    extended_summary: |
      Factory function to create multitype propagator settings with generic stopping conditions.
      It works by providing a list of SingleArcPropagatorSettings objects. In this function, the dependent variables to save are
      provided as a unique DependentVariableSaveSettings objects. In this function, the termination conditions are set
      through the termination settings object provided.

    parameters:
      - name: propagatorSettingsVector # [cpp]
        type: std::vector<SingleArcPropagatorSettings> # [cpp]
      - name: propagator_settings_list # [py]
        type: list[SingleArcPropagatorSettings] # [py]
        description: List of SingleArcPropagatorSettings objects to use.

      - name: terminationSettings # [cpp]
        type: PropagationTerminationSettings # [cpp]
      - name: termination_settings # [py]
        type: PropagationTerminationSettings # [py]
        description: Generic termination settings object to check whether the propagation should be ended.

      - name: dependentVariablesToSave # [cpp]
        type: DependentVariableSaveSettings, default=none # [cpp]
      - name: output_variables # [py]
        type: DependentVariableSaveSettings, default=none # [py]
        description: Cumulative dependent variable to be saved settings object (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: MassPropagatorSettings
        description: Mass propagator settings object.


  # Multitype propagator (overload 2)
  - name: multiTypePropagatorSettings # [cpp]
  - name: multitype # [py]
    short_summary: "Factory function to create multitype propagator settings."
    extended_summary: |
      Factory function to create multitype propagator settings with generic stopping conditions.
      It works by providing a list of SingleArcPropagatorSettings objects. In this function, the dependent variables to save are provided
      as a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set
      through the termination settings object provided.

    parameters:
      - name: propagatorSettingsVector # [cpp]
        type: std::vector<SingleArcPropagatorSettings> # [cpp]
      - name: propagator_settings_list # [py]
        type: list[SingleArcPropagatorSettings] # [py]
        description: List of SingleArcPropagatorSettings objects to use.

      - name: terminationSettings # [cpp]
        type: PropagationTerminationSettings # [cpp]
      - name: termination_settings # [py]
        type: PropagationTerminationSettings # [py]
        description: Generic termination settings object to check whether the propagation should be ended.

      - name: dependentVariablesToSave # [cpp]
        type: std::vector<SingleDependentVariableSaveSettings>, default=std::vector() # [cpp]
      - name: output_variables # [py]
        type: list[SingleDependentVariableSaveSettings], default=[] # [py]
        description: List of dependent variables to be saved (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: MassPropagatorSettings
        description: Mass propagator settings object.


  # Multiarc propagator
  - name: multiArcPropagatorSettings # [cpp]
  - name: multi_arc # [py]
    short_summary: "Factory function to create multi-arc propagator settings."
    extended_summary: |
      Factory function to create multi-arc propagator settings. It works by providing separate settings for
      each arc in a list.

    parameters:
      - name: singleArcSettings # [cpp]
        type: std::vector<SingleArcPropagatorSettings> # [cpp]
      - name: single_arc_settings # [py]
        type: list[SingleArcPropagatorSettings] # [py]
        description: List of SingleArcPropagatorSettings objects to use, one for each arc.

      - name: transferInitialStateInformationPerArc # [cpp]
        type: bool, default=false # [cpp]
      - name: transfer_state_to_next_arc # [py]
        type: bool, default=False # [py]
        description: It denotes whether whether the initial state of arc N+1 is to be taken from arc N (for N>0).

    returns:
        type: MultiArcPropagatorSettings
        description: Multi-arc propagator settings object.

  # Hybrid arc propagator
  - name: hybridArcPropagatorSettings # [cpp]
  - name: hybrid_arc # [py]
    short_summary: "Factory function to create hybrid-arc propagator settings."
    extended_summary: |
      Factory function to create hybrid-arc propagator settings (i.e., a combination of single- and multi-arc dynamics).

    parameters:
      - name: singleArcSettings # [cpp]
        type: SingleArcPropagatorSettings # [cpp]
      - name: single_arc_settings # [py]
        type: SingleArcPropagatorSettings # [py]
        description: SingleArcPropagatorSettings object to use for the propagation.

      - name: multiArcPropagatorSettings # [cpp]
        type: MultiArcPropagatorSettings# [cpp]
      - name: multi_arc_settings # [py]
        type: MultiArcPropagatorSettings # [py]
        description: MultiArcPropagatorSettings object to use for the propagation.

    returns:
        type: HybridArcPropagatorSettings
        description: Hybrid-arc propagator settings object.


  # Time termination
  - name: propagationTimeTerminationSettings # [cpp]
  - name: time_termination # [py]
    short_summary: "Factory function to create time termination settings for the propagation."
    extended_summary: |
      Factory function to create time termination settings for the propagation.
      The propagation is stopped when the final time provided is reached.

    parameters:
      - name: terminationTime # [cpp]
        type: double # [cpp]
      - name: termination_time # [py]
        type: float # [py]
        description: Final time of the propagation.

      - name: checkTerminationToExactCondition # [cpp]
        type: bool, default=false # [cpp]
      - name: terminate_exactly_on_final_condition # [py]
        type: bool, default=False # [py]
        description: Denotes whether the propagation is to terminate exactly on the final condition, or whether it is to terminate on the first step where it is violated.

    returns:
        type: PropagationTimeTerminationSettings
        description: Time termination settings object.


  # CPU time termination
  - name: propagationCPUTimeTerminationSettings # [cpp]
  - name: cpu_time_termination # [py]
    short_summary: "Factory function to create CPU time termination settings for the propagation."
    extended_summary: |
      Factory function to create CPU time termination settings for the propagation.
      The propagation is stopped when the final CPU time provided is reached.

    parameters:
      - name: cpuTerminationTime # [cpp]
        type: double # [cpp]
      - name: cpu_termination_time # [py]
        type: float # [py]
        description: Maximum CPU time for the propagation.

    returns:
        type: PropagationCPUTimeTerminationSettings
        description: CPU time termination settings object.


  # Dependent variable termination
  - name: propagationDependentVariableTerminationSettings # [cpp]
  - name: dependent_variable_termination # [py]
    short_summary: "Factory function to create CPU time termination settings for the propagation."
    extended_summary: |
      Factory function to create CPU time termination settings for the propagation.
      The propagation is stopped when the final CPU time provided is reached.

    parameters:
      - name: dependentVariableSettings # [cpp]
        type: SingleDependentVariableSaveSettings # [cpp]
      - name: dependent_variable_settings # [py]
        type: SingleDependentVariableSaveSettings # [py]
        description: Dependent variable object to be used as termination setting.

      - name: limitValue # [cpp]
        type: double # [cpp]
      - name: limit_value # [py]
        type: float # [py]
        description: Limit value of the dependent variable; if reached, the propagation is stopped.

      - name: useAsLowerLimit # [cpp]
        type: bool, default=false # [cpp]
      - name: use_as_lower_limit # [py]
        type: bool, default=False # [py]
        description: Denotes whether the limit value should be used as lower or upper limit.

      - name: checkTerminationToExactCondition # [cpp]
        type: bool, default=false # [cpp]
      - name: terminate_exactly_on_final_condition # [py]
        type: bool, default=False # [py]
        description: Denotes whether the propagation is to terminate exactly on the final condition, or whether it is to terminate on the first step where it is violated.

      - name: terminationRootFinderSettings # [cpp]
        type: bool, default=nullptr # [cpp]
      - name: termination_root_finder_settings # [py]
        type: bool, default=None # [py]
        description: Settings object to create root finder used to converge on exact final condition.

    returns:
        type: PropagationDependentVariableTerminationSettings
        description: Dependent variable termination settings object.


  # Custom termination
  - name: popagationCustomTerminationSettings # [cpp]
  - name: custom_termination # [py]
    short_summary: "Factory function to create custom termination settings for the propagation."
    extended_summary: |
      Factory function to create custom termination settings for the propagation.
      The propagation is stopped when the condition provided is verified.

    parameters:
      - name: checkStopCondition # [cpp]
        type: std::function<bool(double)> # [cpp]
      - name: custom_condition # [py]
        type: Callable[[float], bool] # [py]
        description: Function of time (independent variable) which is called during the propagation and returns a boolean value denoting whether the termination condition is verified.

    returns:
        type: PropagationCustomTerminationSettings
        description: Custom termination settings object.


  # Hybrid termination
  - name: PropagationHybridTerminationSettings # [cpp]
  - name: hybrid_termination # [py]
    short_summary: "Factory function to create bybrid termination settings for the propagation."
    extended_summary: |
      Factory function to create hybrid termination settings for the propagation. This function can be used
      to define that all conditions or a single condition of the conditions provided must be met to
      stop the propagation.

    parameters:
      - name: terminationSettings # [cpp]
        type: std::vector<PropagationTerminationSettings> # [cpp]
      - name: termination_settings # [py]
        type: list[PropagationTerminationSettings] # [py]
        description: List of single PropagationTerminationSettings objects to be checked during the propagation.

      - name: fulfillSingleCondition # [cpp]
        type: bool, default=false # [cpp]
      - name: fulfill_single_condition # [py]
        type: bool, default=False # [py]
        description: Whether only a single condition of those provided must be met to stop the propagation (true) or all of them simultaneously (false).

    returns:
        type: PropagationHybridTerminationSettings
        description: Hybrid termination settings object.

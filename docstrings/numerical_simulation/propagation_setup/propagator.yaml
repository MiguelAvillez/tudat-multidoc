extended_summary: |
  This module provides the functionality for creating propagator settings.

# The structure of this file follows the order of expose_propagator_setup.cpp (tudatpy) and
# includes content for nBodyStateDerivative.h, bulirschStoerVariableStepsizeIntegrator.h,
# propagationSettings.h, propagationTerminationSettings.h (tudat)


references: |
  .. [1] Vittaldev, V., Mooij, E., & Naeije, M. C. (2012). Unified State Model theory and
         application in Astrodynamics. Celestial Mechanics and Dynamical Astronomy, 112(3), 253-282.
  .. [2] Wakker, K. F. (2015). Fundamentals of astrodynamics.
  .. [3] Hintz, G. R. (2008). Survey of orbit element sets. Journal of guidance, control, and dynamics, 31(3), 785-790.
  .. [4] Vallado, D. A. (2001). Fundamentals of astrodynamics and applications (Vol. 12). Springer Science & Business Media.


enums:

  #       py::enum_<tp::TranslationalPropagatorType>
  #        enum tudat::propagators::TranslationalPropagatorType

  - name: TranslationalPropagatorType
    short_summary: "Enumeration of available translational propagator types."
    #extended_summary: |
      #Enumeration of translational propagator types supported by tudat.
    members:
      - name: undefined_translational_propagator
      - name: cowell
        description: "Propagation of Cartesian elements (state vector size 6), without any transformations"
      - name: encke
        description: "Propagation of the diffence in Cartesian elements of the orbit w.r.t. an unperturbed reference orbit.
          The reference orbit is generated from the initial state/central body, and not updated during the propagation
          (see Wakker, 2015 [2]_)"
      - name: gauss_keplerian
        description: "Propagation of Keplerian elements (state vector size 6), with true anomaly as the 'fast' element  (see Vallado, 2001 [4]_)"
      - name: gauss_modified_equinoctial
        description: "Propagation of Modified equinotial elements (state vector size 6), with the element :math:`I` defining
          the location of the singulariy based on the initial condition (see Hintz, 2008 [3]_)"
      - name: unified_state_model_quaternions
        description: "Propagation of Unified state model using quaternions (state vector size 7, see Vittaldev et al., 2012 [1]_)"
      - name: unified_state_model_modified_rodrigues_parameters
        description: "Propagation of Unified state model using modified Rodrigues parameters (state vector size 7, last element represents shadow parameter, see Vittaldev et al., 2012 [1]_)"
      - name: unified_state_model_exponential_map
        description: "Propagation of Unified state model using exponential map (state vector size 7, last element represents shadow parameter, see Vittaldev et al., 2012 [1]_)"


  - name: RotationalPropagatorType
    short_summary: "Enumeration of available rotational propagator types."
    #extended_summary: |
      #Enumeration of rotational propagator types supported by tudat.
    members:
      - name: undefined_rotational_propagator
      - name: quaternions
        description: "Entries 1-4: The quaternion defining the rotation from inertial to body-fixed frame
          (see `here <https://tudat-space.readthedocs.io/en/latest/_src_user_guide/state_propagation/environment_setup/use_of_reference_frames.html#definition-of-rotational-state>`_)
          Entries 5-7: The body's angular velocity vector, expressed in its body-fixed frame."
      - name: modified_rodrigues_parameters
        description: "Entries 1-4: The modified Rodrigues parameters defining the
          rotation from inertial to body-fixed frame (with entry four the shadow parameter)
          Entries 5-7: The body's angular velocity vector, expressed in its body-fixed frame."
      - name: exponential_map
        description: "Entries 1-4: The exponential map defining the
          rotation from inertial to body-fixed frame (with entry four the shadow parameter)
          Entries 5-7: The body's angular velocity vector, expressed in its body-fixed frame."

  - name: IntegratedStateType # [cpp]
  - name: StateType # [py]
    short_summary: "Enumeration of available integrated state types."
    extended_summary: |
      Enumeration of integrated state types supported by tudat.

    members:

      - name: hybrid  # [cpp]
      - name: translational_state # [cpp]
      - name: rotational_state # [cpp]
      - name: body_mass_state # [cpp]
      - name: custom_state # [cpp]

      - name: hybrid_type # [py]
      - name: translational_type # [py]
      - name: rotational_type # [py]
      - name: body_mass_type # [py]
      - name: custom_type # [py]


  #   enum tudatpy.simulation.propagation_setup.propagator.PropagationTerminationTypes # python only(?)

  - name: PropagationTerminationTypes # [py]
    short_summary: "Enumeration of possible propagation termination types"
    #extended_summary: | # [py]
      #Enumeration of rotational propagator types supported by tudat. # [py]

    members:
      - name: time_stopping_condition # [py]
      - name: cpu_time_stopping_condition # [py]
      - name: dependent_variable_stopping_condition # [py]
      - name: hybrid_stopping_condition # [py]
      - name: custom_stopping_condition # [py]

  ######


classes:

  # base: dependent variables
  - name: DependentVariableSaveSettings
    short_summary: "Functional class to define settings for dependent variable to save."
    extended_summary: |
      Class to define settings for dependent variable to save.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user because this is a base class.


  # base: propagator
  - name: PropagatorSettings
    short_summary: "Functional base class to define settings for propagators."
    extended_summary: |
      Base class to define settings for propagators. Derived classes are split into settings for single- and multi-arc dynamics.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user because this is a base class.

      - name: resetInitialStates # [cpp]
      - name: reset_initial_states # [py]
        short_summary: "Function to reset the initial state used as input for numerical integration."
        extended_summary: |
          Function to reset the initial state used as input for numerical integration.
        parameters:
        - name: initialBodyStates # [cpp]
          type: Eigen::Matrix # [cpp]
        - name: initial_states # [py]
          type: numpy.ndarray # [py]
          description: Initial states to be reset for the numerical propagation.


  # derived: propagator (1)
  - name: MultiArcPropagatorSettings
    short_summary: "`PropagatorSettings`-derived class to define settings for multi-arc dynamics."
    extended_summary: |
       `PropagatorSettings`-derived class to define settings for multi-arc dynamics.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.


  # derived: propagator (2)
  - name: HybridArcPropagatorSettings
    short_summary: "`PropagatorSettings`-derived class to define settings for hybrid-arc dynamics."
    extended_summary: |
       `PropagatorSettings`-derived class to define settings for hybrid-arc dynamics.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.


  # derived: propagator (3)
  - name: SingleArcPropagatorSettings
    short_summary: "`PropagatorSettings`-derived class to define settings for single-arc dynamics."
    extended_summary: |
       `PropagatorSettings`-derived class to define settings for single-arc dynamics.

    attributes:
    - name: terminationSettings_ # [cpp]
      type: PropagationTerminationSettings # [cpp]
    - name: termination_settings # [py]
      type: PropagationTerminationSettings # [py]
      description: Settings for creating the object that checks whether the propagation is finished.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.

  # derived, level 2: translational propagator
  - name: TranslationalStatePropagatorSettings
    short_summary: "`SingleArcPropagatorSettings`-derived class to define settings for single-arc translational dynamics."
    extended_summary: |
       `SingleArcPropagatorSettings`-derived class to define settings for single-arc translational dynamics.

    attributes:
    - name: accelerationSettingsMap_ # [cpp] readonly
      type: SelectedAccelerationMap # [cpp] readonly
    - name: acceleration_settings # [py] readonly
      type: SelectedAccelerationMap # [py] readonly
      description: Settings for retrieving the accelerations acting on the body during propagation.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.

      - name: resetInitialStates # [cpp]
      - name: reset_initial_states # [py]
        short_summary: "Function to reset the initial state used as input for numerical integration."
        extended_summary: |
          Function to reset the initial state used as input for numerical integration.
        parameters:
        - name: initialBodyStates # [cpp]
          type: Eigen::Matrix # [cpp]
        - name: initial_states # [py]
          type: numpy.ndarray # [py]
          description: Initial states to be reset for the numerical propagation.

      - name: resetIntegratedStateModels # [cpp]
      - name: recreate_state_derivative_models # [py]
        short_summary: "Function to (re)create the integrated state models (e.g. acceleration/torque/mass models)."
        extended_summary: |
          Function to create the integrated state models (e.g. acceleration/torque/mass models) for
          each fo the propagators state types contained in `propagatorSettingsMap_`.
        parameters:
        - name: bodies # [cpp]
          type: SystemOfBodies # [cpp]
        - name: bodies # [py]
          type: SystemOfBodies # [py]
          description: System of bodies used in the propagation.

      - name: getSingleTypePropagatorSettings # [cpp]
      - name: single_type_settings # [py]
        short_summary: "Function to retrieve a single type of propagator."
        extended_summary: |
          Function to retrieve a single type of propagator (translational, rotational or mass). This function is
          often used in multi-type propagation.
        parameters:
        - name: stateType # [cpp]
          type: IntegratedStateType # [cpp]
        - name: state_type # [py]
          type: IntegratedStateType # [py]
          description: State type to be retrieved.


  # derived, level 2: rotational state propagator
  - name: RotationalStatePropagatorSettings
    short_summary: "`SingleArcPropagatorSettings`-derived class to define settings for single-arc rotational state propagation."
    extended_summary: |
       `SingleArcPropagatorSettings`-derived class to define settings for single-arc rotational state propagation.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.


  # derived, level 2: multitype propagator
  - name: MultiTypePropagatorSettings
    short_summary: "`SingleArcPropagatorSettings`-derived class to define settings for propagation of multiple quantities."
    extended_summary: |
       `SingleArcPropagatorSettings`-derived class to define settings for propagation of multiple quantities.

    properties:
    - name: propagator_settings_per_type # [py]
      type: dict[IntegratedStateType, list[SingleArcPropagatorSettings]] # [py]

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.

      - name: resetInitialStates # [cpp]
      - name: reset_initial_states # [py]
        short_summary: "Function to reset the initial states used as input for numerical integration."
        extended_summary: |
          Function to reset the initial states used as input for numerical integration.
        parameters:
        - name: initialBodyStates # [cpp]
          type: Eigen::Matrix # [cpp]
        - name: initial_states # [py]
          type: numpy.ndarray # [py]
          description: Initial states to be reset for the numerical propagation.

      - name: resetIntegratedStateModels # [cpp]
      - name: recreate_state_derivative_models # [py]
        short_summary: "Function to (re)create the integrated state models (e.g. acceleration/torque/mass models)."
        extended_summary: |
          Function to create the integrated state models (e.g. acceleration/torque/mass models) for
          each of the propagators state types contained in `propagatorSettingsMap_`.
        parameters:
        - name: bodies # [cpp]
          type: SystemOfBodies # [cpp]
        - name: bodies # [py]
          type: SystemOfBodies # [py]
          description: System of bodies used in the propagation.

      - name: getSingleTypePropagatorSettings # [cpp]
      - name: single_type_settings # [py]
        short_summary: "Function to retrieve a single type of propagator."
        extended_summary: |
          Function to retrieve a single type of propagator (translational, rotational or mass). This function is
          often used in multi-type propagation.
        parameters:
        - name: stateType # [cpp]
          type: IntegratedStateType # [cpp]
        - name: state_type # [py]
          type: IntegratedStateType # [py]
          description: State type to be retrieved.

      - name: getPropagatorSettingsMap # [cpp]
        short_summary: "Function to retrieve the propagator settings map." # [cpp]
        extended_summary: "Function to retrieve the propagator settings map." # [cpp]


  # base: termination settings
  - name: PropagationTerminationSettings
    short_summary: "Functional base class to define termination settings for the propagation."
    extended_summary: |
       Functional base classclass to define termination settings for the propagation.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user because this is a base class.


  # derived (1): dependent variable termination settings
  - name: PropagationDependentVariableTerminationSettings
    short_summary: "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from dependent variables."
    extended_summary: |
       `PropagationTerminationSettings`-derived class to define termination settings for the propagation from dependent variables.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.


  # derived (2): time termination settings
  - name: PropagationTimeTerminationSettings
    short_summary: "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from propagation time."
    extended_summary: |
       `PropagationTerminationSettings`-derived class to define termination settings for the propagation from propagation time.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.


  # derived (3): CPU time termination settings
  - name: PropagationCPUTimeTerminationSettings
    short_summary: "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from CPU time."
    extended_summary: |
       `PropagationTerminationSettings`-derived class to define termination settings for the propagation from CPU time.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.


  # derived (4): custom termination settings
  - name: PropagationCustomTerminationSettings
    short_summary: "`PropagationTerminationSettings`-derived class to define custom termination settings for the propagation."
    extended_summary: |
       `PropagationTerminationSettings`-derived class to define custom termination settings for the propagation.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.


  # derived (5): hybrid termination settings
  - name: PropagationHybridTerminationSettings
    short_summary: "`PropagationTerminationSettings`-derived class to define hybrid termination settings for the propagation."
    extended_summary: |
       `PropagationTerminationSettings`-derived class to define hybrid termination settings for the propagation.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user. Settings objects for integrators should be
          instantiated through the factory functions of a derived class.



functions:

  # Translational propagator
  - name: translationalStatePropagatorSettings # [cpp]
  - name: translational # [py]
    short_summary: "Factory function to create translational state propagator settings with stopping condition at given final time."
    extended_summary: |
      Factory function to create translational state propagator settings for N bodies.
      The propagated state vector is defined by the combination of integrated bodies, and their central body, the combination
      of which define the relative translational states for which a differential equation is to be solved. The propagator
      input defines the formulation in which the differential equations are set up
      The dynamical models are defined by an ``AccelerationMap``, as created by :func:`~create_acceleration_models` function.


    parameters:
      - name: centralBodies # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: central_bodies # [py]
        type: list[str] # [py]
        description: List of central bodies with respect to which the bodies to be integrated are propagated.

      - name: accelerationsMap # [cpp]
        type: AccelerationMap # [cpp]
      - name: acceleration_models # [py]
        type: AccelerationMap # [py]
        description: Set of accelerations acting on the bodies to propagate, provided as acceleration models.

      - name: bodiesToIntegrate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_to_integrate # [py]
        type: list[str] # [py]
        description: List of bodies to be numerically propagated, whose order reflects the order of the central bodies.

      - name: initialBodyStates # [cpp]
        type: Eigen::Matrix # [cpp]
      - name: initial_states # [py]
        type: numpy.ndarray # [py]
        description: |
          Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the
           bodies to integrate. The initial states must be expressed in Cartesian elements with the same frame
           orientation as the environment (specified when creating a body system from default body settings, see
           :func:~`tudatpy.numerical_simulation.environment_setup.get_default_body_settings`).

      - name: terminationSettings # [cpp]
        type: PropagationTerminationSettings # [cpp]
      - name: termination_settings # [py]
        type: PropagationTerminationSettings # [py]
        description: Generic termination settings object to check whether the propagation should be ended.

      - name: propagator # [cpp]
        type: TranslationalPropagatorType, default=cowell # [cpp]
      - name: propagator # [py]
        type: TranslationalPropagatorType, default=cowell # [py]
        description: Type of translational propagator to be used (see `TranslationalPropagatorType` enum).

      - name: dependentVariablesToSave # [cpp]
        type: std::vector<SingleDependentVariableSaveSettings>, default=std::vector() # [cpp]
      - name: output_variables # [py]
        type: list[SingleDependentVariableSaveSettings], default=[] # [py]
        description: List of dependent variables to be saved (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: TranslationalStatePropagatorSettings
        description: Translational state propagator settings object.




  # Rotational propagator (overload 1)
  - name: RotationalStatePropagatorSettings # [cpp]
  - name: rotational # [py]
    short_summary: "Factory function to create rotational state propagator settings."
    extended_summary: |
      Factory function to create rotational state propagator settings for N bodies.
      The propagated state vector is defined by the integrated bodies, which defines the bodies for which the
      differential equation defining the evolution of the rotational state between an
      inertial and body-fixed frame are to be solved. The propagator input defines the
      formulation in which the differential equations are set up. The dynamical models are
      defined by an ``TorqueModelMap``, as created by ``create_torque_models`` function.

    parameters:
      - name: torqueModelMap # [cpp]
        type: TorqueModelMap # [cpp]
      - name: torque_models # [py]
        type: TorqueModelMap # [py]
        description: Set of torques acting on the bodies to propagate, provided as torque models.

      - name: bodiesToIntegrate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_to_integrate # [py]
        type: list[str] # [py]
        description: List of bodies to be numerically propagated, whose order reflects the order of the central bodies.

      - name: initialBodyStates # [cpp]
        type: Eigen::Matrix # [cpp]
      - name: initial_states # [py]
        type: numpy.ndarray # [py]
        description: Initial states of the bodies to integrate (one initial state for each body), provided in the same order as the bodies to integrate.

      - name: terminationSettings # [cpp]
        type: PropagationTerminationSettings # [cpp]
      - name: termination_settings # [py]
        type: PropagationTerminationSettings # [py]
        description: Generic termination settings object to check whether the propagation should be ended.

      - name: propagator # [cpp]
        type: RotationalPropagatorType, default=quaternions # [cpp]
      - name: propagator # [py]
        type: RotationalPropagatorType, default=quaternions # [py]
        description: Type of rotational propagator to be used (see `RotationalPropagatorType` enum).

      - name: dependentVariablesToSave # [cpp]
        type: std::vector<SingleDependentVariableSaveSettings>, default=std::vector() # [cpp]
      - name: output_variables # [py]
        type: list[SingleDependentVariableSaveSettings], default=[] # [py]
        description: List of dependent variables to be saved (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: RotationalStatePropagatorSettings
        description: Rotational state propagator settings object.


  # Mass propagator (overload 5)
  - name: massPropagatorSettings # [cpp]
  - name: mass # [py]
    short_summary: "Factory function to create mass propagator settings"
    extended_summary: |
      Factory function to create mass propagator settings 
      It works by providing a key-value mass rate container, containing the list of mass rate settings objects associated to
      each body. In this function, the dependent variables to save are provided
      as a list of SingleDependentVariableSaveSettings objects. In this function, the termination conditions are set
      through the termination settings object provided.

    parameters:
      - name: bodiesWithMassToPropagate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_with_mass_to_propagate # [py]
        type: list[str] # [py]
        description: List of bodies whose mass should be numerically propagated.

      - name: massRateSettings # [cpp]
        type: SelectedMassRateModelMap # [cpp]
      - name: mass_rate_settings # [py]
        type: SelectedMassRateModelMap # [py]
        description: Mass rates associated to each body, provided as a mass rate settings object.

      - name: initialBodyMasses # [cpp]
        type: Eigen::Matrix # [cpp]
      - name: initial_body_masses # [py]
        type: numpy.ndarray # [py]
        description: Initial masses of the bodies to integrate (one initial mass for each body), provided in the same order as the bodies to integrate.

      - name: terminationSettings # [cpp]
        type: PropagationTerminationSettings # [cpp]
      - name: termination_settings # [py]
        type: PropagationTerminationSettings # [py]
        description: Generic termination settings object to check whether the propagation should be ended.

      - name: dependentVariablesToSave # [cpp]
        type: std::vector<SingleDependentVariableSaveSettings>, default=std::vector() # [cpp]
      - name: output_variables # [py]
        type: list[SingleDependentVariableSaveSettings], default=[] # [py]
        description: List of dependent variables to be saved (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: MassPropagatorSettings
        description: Mass propagator settings object.


  # Multitype propagator (overload 2)
  - name: multiTypePropagatorSettings # [cpp]
  - name: multitype # [py]
    short_summary: "Factory function to create multitype propagator settings."
    extended_summary: |
      Factory function to create multitype propagator settings.
      It works by providing a list of SingleArcPropagatorSettings objects. When using this function,
      only the termination and output settings provided here are used, any such settings in the
      constituent propagator settings are ignored

    parameters:
      - name: propagatorSettingsVector # [cpp]
        type: std::vector<SingleArcPropagatorSettings> # [cpp]
      - name: propagator_settings_list # [py]
        type: list[SingleArcPropagatorSettings] # [py]
        description: List of SingleArcPropagatorSettings objects to use.

      - name: terminationSettings # [cpp]
        type: PropagationTerminationSettings # [cpp]
      - name: termination_settings # [py]
        type: PropagationTerminationSettings # [py]
        description: Generic termination settings object to check whether the propagation should be ended.

      - name: dependentVariablesToSave # [cpp]
        type: std::vector<SingleDependentVariableSaveSettings>, default=std::vector() # [cpp]
      - name: output_variables # [py]
        type: list[SingleDependentVariableSaveSettings], default=[] # [py]
        description: List of dependent variables to be saved (by default, no dependent variables are saved).

      - name: printInterval # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
      - name: print_interval # [py]
        type: float, default=TUDAT_NAN # [py]
        description: Variable indicating how often (in seconds or in the unit of the independent variable) the current state and time are to be printed to the console (by default, they are never printed).

    returns:
        type: MassPropagatorSettings
        description: Mass propagator settings object.


  # Multiarc propagator
  - name: multiArcPropagatorSettings # [cpp]
  - name: multi_arc # [py]
    short_summary: "Factory function to create multi-arc propagator settings."
    extended_summary: |
      Factory function to create multi-arc propagator settings. It works by providing separate settings for
      each arc in a list.

    parameters:
      - name: singleArcSettings # [cpp]
        type: std::vector<SingleArcPropagatorSettings> # [cpp]
      - name: single_arc_settings # [py]
        type: list[SingleArcPropagatorSettings] # [py]
        description: List of SingleArcPropagatorSettings objects to use, one for each arc.

      - name: transferInitialStateInformationPerArc # [cpp]
        type: bool, default=false # [cpp]
      - name: transfer_state_to_next_arc # [py]
        type: bool, default=False # [py]
        description: It denotes whether whether the initial state of arc N+1 is to be taken from arc N (for N>0).

    returns:
        type: MultiArcPropagatorSettings
        description: Multi-arc propagator settings object.

  # Hybrid arc propagator
  - name: hybridArcPropagatorSettings # [cpp]
  - name: hybrid_arc # [py]
    short_summary: "Factory function to create hybrid-arc propagator settings."
    extended_summary: |
      Factory function to create hybrid-arc propagator settings (i.e., a combination of single- and multi-arc dynamics).

    parameters:
      - name: singleArcSettings # [cpp]
        type: SingleArcPropagatorSettings # [cpp]
      - name: single_arc_settings # [py]
        type: SingleArcPropagatorSettings # [py]
        description: SingleArcPropagatorSettings object to use for the propagation.

      - name: multiArcPropagatorSettings # [cpp]
        type: MultiArcPropagatorSettings# [cpp]
      - name: multi_arc_settings # [py]
        type: MultiArcPropagatorSettings # [py]
        description: MultiArcPropagatorSettings object to use for the propagation.

    returns:
        type: HybridArcPropagatorSettings
        description: Hybrid-arc propagator settings object.


  # Time termination
  - name: propagationTimeTerminationSettings # [cpp]
  - name: time_termination # [py]
    short_summary: "Factory function to create time termination settings for the propagation."
    extended_summary: |
      Factory function to create time termination settings for the propagation.
      The propagation is stopped when the final time provided is reached.

    parameters:
      - name: terminationTime # [cpp]
        type: double # [cpp]
      - name: termination_time # [py]
        type: float # [py]
        description: Final time of the propagation.

      - name: checkTerminationToExactCondition # [cpp]
        type: bool, default=false # [cpp]
      - name: terminate_exactly_on_final_condition # [py]
        type: bool, default=False # [py]
        description: Denotes whether the propagation is to terminate exactly on the final condition, or whether it is to terminate on the first step where it is violated.

    returns:
        type: PropagationTimeTerminationSettings
        description: Time termination settings object.


  # CPU time termination
  - name: propagationCPUTimeTerminationSettings # [cpp]
  - name: cpu_time_termination # [py]
    short_summary: "Factory function to create CPU time termination settings for the propagation."
    extended_summary: |
      Factory function to create CPU time termination settings for the propagation.
      The propagation is stopped when the final CPU time provided is reached.

    parameters:
      - name: cpuTerminationTime # [cpp]
        type: double # [cpp]
      - name: cpu_termination_time # [py]
        type: float # [py]
        description: Maximum CPU time for the propagation.

    returns:
        type: PropagationCPUTimeTerminationSettings
        description: CPU time termination settings object.


  # Dependent variable termination
  - name: propagationDependentVariableTerminationSettings # [cpp]
  - name: dependent_variable_termination # [py]
    short_summary: "Factory function to create CPU time termination settings for the propagation."
    extended_summary: |
      Factory function to create CPU time termination settings for the propagation.
      The propagation is stopped when the final CPU time provided is reached.

    parameters:
      - name: dependentVariableSettings # [cpp]
        type: SingleDependentVariableSaveSettings # [cpp]
      - name: dependent_variable_settings # [py]
        type: SingleDependentVariableSaveSettings # [py]
        description: Dependent variable object to be used as termination setting.

      - name: limitValue # [cpp]
        type: double # [cpp]
      - name: limit_value # [py]
        type: float # [py]
        description: Limit value of the dependent variable; if reached, the propagation is stopped.

      - name: useAsLowerLimit # [cpp]
        type: bool, default=false # [cpp]
      - name: use_as_lower_limit # [py]
        type: bool, default=False # [py]
        description: Denotes whether the limit value should be used as lower or upper limit.

      - name: checkTerminationToExactCondition # [cpp]
        type: bool, default=false # [cpp]
      - name: terminate_exactly_on_final_condition # [py]
        type: bool, default=False # [py]
        description: Denotes whether the propagation is to terminate exactly on the final condition, or whether it is to terminate on the first step where it is violated.

      - name: terminationRootFinderSettings # [cpp]
        type: bool, default=nullptr # [cpp]
      - name: termination_root_finder_settings # [py]
        type: bool, default=None # [py]
        description: Settings object to create root finder used to converge on exact final condition.

    returns:
        type: PropagationDependentVariableTerminationSettings
        description: Dependent variable termination settings object.


  # Custom termination
  - name: popagationCustomTerminationSettings # [cpp]
  - name: custom_termination # [py]
    short_summary: "Factory function to create custom termination settings for the propagation."
    extended_summary: |
      Factory function to create custom termination settings for the propagation.
      The propagation is stopped when the condition provided is verified.

    parameters:
      - name: checkStopCondition # [cpp]
        type: std::function<bool(double)> # [cpp]
      - name: custom_condition # [py]
        type: callable[[float], bool] # [py]
        description: Function of time (independent variable) which is called during the propagation and returns a boolean value denoting whether the termination condition is verified.

    returns:
        type: PropagationCustomTerminationSettings
        description: Custom termination settings object.


  # Hybrid termination
  - name: PropagationHybridTerminationSettings # [cpp]
  - name: hybrid_termination # [py]
    short_summary: "Factory function to create bybrid termination settings for the propagation."
    extended_summary: |
      Factory function to create hybrid termination settings for the propagation. This function can be used
      to define that all conditions or a single condition of the conditions provided must be met to
      stop the propagation.

    parameters:
      - name: terminationSettings # [cpp]
        type: std::vector<PropagationTerminationSettings> # [cpp]
      - name: termination_settings # [py]
        type: list[PropagationTerminationSettings] # [py]
        description: List of single PropagationTerminationSettings objects to be checked during the propagation.

      - name: fulfillSingleCondition # [cpp]
        type: bool, default=false # [cpp]
      - name: fulfill_single_condition # [py]
        type: bool, default=False # [py]
        description: Whether only a single condition of those provided must be met to stop the propagation (true) or all of them simultaneously (false).

    returns:
        type: PropagationHybridTerminationSettings
        description: Hybrid termination settings object.

summary : "Definition of propagation settings."

extended_summary: |
  This module contains submodules to define propagation settings. It also contains a set of factory functions to create
  dynamical models for translational state, rotational state, and mass rate.




###### enums

# no enums

######


modules:
  - acceleration
  - dependent_variable
  - integrator
  - mass_rate
  - propagator
  - torque
  - thrust

functions:


  - name: createAccelerationModelsMap # [cpp]
  - name: create_acceleration_models # [py]
    short_summary: "Function to create a set of acceleration models from a dictionary of bodies linked to acceleration model types."

    extended_summary: |
      Function to create a set of acceleration models from a map of bodies and acceleration model types. The propagated
      bodies and central bodies are provided as two separate lists with the same order.

    parameters:
      - name: bodies # [cpp]
        type: SystemOfBodies # [cpp]
      - name: body_system # [py]
        type: SystemOfBodies # [py]
        description: System of bodies to be used in the propagation.

      - name: selectedAccelerationPerBody # [cpp]
        type: SelectedAccelerationMap # [cpp]
      - name: selected_acceleration_per_body # [py]
        type: Dict[str, Dict[str, List[AccelerationSettings]]] # [py]
        description: Key-value container, with key denoting the body undergoing the acceleration, and the value containing an
                     additional key-value container, with the body exerting acceleration, and list of acceleration settings
                     exerted by this body.

      - name: propagatedBodies # [cpp]
        type: std::vector # [cpp]
      - name: bodies_to_propagate # [py]
        type: list # [py]
        description: List of bodies to propagate.

      - name: centralBodies # [cpp]
        type: std::vector # [cpp]
      - name: central_bodies # [py]
        type: list # [py]
        description: List of central bodies, each referred to each propagated body in the same order.

    returns:
        type: AccelerationMap # [cpp]
        type: AccelerationMap # [py]
        description: Set of accelerations acting on the bodies to propagate, provided as dual key-value container, similar
                     to the acceleration settings input, but now with ``AccelerationModel`` lists as inner value

    examples: |
      In this example, the acceleration model includes a spherical harmonic (degree and order 5) gravitational acceleration
      and aerodynamic acceleration exerted by the Earth, as well as point-mass gravity exerted by the Sun and the Moon.
      The variable ``accelerations_settings_vehicle`` denotes the list of bodies exerting accelerations and the types of
      accelerations, while the variable ``acceleration_settings`` associates this list with the body undergoing the
      acceleration (``"Vehicle"``).

      .. code-block:: python # [py]
         # [py]
         # Define bodies that are propagated. # [py]
         bodies_to_propagate = ["Vehicle"] # [py]
         # [py]
         # Define central bodies. # [py]
         central_bodies = ["Earth"] # [py]
         # [py]
         # Define accelerations acting on Vehicle # [py]
         accelerations_settings_vehicle = dict( # [py]
             Sun=[propagation_setup.acceleration.point_mass_gravity()], # [py]
             Moon=[propagation_setup.acceleration.point_mass_gravity()], # [py]
             Earth=[propagation_setup.acceleration.spherical_harmonic_gravity(5, 5), # [py]
                    propagation_setup.acceleration.aerodynamic()] # [py]
         ) # [py]
         # [py]
         # Create global accelerations settings dictionary # [py]
         acceleration_settings = {"Vehicle": accelerations_settings_vehicle} # [py]
         # [py]
         # Create acceleration models # [py]
         acceleration_models = propagation_setup.create_acceleration_models( # [py]
             bodies, acceleration_settings,  bodies_to_propagate, central_bodies) # [py]


  - name: createTorqueModelsMap # [cpp]
  - name: create_torque_models # [py]
    short_summary: "Function to create a set of acceleration models from a dictionary of bodies linked to acceleration model types."

    extended_summary: |
      Function to create a set of acceleration models from a map of bodies and acceleration model types. The propagated
      bodies is provided as a list.

    parameters:
      - name: bodies # [cpp]
        type: SystemOfBodies # [cpp]
      - name: body_system # [py]
        type: SystemOfBodies # [py]
        description: System of bodies to be used in the propagation.

      - name: selectedTorquePerBody # [cpp]
        type: SelectedTorqueMap # [cpp]
      - name: selected_torque_per_body # [py]
        type: Dict[str, Dict[str, List[TorqueSettings]]] # [py]
        description: Key-value container, with key denoting the body undergoing the torque, and the value containing an
                   additional key-value container, with the body exerting torque, and list of torque settings
                   exerted by this body.

      - name: propagatedBodies # [cpp]
        type: std::vector # [cpp]
      - name: bodies_to_propagate # [py]
        type: list # [py]
        description: List of bodies to propagate.

    returns:
        type: TorqueModelMap # [cpp]
        type: TorqueModelMap # [py]
        description: Set of torques acting on the bodies to propagate, provided as dual key-value container, similar
                     to the torque settings input, but now with ``TorqueModel`` lists as inner value

    examples: |

      In this example, the following torques are exerted on the vehicle: spherical-harmonic gravitational torque
      (up to order 4 and degree 4) and aerodynamic torque exerted by the Earth, second-degree gravitational torque
      exerted by the Sun and the Moon.
      The variable ``torques_settings_vehicle`` denotes the list of bodies exerting torques and the types of
      torques, while the variable ``torque_settings`` associates this list with the body undergoing the
      torque.

      .. code-block:: python # [py]
        # [py]
        # Define bodies that are propagated # [py]
        bodies_to_propagate = ["Vehicle"] # [py]
        # [py]
        # Define torques per each exerting body # [py]
        torque_settings_vehicle = dict( # [py]
            Sun=[propagation_setup.torque.second_degree_gravitational()], # [py]
            Moon=[propagation_setup.torque.second_degree_gravitational()], # [py]
            Earth=[propagation_setup.torque.spherical_harmonic_gravitational(4, 4), # [py]
                   propagation_setup.torque.aerodynamic()] # [py]
        ) # [py]
        # [py]
        # Create global torque settings dictionary # [py]
        torque_settings = {"Vehicle": torque_settings_vehicle} # [py]
        # [py]
        # Create torque models # [py]
        torque_models = propagation_setup.create_torque_models( # [py]
            bodies, torque_settings,  bodies_to_propagate ) # [py]


  - name: createMassRateModelsMap # [cpp]
  - name: create_mass_rate_models # [py]
    short_summary: "Function to create a set of mass-rate models from associated settings."

    extended_summary: |
      Function to create a set of mass-rate models from a map of bodies and mass-rate model types.
      If the mass-rate depends on any acceleration models (e.g. thrust), the acceleration
      models must be provided as an input.

    parameters:
      - name: bodies # [cpp]
        type: SystemOfBodies # [cpp]
      - name: body_system # [py]
        type: SystemOfBodies # [py]
        description: System of bodies to be used in the propagation.

      - name: massRateModelSettings # [cpp]
        type: SelectedMassRateModelMap # [cpp]
      - name: selected_mass_rates_per_body # [py]
        type: Dict[str, List[MassRateModelSettings]] # [py]
        description: Key-value container, with key denoting the body with changing mass, and the value containing a
                     list of mass rate settings (in most cases, this list will have only a single entry)

      - name: accelerationModels # [cpp]
        type: AccelerationMap # [cpp]
      - name: acceleration_models # [py]
        type: AccelerationMap # [py]
        description: Sorted list of acceleration models, as created by :func:`create_acceleration_models`

    returns:
        type: MassRateModelMap # [cpp]
        type: MassRateModelMap # [py]
        description: Set of mass-rate models, as key-value container, same as the settings input, with the difference that
          the rate settings objects have been processed into the associated objects calculating the actual mass-rate changes.

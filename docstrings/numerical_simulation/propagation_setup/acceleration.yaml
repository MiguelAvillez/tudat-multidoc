extended_summary: |
  This module provides the functionality for creating acceleration
  settings.

# the structure of this file follows the order of expose_acceleration_setup.cpp (tudatpy) and
# includes tudat content for:
# - accelerationModelTypes.h
# - accelerationSettings.h

enums:
  - name: AvailableAcceleration
    short_summary: "Enumeration of available acceleration types."
    extended_summary: |
      Enumeration of acceleration types supported by tudat.
    members:
      - name: undefined_acceleration # [cpp]
      - name: point_mass_gravity # [cpp]
      - name: central_gravity # [cpp]
      - name: aerodynamic # [cpp]
      - name: cannon_ball_radiation_pressure # [cpp]
      - name: spherical_harmonic_gravity # [cpp]
      - name: mutual_spherical_harmonic_gravity # [cpp]
      - name: third_body_point_mass_gravity # [cpp]
      - name: third_body_central_gravity # [cpp]
      - name: third_body_spherical_harmonic_gravity # [cpp]
      - name: third_body_mutual_spherical_harmonic_gravity # [cpp]
      - name: thrust_acceleration # [cpp]
      - name: relativistic_correction_acceleration # [cpp]
      - name: empirical_acceleration # [cpp]
      - name: direct_tidal_dissipation_in_central_body_acceleration # [cpp]
      - name: direct_tidal_dissipation_in_orbiting_body_acceleration # [cpp]
      - name: panelled_radiation_pressure_acceleration # [cpp]
      - name: momentum_wheel_desaturation_acceleration # [cpp]
      - name: solar_sail_acceleration # [cpp]
      - name: custom_acceleration # [cpp]

      - name: undefined_acceleration_type # [py]
      - name: point_mass_gravity_type # [py]
      - name: central_gravity_type # [py]
      - name: aerodynamic_type # [py]
      - name: cannon_ball_radiation_pressure_type # [py]
      - name: spherical_harmonic_gravity_type # [py]
      - name: mutual_spherical_harmonic_gravity_type # [py]
      - name: third_body_point_mass_gravity_type # [py]
      - name: third_body_central_gravity_type # [py]
      - name: third_body_spherical_harmonic_gravity_type # [py]
      - name: third_body_mutual_spherical_harmonic_gravity_type # [py]
      - name: thrust_acceleration_type # [py]
      - name: relativistic_correction_acceleration_type # [py]
      - name: empirical_acceleration_type # [py]
      - name: direct_tidal_dissipation_in_central_body_acceleration_type # [py]
      - name: direct_tidal_dissipation_in_orbiting_body_acceleration_type # [py]
      - name: panelled_radiation_pressure_acceleration_type # [py]
      - name: momentum_wheel_desaturation_acceleration_type # [py]
      - name: solar_sail_acceleration_type # [py]
      - name: custom_acceleration_type # [py]

classes:

###### enums from all included headers

  #    py::enum_<tba::AvailableAcceleration>
  #        enum tudat::basic_astrodynamics::AvailableAcceleration


  ######


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ################## Acceleration settings ( accelerationSettings.h ) #################################################
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  # base
  - name: AccelerationSettings
    short_summary: "Functional base class to define settings for accelerations."
    extendend_summary: |
      Class for providing settings for acceleration model. This class is a functional (base) class for
      settings of acceleration models that  require no information in addition to their type.
      Classes defining settings for acceleration models requiring additional information must be derived from this class.
      Bodies exerting and undergong acceleration are set externally from this class.
      This class can be used for the easy setup of acceleration models
      (see createAccelerationModels.h), but users may also chose to do so manually.
      (Derived) Class members are all public, for ease of access and modification.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user because this is a base class." # [cpp]


  # derived (1)
  - name: SphericalHarmonicAccelerationSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for the spherical harmonic acceleration."
    extendend_summary: |
      Class for providing settings for spherical harmonics acceleration model,
      including the maximum degree and order up to which the field is to be expanded. Note that
      the minimum degree and order are currently always set to zero.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (2)
  - name: MutualSphericalHarmonicAccelerationSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for the mutual spherical harmonic acceleration."
    extendend_summary: |
      Class for providing settings for the mutual spherical harmonics acceleration model,
      including the maximum degree and order up to which the fields of the bodies are to be expanded. Note that
      the minimum degree and order are currently always set to zero.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (3)
  - name: RelativisticAccelerationCorrectionSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for the relativistic acceleration correction."
    extendend_summary: |
      Class to provide settings for typical relativistic corrections to the dynamics of an orbiter: the
      Schwarzschild, Lense-Thirring and de Sitter terms (see 'General relativity and Space Geodesy' by L. Combrinck,
      2012).

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (4)
  - name: EmpiricalAccelerationSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for the empirical acceleration."
    extendend_summary: |
      Class to provide settings for empirical accelerations. These are expressed in the
      RSW frame, for which the mangitude is determined empirically (typically during an orbit determination process).
      The acceleration components are defined according to Montenbruck and Gill (2000), with a total of 9 components:
      a constant, sine and cosine term (with true anomaly as argument) for each of the three independent directions of
      the RSW frame.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (5)
  - name: CustomAccelerationSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for custom acceleration."
    extendend_summary: |
      Class to provide settings for custom accelerations. This is done by means of a function and, if necessary,
      an associated scaling function.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (6)
  - name: DirectTidalDissipationAccelerationSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for direct tidal dissipation acceleration."
    extendend_summary: |
      Class to provide settings for direct tidal dissipation accelerations. Creates settings for tidal accelerations.
      The direct of tidal effects in a satellite system is applied directly as an acceleration
      (as opposed to a modification of spherical harmonic coefficients).

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (7)
  - name: ThrustAccelerationSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for direct tidal dissipation acceleration."
    extendend_summary: |
      Class to provide settings for thrust acceleration. Settings for the direction and magnitude of the thrust
      are included.

    attributes:
      - name: thrustDirectionSettings_ # [cpp]
        type: ThrustDirectionSettings # [cpp]
      - name: direction_settings # [py]
        type: ThrustDirectionSettings # [py]
        description: Thrust direction settings object.

      - name: thrustMagnitudeSettings_ # [cpp]
        type: ThrustMagnitudeSettings # [cpp]
      - name: magnitude_settings # [py]
        type: ThrustMagnitudeSettings # [py]
        description: Thrust magnitude settings object.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (8)
  - name: MomentumWheelDesaturationAccelerationSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for momentum wheel desaturation acceleration."
    extendend_summary: |
      Class to provide settings for momentum wheel desaturation acceleration. Settings for the direction and magnitude
      of the thrust are included.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  
functions:

  # factory functions

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ################## Acceleration settings ( accelerationSettings.h ) #################################################
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  # Point mass gravity
  - name: pointMassGravityAcceleration # [cpp]
  - name: point_mass_gravity # [py]
    short_summary: "Creates settings for the point-mass gravity acceleration."
    extended_summary: |
      Creates settings for the point-mass gravity acceleration. The body exerting the acceleration needs to have a
      gravity field model defined.

    returns:
        type: AccelerationSettings
        description: Acceleration settings object.


  # Aerodynamic
  - name: aerodynamicAcceleration # [cpp]
  - name: aerodynamic # [py]
    short_summary: "Creates settings for the aerodynamic acceleration."
    extended_summary: |
      Creates settings for the aerodynamic acceleration. The body exerting the acceleration needs to have an
      atmosphere defined.

    returns:
        type: AccelerationSettings
        description: Acceleration settings object.


  # Cannonball radiation pressure
  - name: cannonBallRadiationPressureAcceleration # [cpp]
  - name: cannonball_radiation_pressure # [py]
    short_summary: "Creates settings for the cannonball radiation pressure acceleration."
    extended_summary: |
      Creates settings for the radiation pressure acceleration, for which a cannonball model is used. In this model,
      the effective acceleration is colinear with the vector connecting the source of radiation and the target.
      The body undergoing the acceleration needs to have a radiation pressure model defined, while the body emitting
      radiation needs to have radiative properties defined (the Sun has default ones).

    returns:
        type: AccelerationSettings
        description: Acceleration settings object.


  # Spherical harmonic gravity
  - name: sphericalHarmonicAcceleration # [cpp]
  - name: spherical_harmonic_gravity # [py]
    short_summary: "Creates settings for the spherical harmonic gravity acceleration."
    extended_summary: |
      Creates settings for the spherical harmonic gravity acceleration, accounting for a finite (given) number
      of degree and order. The body exerting the acceleration needs to have a spherical harmonic gravity field model
      defined.

    parameters:
      - name: maximumDegree # [cpp]
        type: int # [cpp]
      - name: maximum_degree # [py]
        type: int # [py]
        description: Maximum degree of the spherical harmonic expansion.

      - name: maximumOrder # [cpp]
        type: int # [cpp]
      - name: maximum_order # [py]
        type: int # [py]
        description: Maximum order of the spherical harmonic expansion.

    returns:
        type: SphericalHarmonicAccelerationSettings
        description: Spherical harmonic acceleration settings object.


  # Mutual spherical harmonic gravity
  - name: mutualSphericalHarmonicAcceleration # [cpp]
  - name: mutual_spherical_harmonic_gravity # [py]
    short_summary: "Creates settings for the mutual spherical harmonic gravity acceleration."
    extended_summary: |
      Creates settings for the mutual spherical harmonic gravity acceleration, accounting for a finite (given) number
      of degree and order for both bodies. Both the body exerting the acceleration and the body undergoing it need to
      have spherical harmonic gravity field models defined. In addition, the body undergoing the acceleration needs to
      have a rotational model defined. For the case where a third-body mutual spherical harmonic acceleration,
      additional parameters have to be provided that denote the expansion degree/order of the central body.

    parameters:
      - name: maximumDegreeOfBodyExertingAcceleration # [cpp]
        type: int # [cpp]
      - name: maximum_degree_body_exerting # [py]
        type: int # [py]
        description: Maximum degree of the spherical harmonic expansion for the body exerting the acceleration.

      - name: maximumOrderOfBodyExertingAcceleration # [cpp]
        type: int # [cpp]
      - name: maximum_order_body_exerting # [py]
        type: int # [py]
        description: Maximum order of the spherical harmonic expansion for the body exerting the acceleration.

      - name: maximumDegreeOfBodyUndergoingAcceleration # [cpp]
        type: int # [cpp]
      - name: maximum_degree_body_undergoing # [py]
        type: int # [py]
        description: Maximum degree of the spherical harmonic expansion for the body undergoing the acceleration.

      - name: maximumOrderOfBodyUndergoingAcceleration # [cpp]
        type: int # [cpp]
      - name: maximum_order_body_undergoing # [py]
        type: int # [py]
        description: Maximum order of the spherical harmonic expansion for the body undergoing the acceleration.

      - name: maximumDegreeOfCentralBody # [cpp]
        type: int, default=0 # [cpp]
      - name: maximum_degree_central_body # [py]
        type: int, default=0 # [py]
        description: Maximum degree of the spherical harmonic expansion for the central body, if needed.

      - name: maximumOrderOfCentralBody # [cpp]
        type: int, default=0 # [cpp]
      - name: maximum_order_central_body # [py]
        type: int, default=0 # [py]
        description: Maximum order of the spherical harmonic expansion for the central body, if needed.

    returns:
        type: MutualSphericalHarmonicAccelerationSettings
        description: Spherical harmonic acceleration settings object.


  # Relativistic correction
  - name: relativisticAccelerationCorrection # [cpp]
  - name: relativistic_correction # [py]
    short_summary: "Creates settings for the relativistic acceleration correction."
    extended_summary: |
      Creates settings for typical relativistic acceleration corrections: the Schwarzschild, Lense-Thirring and de
      Sitter terms (see 'General relativity and Space Geodesy' by L. Combrinck, 2012). It implements the model of
      2010 Conventions (chapter 10, section 3). Here, the ‘primary body’ for a planetary orbiter should always be set
      as the Sun (only relevant for de Sitter correction). The angular momentum vector of the orbited body is only
      relevant for Lense-Thirring correction.

    parameters:
      - name: calculateSchwarzschildCorrection # [cpp]
        type: bool # [cpp]
      - name: use_schwarzschild # [py]
        type: bool # [py]
        description: Maximum degree of the spherical harmonic expansion for the body exerting the acceleration.

      - name: calculateLenseThirringCorrection # [cpp]
        type: bool # [cpp]
      - name: use_lense_thirring # [py]
        type: bool # [py]
        description: Maximum order of the spherical harmonic expansion for the body exerting the acceleration.

      - name: calculateDeSitterCorrection # [cpp]
        type: bool # [cpp]
      - name: use_de_sitter # [py]
        type: bool # [py]
        description: Maximum degree of the spherical harmonic expansion for the body undergoing the acceleration.

      - name: primaryBody # [cpp]
        type: std::string, default="" # [cpp]
      - name: de_sitter_central_body # [py]
        type: str, default="" # [py]
        description: Maximum order of the spherical harmonic expansion for the body undergoing the acceleration.

      - name: centralBodyAngularMomentum # [cpp]
        type: Eigen::Vector3d, default=Eigen::Vector3d::Zero() # [cpp]
      - name: lense_thirring_angular_momentum # [py]
        type: numpy.ndarray, default=numpy.array([0, 0, 0]) # [py]
        description: Maximum degree of the spherical harmonic expansion for the central body, if needed.

    returns:
        type: RelativisticAccelerationCorrectionSettings
        description: Relativistic acceleration correction settings object.


  # Empirical
  - name: empiricalAcceleration # [cpp]
  - name: empirical # [py]
    short_summary: "Creates settings for empirical acceleration."
    extended_summary: |
      Creates settings for empirical accelerations. These are expressed in the
      RSW frame, for which the mangitude is determined empirically (typically during an orbit determination process).
      The acceleration components are defined according to Montenbruck and Gill (2000), with a total of 9 components:
      a constant, sine and cosine term (with true anomaly as argument) for each of the three independent directions of
      the RSW frame.

    parameters:
      - name: constantAcceleration # [cpp]
        type: Eigen::Vector3d, default=Eigen::Vector3d::Zero() # [cpp]
      - name: constant_acceleration # [py]
        type: numpy.ndarray, default=numpy.array([0, 0, 0]) # [py]
        description: Constant term, defined in the RSW frame.

      - name: sineAcceleration # [cpp]
        type: Eigen::Vector3d, default=Eigen::Vector3d::Zero() # [cpp]
      - name: sine_acceleration # [py]
        type: numpy.ndarray, default=numpy.array([0, 0, 0]) # [py]
        description: Sine term (function of the true anomaly), defined in the RSW frame..

      - name: cosineAcceleration # [cpp]
        type: Eigen::Vector3d, default=Eigen::Vector3d::Zero() # [cpp]
      - name: cosine_acceleration # [py]
        type: numpy.ndarray, default=numpy.array([0, 0, 0]) # [py]
        description: Cosine term (function of the true anomaly), defined in the RSW frame..

    returns:
        type: EmpiricalAccelerationSettings
        description: Empirical acceleration settings object.


  # Custom
  - name: customAccelerationSettings # [cpp]
  - name: custom # [py]
    short_summary: "Creates settings for custom acceleration."
    extended_summary: |
      Creates settings for empirical accelerations. These are expressed in the
      RSW frame, for which the mangitude is determined empirically (typically during an orbit determination process).
      The acceleration components are defined according to Montenbruck and Gill (2000), with a total of 9 components:
      a constant, sine and cosine term (with true anomaly as argument) for each of the three independent directions of
      the RSW frame.

    parameters:
      - name: accelerationFunction # [cpp]
        type: std::function<Eigen::Vector3d(const double)> # [cpp]
      - name: acceleration_function # [py]
        type: callable[[float], list] # [py]
        description: Custom acceleration function with time as an independent variable.

      - name: scalingFunction # [cpp]
        type: std::function<double(const double)>, default=nullptr # [cpp]
      - name: scaling_function # [py]
        type: callable[[float], float], default=None # [py]
        description: Scaling function with time as an independent variable to be multiplied by the custom acceleration function.

    returns:
        type: CustomAccelerationSettings
        description: Custom acceleration settings object.


  # Direct tidal dissipation
  - name: directTidalDissipationAcceleration # [cpp]
  - name: direct_tidal_dissipation_acceleration # [py]
    short_summary: "Creates settings for custom acceleration."
    extended_summary: |
      Creates settings for tidal accelerations. The direct of tidal effects in a satellite system is applied directly as
      an acceleration (as opposed to a modification of spherical harmonic coefficients).
      The model is based on Lainey et al. (2007, 2012). It can compute the acceleration due to tides, and in
      particular tidal dissipation, on a planetary satellite. The acceleration computed can account for either the
      effect of tide raised on the satellite by the planet or on the planet by the satellite. The satellite is assumed
      to be tidally locked to the planet.

    parameters:
      - name: k2LoveNumber # [cpp]
        type: double # [cpp]
      - name: k2_love_number # [py]
        type: float # [py]
        description: Value of the k2 Love number.

      - name: timeLag # [cpp]
        type: double # [cpp]
      - name: time_lag # [py]
        type: float # [py]
        description: Value of the tidal time lag.

      - name: includeDirectRadialComponent # [cpp]
        type: bool, default=true # [cpp]
      - name: include_direct_radial_component # [py]
        type: bool, default=True # [py]
        description: It denotes whether the term independent of the time lag is to be computed.

      - name: useTideRaisedOnPlanet # [cpp]
        type: bool, default=true # [cpp]
      - name: use_tide_raised_on_planet # [py]
        type: bool, default=True # [py]
        description: It denotes whether the tide raised on the planet is to be modelled (if true) or the tide raised on the satellite (if false).

    returns:
        type: DirectTidalDissipationAccelerationSettings
        description: Direct tidal dissipation acceleration settings object.

  # Momentum wheel desaturation
  - name: momentumWheelDesaturationAcceleration # [cpp]
  - name: momentum_wheel_desaturation_acceleration # [py]
    short_summary: "Creates settings for momentum wheel desaturation acceleration."
    extended_summary: |
      The acceleration model is purpose-built to represent short bursts of thrust, such as a momentum wheel desaturation.
      A typical use case is precise orbit determination, but the functionality can be used just as well in propagation
      (for instance to model an impulsive manuever in a continuous manner when going from preliminary modelling to
      'full' modelling). The thrust is modelled similarly to Fig. 3 of Alessi et al. (2012), with the main difference
      being that a third-order polynomial to go from zero acceleration to the maximum acceleration level is employed.
      By using a 3rd-order polynomial and imposing continuity in the value and first derivative of the acceleration,
      defining the 'rise time' (time it takes acceleration to go from 0 to its maximum level), the total time where
      there is non-zero thrust ('total maneuver time'), and the total Delta V exerted by a single maneuver,
      the acceleration profile is fully defined.

    parameters:
      - name: thrustMidTimes # [cpp]
        type: std::vector<double> # [cpp]
      - name: thrust_mid_times # [py]
        type: list[float] # [py]
        description: Set of middle point in times in the maneuver denoting the epoch of each maneuver.

      - name: deltaVValues # [cpp]
        type: std::vector<Eigen::Vector3d> # [cpp]
      - name: delta_v_values # [py]
        type: list[numpy.ndarray] # [py]
        description: Set of delta V, one for each maneuver.

      - name: totalManeuverTime # [cpp]
        type: double # [cpp]
      - name: total_maneuver_time # [py]
        type: float # [py]
        description: Total duration of every maneuver.

      - name: maneuverRiseTime # [cpp]
        type: double # [cpp]
      - name: maneuver_rise_time # [py]
        type: float # [py]
        description: Time taken by the acceleration to go from zero to its maximum level.

    returns:
        type: MomentumWheelDesaturationAccelerationSettings
        description: Momentum wheel desaturation acceleration settings object.


  # Thrust acceleration (overload 1)
  - name: thrustAcceleration # [cpp]
  - name: thrust_from_direction_and_magnitude # [py]
    short_summary: "Creates settings for thrust acceleration from thrust guidance settings."
    extended_summary: |
      Creates settings for thrust acceleration from thrust guidance settings. The thrust direction and magnitude are
      supplied  separately in the form of dedicated settings objects (see the API for the respective classes).

    parameters:
      - name: ThrustDirectionSettings # [cpp]
        type: ThrustDirectionSettings # [cpp]
      - name: thrust_direction_settings # [py]
        type: ThrustDirectionSettings # [py]
        description: Thrust direction settings object.

      - name: thrustMagnitudeSettings # [cpp]
        type: ThrustMagnitudeSettings # [cpp]
      - name: thrust_magnitude_settings # [py]
        type: ThrustMagnitudeSettings # [py]
        description: Thrust magnitude settings object.

    returns:
        type: ThrustAccelerationSettings
        description: Thrust acceleration settings object.


  # Thrust acceleration (overload 2)
  - name: thrustAcceleration # [cpp]
  - name: thrust_from_interpolator_variable_isp # [py]
    short_summary: "Creates settings for thrust acceleration from interpolated thrust data with variable specific impulse."
    extended_summary: |
      Creates settings for thrust acceleration from interpolated thrust data and variable specific impulse. The thrust 
      direction and magnitude is defined through the related interpolator (which uses time as independent variable) and 
      it returns the thrust direction vector in the specified frame (it can be local-vertical-local-horizontal or inertial). 
      The specific impulse is defined through a user-defined function of time.

    parameters:
      - name: dataInterpolationSettings # [cpp]
        type: DataInterpolationSettings<double, Eigen::Vector3d> # [cpp]
      - name: data_interpolation_settings # [py]
        type: DataInterpolationSettings<float, numpy.ndarray> # [py]
        description: Interpolator object that provides the thrust direction vector in the given thrust frame as a function of time.

      - name: specificImpulseFunction # [cpp]
        type: std::function<double(double)> # [cpp]
      - name: specific_impulse_function # [py]
        type: callable[[double], double] # [py]
        description: Specific impulse provided as a function of time.

      - name: thrustFrame # [cpp]
        type: ThrustFrames, default=unspecified_thrust_frame # [cpp]
      - name: thrust_frame # [py]
        type: ThrustFrames, default=unspecified_thrust_frame # [py]
        description: Frame in which the thrust direction vector is represented.

      - name: centralBody # [cpp]
        type: std::string, default="" # [cpp]
      - name: central_body # [py]
        type: str, default="" # [py]
        description: Central body that is the origin of the thrust frame (if different from the vehicle, otherwise empty by default).

    returns:
        type: ThrustAccelerationSettings
        description: Thrust acceleration settings object.


  # Thrust acceleration (overload 3)
  - name: thrustAcceleration # [cpp]
  - name: thrust_from_interpolator # [py]
    short_summary: "Creates settings for thrust acceleration from interpolated thrust data with constant specific impulse."
    extended_summary: |
      Creates settings for thrust acceleration from interpolated thrust data and constant specific impulse. The thrust 
      direction and magnitude is defined through the related interpolator (which uses time as independent variable) and 
      it returns the thrust direction vector in the specified frame (it can be local-vertical-local-horizontal or inertial). 

    parameters:
      - name: dataInterpolationSettings # [cpp]
        type: DataInterpolationSettings<double, Eigen::Vector3d> # [cpp]
      - name: data_interpolation_settings # [py]
        type: DataInterpolationSettings<float, numpy.ndarray> # [py]
        description: Interpolator object that provides the thrust direction vector in the given thrust frame as a function of time.

      - name: constantSpecificImpulse # [cpp]
        type: double # [cpp]
      - name: constant_specific_impulse # [py]
        type: float # [py]
        description: Constant specific impulse.

      - name: thrustFrame # [cpp]
        type: ThrustFrames, default=unspecified_thrust_frame # [cpp]
      - name: thrust_frame # [py]
        type: ThrustFrames, default=unspecified_thrust_frame # [py]
        description: Frame in which the thrust direction vector is represented.

      - name: centralBody # [cpp]
        type: std::string, default="" # [cpp]
      - name: central_body # [py]
        type: str, default="" # [py]
        description: Central body that is the origin of the thrust frame (if different from the vehicle, otherwise empty by default).

    returns:
        type: ThrustAccelerationSettings
        description: Thrust acceleration settings object.


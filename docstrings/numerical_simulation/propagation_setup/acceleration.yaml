description: "This module provides the functionality for creating acceleration settings."
notes: "None"

# the structure of this file follows the order of expose_acceleration_setup.cpp (tudatpy) and
# includes tudat content for:
# - accelerationModelTypes.h
# - accelerationSettings.h
# - thrustSettings.h



classes:

###### enums from all included headers

  #    py::enum_<tba::AvailableAcceleration>
  #        enum tudat::basic_astrodynamics::AvailableAcceleration

  - name: AvailableAcceleration
    short_summary: "Enumeration of available acceleration types."
    extended_summary: |
      Enumeration of acceleration types supported by tudat.

    attributes:
      - name: undefined_acceleration # [cpp]
      - name: point_mass_gravity # [cpp]
      - name: central_gravity # [cpp]
      - name: aerodynamic # [cpp]
      - name: cannon_ball_radiation_pressure # [cpp]
      - name: spherical_harmonic_gravity # [cpp]
      - name: mutual_spherical_harmonic_gravity # [cpp]
      - name: third_body_point_mass_gravity # [cpp]
      - name: third_body_central_gravity # [cpp]
      - name: third_body_spherical_harmonic_gravity # [cpp]
      - name: third_body_mutual_spherical_harmonic_gravity # [cpp]
      - name: thrust_acceleration # [cpp]
      - name: relativistic_correction_acceleration # [cpp]
      - name: empirical_acceleration # [cpp]
      - name: direct_tidal_dissipation_in_central_body_acceleration # [cpp]
      - name: direct_tidal_dissipation_in_orbiting_body_acceleration # [cpp]
      - name: panelled_radiation_pressure_acceleration # [cpp]
      - name: momentum_wheel_desaturation_acceleration # [cpp]
      - name: solar_sail_acceleration # [cpp]
      - name: custom_acceleration # [cpp]

      - name: undefined_acceleration_type # [py]
      - name: point_mass_gravity_type # [py]
      - name: central_gravity_type # [py]
      - name: aerodynamic_type # [py]
      - name: cannon_ball_radiation_pressure_type # [py]
      - name: spherical_harmonic_gravity_type # [py]
      - name: mutual_spherical_harmonic_gravity_type # [py]
      - name: third_body_point_mass_gravity_type # [py]
      - name: third_body_central_gravity_type # [py]
      - name: third_body_spherical_harmonic_gravity_type # [py]
      - name: third_body_mutual_spherical_harmonic_gravity_type # [py]
      - name: thrust_acceleration_type # [py]
      - name: relativistic_correction_acceleration_type # [py]
      - name: empirical_acceleration_type # [py]
      - name: direct_tidal_dissipation_in_central_body_acceleration_type # [py]
      - name: direct_tidal_dissipation_in_orbiting_body_acceleration_type # [py]
      - name: panelled_radiation_pressure_acceleration_type # [py]
      - name: momentum_wheel_desaturation_acceleration_type # [py]
      - name: solar_sail_acceleration_type # [py]
      - name: custom_acceleration_type # [py]


  #    py::enum_<tss::ThrustFrames>
  #        enum tudat::simulation_setup::ThrustFrames

  - name: ThrustFrames
    short_summary: "Enumeration of available thrust frame types."
    extended_summary: |
      Enumeration of thrust frame types supported by tudat.

    attributes:
      - name: unspecified_thrust_frame # [cpp]
      - name: inertial_thrust_frame # [cpp]
      - name: lvlh_thrust_frame # [cpp]

      - name: unspecified_thrust_frame_type # [py]
      - name: inertial_thrust_frame_type # [py]
      - name: lvlh_thrust_frame_type # [py]


  #    py::enum_<tss::ThrustMagnitudeTypes>
  #        enum tudat::simulation_setup::ThrustMagnitudeTypes

  - name: ThrustMagnitudeTypes
    short_summary: "Enumeration of available thrust magnitude types."
    extended_summary: |
      Enumeration of thrust magnitude types supported by tudat.

    attributes:

      - name: constant_thrust_magnitude
      - name: from_engine_properties_thrust_magnitude
      - name: thrust_magnitude_from_time_function
      - name: thrust_magnitude_from_dependent_variables
      - name: bang_bang_thrust_magnitude_from_mee_costates


  #    py::enum_<tss::ThrustDirectionTypes>
  #        enum tudat::simulation_setup::ThrustDirectionTypes

  - name: ThrustDirectionTypes
    short_summary: "Enumeration of available thrust direction types."
    extended_summary: |
      Enumeration of thrust direction types supported by tudat.

    attributes:

      - name: colinear_with_state_segment_thrust_direction_type
      - name: thrust_direction_from_existing_body_orientation_type
      - name: custom_thrust_direction_type
      - name: custom_thrust_orientation_type
      - name: mee_costate_based_thrust_direction_type

  ######


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ################## Acceleration settings ( accelerationSettings.h ) #################################################
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  # base
  - name: AccelerationSettings
    short_summary: "Functional base class to define settings for accelerations."
    extendend_summary: |
      Class for providing settings for acceleration model. This class is a functional (base) class for
      settings of acceleration models that  require no information in addition to their type.
      Classes defining settings for acceleration models requiring additional information must be derived from this class.
      Bodies exerting and undergong acceleration are set externally from this class.
      This class can be used for the easy setup of acceleration models
      (see createAccelerationModels.h), but users may also chose to do so manually.
      (Derived) Class members are all public, for ease of access and modification.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user because this is a base class." # [cpp]


  # derived (1)
  - name: SphericalHarmonicAccelerationSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for the spherical harmonic acceleration."
    extendend_summary: |
      Class for providing settings for spherical harmonics acceleration model,
      including the maximum degree and order up to which the field is to be expanded. Note that
      the minimum degree and order are currently always set to zero.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (2)
  - name: MutualSphericalHarmonicAccelerationSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for the mutual spherical harmonic acceleration."
    extendend_summary: |
      Class for providing settings for the mutual spherical harmonics acceleration model,
      including the maximum degree and order up to which the fields of the bodies are to be expanded. Note that
      the minimum degree and order are currently always set to zero.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (3)
  - name: RelativisticAccelerationCorrectionSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for the relativistic acceleration correction."
    extendend_summary: |
      Class to provide settings for typical relativistic corrections to the dynamics of an orbiter: the
      Schwarzschild, Lense-Thirring and de Sitter terms (see 'General relativity and Space Geodesy' by L. Combrinck,
      2012).

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (4)
  - name: EmpiricalAccelerationSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for the empirical acceleration."
    extendend_summary: |
      Class to provide settings for empirical accelerations. These are expressed in the
      RSW frame, for which the mangitude is determined empirically (typically during an orbit determination process).
      The acceleration components are defined according to Montenbruck and Gill (2000), with a total of 9 components:
      a constant, sine and cosine term (with true anomaly as argument) for each of the three independent directions of
      the RSW frame.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (5)
  - name: CustomAccelerationSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for custom acceleration."
    extendend_summary: |
      Class to provide settings for custom accelerations. This is done by means of a function and, if necessary,
      an associated scaling function.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (6)
  - name: DirectTidalDissipationAccelerationSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for direct tidal dissipation acceleration."
    extendend_summary: |
      Class to provide settings for direct tidal dissipation accelerations. Creates settings for tidal accelerations.
      The direct of tidal effects in a satellite system is applied directly as an acceleration
      (as opposed to a modification of spherical harmonic coefficients).

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (7)
  - name: ThrustAccelerationSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for direct tidal dissipation acceleration."
    extendend_summary: |
      Class to provide settings for thrust acceleration. Settings for the direction and magnitude of the thrust
      are included.

    attributes:
      - name: thrustDirectionSettings_ # [cpp]
        type: ThrustDirectionSettings # [cpp]
      - name: direction_settings # [py]
        type: ThrustDirectionSettings # [py]
        description: Thrust direction settings object.

      - name: thrustMagnitudeSettings_ # [cpp]
        type: ThrustMagnitudeSettings # [cpp]
      - name: magnitude_settings # [py]
        type: ThrustMagnitudeSettings # [py]
        description: Thrust magnitude settings object.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (8)
  - name: MomentumWheelDesaturationAccelerationSettings
    short_summary: "`AccelerationSettings`-derived class to define settings for momentum wheel desaturation acceleration."
    extendend_summary: |
      Class to provide settings for momentum wheel desaturation acceleration. Settings for the direction and magnitude
      of the thrust are included.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ################## Thrust settings ( thrustSettings.h / thrustSettings.cpp ) ########################################
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  # Thrust direction: base
  - name: ThrustDirectionSettings
    short_summary: "Functional base class to define settings for the thrust direction."
    extendend_summary: |
      Functional base class to provide settings for the thrust direction.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user because this is a base class." # [cpp]

    attributes:
      - name: thrustDirectionType_ # [cpp] # readonly
        type: ThrustDirectionType # [cpp]
      - name: thrust_direction_type # [py] # readonly
        type: ThrustDirectionType # [py]
        description: Thrust direction type object.

      - name: relativeBody_ # [cpp] # readonly
        type: std::string # [cpp]
      - name: relative_body # [py] # readonly
        type: str # [py]
        description: Body to which the thrust acceleration is applied.


  # Thrust direction: derived (1)
  - name: ThrustDirectionFromStateGuidanceSettings
    short_summary: "`ThrustDirectionSettings`-derived class to define settings for the thrust direction from the current state."
    extendend_summary: |
      Derived class to provide settings for the thrust direction. The thrust direction is assumed to be in line with
      either the position or velocity of the body of interest with respect to some other
      body.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for thrust should be instantiated through factory functions of a derived class." # [cpp]

    attributes:
      - name: isColinearWithVelocity_ # [cpp] # readonly
        type: bool # [cpp]
      - name: is_colinear_with_velocity # [py] # readonly
        type: bool # [py]
        description: Whether the thrust direction is colinear with the velocity (true) or the position vector with respect to some other body (false).

      - name: directionIsOppositeToVector_ # [cpp] # readonly
        type: bool # [cpp]
      - name: direction_is_opposite_to_vector # [py] # readonly
        type: bool # [py]
        description: Whether the thrust is pointing towards the thrusting body (true) or the central body (false).


  # Thrust direction: derived (2)
  - name: CustomThrustDirectionSettings
    short_summary: "`ThrustDirectionSettings`-derived class to define settings for a custom thrust direction."
    extendend_summary: |
      Derived class to provide settings for the thrust direction. The thrust direction is provided through a unit
      vector in the inertial frame.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for thrust should be instantiated through factory functions of a derived class." # [cpp]

    attributes:
      - name: thrustDirectionFunction_ # [cpp] # readonly
        type: std::function<Eigen::Vector3d(double)> # [cpp]
      - name: thrust_direction_function # [py] # readonly
        type: Callable[[float], numpy.ndarray] # [py]
        description: Function of time returning the thrust direction in the inertial frame.


  # Thrust direction: derived (3)
  - name: CustomThrustOrientationSettings
    short_summary: "`ThrustDirectionSettings`-derived class to define settings for a custom thrust orientation."
    extendend_summary: |
      Derived class to provide settings for the thrust direction. The thrust orientation is provided through a function
      of time returing a unit quaternion in the inertial frame, representing the rotation from body-fixed thrust
      direction to the inertial thrust direction.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for thrust should be instantiated through factory functions of a derived class." # [cpp]

    attributes:
      - name: thrustOrientationFunction_ # [cpp] # readonly
        type: std::function<Eigen::Quaterniond(double)> # [cpp]
      - name: thrust_orientation_function # [py] # readonly
        type: Callable[[float], numpy.ndarray] # [py]
        description: Function of time returning the rotation between the thrust direction in the body-fixed frame to the inertial frame.


  # Thrust direction: derived (4)
  - name: MeeCostateBasedThrustDirectionSettings
    short_summary: "`ThrustDirectionSettings`-derived class to define settings for the thrust direction from Modified Equinoctial Elements (MEE) costates."
    extendend_summary: |
      Derived class to provide settings for the thrust direction. By using these settings for the thrust direction,
      the so-called co-states of the Modified Equinoctial elements are used to determine the direction of the thrust.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for thrust should be instantiated through factory functions of a derived class." # [cpp]

    attributes:
      - name: vehicleName_ # [cpp] # readonly
        type: std::string # [cpp]
      - name: vehicle_name # [py] # readonly
        type: str # [py]
        description: Name of the body to which the thrust is applied.

      - name: costateFunction_ # [cpp] # readonly
        type: std::function<Eigen::VectorXd(double)> # [cpp]
      - name: costate_function # [py] # readonly
        type: Callable[[float], numpy.ndarray] # [py]
        description: Function of time returning the five costates.


  # Thrust magnitude: base
  - name: ThrustMagnitudeSettings
    short_summary: "Functional base class to define settings for the thrust magnitude."
    extendend_summary: |
      Functional base class to provide settings for the thrust magnitude.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user because this is a base class." # [cpp]

    attributes:
      - name: thrustMagnitudeType_ # [cpp] # readonly
        type: ThrustMagnitudeType # [cpp]
      - name: thrust_magnitude_type # [py] # readonly
        type: ThrustMagnitudeType # [py]
        description: Thrust magnitude type object.

      - name: thrustOriginId_ # [cpp] # readonly
        type: std::string # [cpp]
      - name: thrust_origin_id # [py] # readonly
        type: str # [py]
        description: Reference ID of the thrust origin that should be used (empty if N/A).


  # Thrust magnitude: derived (1)
  - name: ConstantThrustMagnitudeSettings
    short_summary: "`ThrustMagnitudeSettings`-derived class to define settings for constant thrust magnitude."
    extendend_summary: |
      Derived class to provide settings for the thrust magnitude. This class should be used to define a constant thrust
      magnitude.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for thrust should be instantiated through factory functions of a derived class." # [cpp]

    attributes:
      - name: thrustMagnitude_ # [cpp] # readonly
        type: double # [cpp]
      - name: thrust_magnitude # [py] # readonly
        type: float # [py]
        description: Value of the constant thrust magnitude.

      - name: specificImpulse_ # [cpp] # readonly
        type: double # [cpp]
      - name: specific_impulse # [py] # readonly
        type: float # [py]
        description: Value of the constant specific impulse.

      - name: bodyFixedThrustDirection_ # [cpp] # readonly
        type: Eigen::Vector3d # [cpp]
      - name: specific_impulse # [py] # readonly
        type: numpy.ndarray # [py]
        description: Thrust direction vector expressed in the body-fixed reference frame.


#  # Thrust magnitude: derived (2)
#  - name: FromBodyThrustMagnitudeSettings
#    short_summary: "`ThrustMagnitudeSettings`-derived class to define settings for constant thrust magnitude."
#    extendend_summary: |
#      Derived class to provide settings for the thrust magnitude.  This class creates thrust magnitude settings that use
#      the thrust from one or all of the EngineModel objects that a vehicle is endowed with. In such a situation,
#      the thrust direction, force, and specific impulse are taken from the EngineModel.
#
#    methods:
#      - name: ctor # [cpp]
#        short_summary: "Constructor." # [cpp]
#        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for thrust should be instantiated through factory functions of a derived class." # [cpp]
#
#    attributes:
#      - name: useAllEngines_ # [cpp] # readonly
#        type: bool # [cpp]
#      - name: use_all_engines # [py] # readonly
#        type: bool # [py]
#        description: It denotes whether all engines of the associated body are to be combined into a single thrust magnitude.


  # Thrust magnitude: derived (3)
  - name: FromFunctionThrustMagnitudeSettings
    short_summary: "`ThrustMagnitudeSettings`-derived class to define settings for constant thrust magnitude."
    extendend_summary: |
      Derived class to provide settings for the thrust magnitude. This class should be used to define a thrust
      magnitude through a custom function.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for thrust should be instantiated through factory functions of a derived class." # [cpp]



functions:

  # factory functions

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ################## Acceleration settings ( accelerationSettings.h ) #################################################
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  # Point mass gravity
  - name: pointMassGravityAcceleration # [cpp]
  - name: point_mass_gravity # [py]
    short_summary: "Creates settings for the point-mass gravity acceleration."
    extended_summary: |
      Creates settings for the point-mass gravity acceleration. The body exerting the acceleration needs to have a
      gravity field model defined.

    returns:
        type: AccelerationSettings
        description: Acceleration settings object.


  # Aerodynamic
  - name: aerodynamicAcceleration # [cpp]
  - name: aerodynamic # [py]
    short_summary: "Creates settings for the aerodynamic acceleration."
    extended_summary: |
      Creates settings for the aerodynamic acceleration. The body exerting the acceleration needs to have an
      atmosphere defined.

    returns:
        type: AccelerationSettings
        description: Acceleration settings object.


  # Cannonball radiation pressure
  - name: cannonBallRadiationPressureAcceleration # [cpp]
  - name: cannonball_radiation_pressure # [py]
    short_summary: "Creates settings for the cannonball radiation pressure acceleration."
    extended_summary: |
      Creates settings for the radiation pressure acceleration, for which a cannonball model is used. In this model,
      the effective acceleration is colinear with the vector connecting the source of radiation and the target.
      The body undergoing the acceleration needs to have a radiation pressure model defined, while the body emitting
      radiation needs to have radiative properties defined (the Sun has default ones).

    returns:
        type: AccelerationSettings
        description: Acceleration settings object.


  # Spherical harmonic gravity
  - name: sphericalHarmonicAcceleration # [cpp]
  - name: spherical_harmonic_gravity # [py]
    short_summary: "Creates settings for the spherical harmonic gravity acceleration."
    extended_summary: |
      Creates settings for the spherical harmonic gravity acceleration, accounting for a finite (given) number
      of degree and order. The body exerting the acceleration needs to have a spherical harmonic gravity field model
      defined.

    parameters:
      - name: maximumDegree # [cpp]
        type: int # [cpp]
      - name: maximum_degree # [py]
        type: int # [py]
        description: Maximum degree of the spherical harmonic expansion.

      - name: maximumOrder # [cpp]
        type: int # [cpp]
      - name: maximum_order # [py]
        type: int # [py]
        description: Maximum order of the spherical harmonic expansion.

    returns:
        type: SphericalHarmonicAccelerationSettings
        description: Spherical harmonic acceleration settings object.


  # Mutual spherical harmonic gravity
  - name: mutualSphericalHarmonicAcceleration # [cpp]
  - name: mutual_spherical_harmonic_gravity # [py]
    short_summary: "Creates settings for the mutual spherical harmonic gravity acceleration."
    extended_summary: |
      Creates settings for the mutual spherical harmonic gravity acceleration, accounting for a finite (given) number
      of degree and order for both bodies. Both the body exerting the acceleration and the body undergoing it need to
      have spherical harmonic gravity field models defined. In addition, the body undergoing the acceleration needs to
      have a rotational model defined. For the case where a third-body mutual spherical harmonic acceleration,
      additional parameters have to be provided that denote the expansion degree/order of the central body.

    parameters:
      - name: maximumDegreeOfBodyExertingAcceleration # [cpp]
        type: int # [cpp]
      - name: maximum_degree_body_exerting # [py]
        type: int # [py]
        description: Maximum degree of the spherical harmonic expansion for the body exerting the acceleration.

      - name: maximumOrderOfBodyExertingAcceleration # [cpp]
        type: int # [cpp]
      - name: maximum_order_body_exerting # [py]
        type: int # [py]
        description: Maximum order of the spherical harmonic expansion for the body exerting the acceleration.

      - name: maximumDegreeOfBodyUndergoingAcceleration # [cpp]
        type: int # [cpp]
      - name: maximum_degree_body_undergoing # [py]
        type: int # [py]
        description: Maximum degree of the spherical harmonic expansion for the body undergoing the acceleration.

      - name: maximumOrderOfBodyUndergoingAcceleration # [cpp]
        type: int # [cpp]
      - name: maximum_order_body_undergoing # [py]
        type: int # [py]
        description: Maximum order of the spherical harmonic expansion for the body undergoing the acceleration.

      - name: maximumDegreeOfCentralBody # [cpp]
        type: int, default=0 # [cpp]
      - name: maximum_degree_central_body # [py]
        type: int, default=0 # [py]
        description: Maximum degree of the spherical harmonic expansion for the central body, if needed.

      - name: maximumOrderOfCentralBody # [cpp]
        type: int, default=0 # [cpp]
      - name: maximum_order_central_body # [py]
        type: int, default=0 # [py]
        description: Maximum order of the spherical harmonic expansion for the central body, if needed.

    returns:
        type: MutualSphericalHarmonicAccelerationSettings
        description: Spherical harmonic acceleration settings object.


  # Relativistic correction
  - name: relativisticAccelerationCorrection # [cpp]
  - name: relativistic_correction # [py]
    short_summary: "Creates settings for the relativistic acceleration correction."
    extended_summary: |
      Creates settings for typical relativistic acceleration corrections: the Schwarzschild, Lense-Thirring and de
      Sitter terms (see 'General relativity and Space Geodesy' by L. Combrinck, 2012). It implements the model of
      2010 Conventions (chapter 10, section 3). Here, the ‘primary body’ for a planetary orbiter should always be set
      as the Sun (only relevant for de Sitter correction). The angular momentum vector of the orbited body is only
      relevant for Lense-Thirring correction.

    parameters:
      - name: calculateSchwarzschildCorrection # [cpp]
        type: bool # [cpp]
      - name: use_schwarzschild # [py]
        type: bool # [py]
        description: Maximum degree of the spherical harmonic expansion for the body exerting the acceleration.

      - name: calculateLenseThirringCorrection # [cpp]
        type: bool # [cpp]
      - name: use_lense_thirring # [py]
        type: bool # [py]
        description: Maximum order of the spherical harmonic expansion for the body exerting the acceleration.

      - name: calculateDeSitterCorrection # [cpp]
        type: bool # [cpp]
      - name: use_de_sitter # [py]
        type: bool # [py]
        description: Maximum degree of the spherical harmonic expansion for the body undergoing the acceleration.

      - name: primaryBody # [cpp]
        type: std::string, default="" # [cpp]
      - name: de_sitter_central_body # [py]
        type: str, default="" # [py]
        description: Maximum order of the spherical harmonic expansion for the body undergoing the acceleration.

      - name: centralBodyAngularMomentum # [cpp]
        type: Eigen::Vector3d, default=Eigen::Vector3d::Zero() # [cpp]
      - name: lense_thirring_angular_momentum # [py]
        type: numpy.ndarray, default=numpy.array([0, 0, 0]) # [py]
        description: Maximum degree of the spherical harmonic expansion for the central body, if needed.

    returns:
        type: RelativisticAccelerationCorrectionSettings
        description: Relativistic acceleration correction settings object.


  # Empirical
  - name: empiricalAcceleration # [cpp]
  - name: empirical # [py]
    short_summary: "Creates settings for empirical acceleration."
    extended_summary: |
      Creates settings for empirical accelerations. These are expressed in the
      RSW frame, for which the mangitude is determined empirically (typically during an orbit determination process).
      The acceleration components are defined according to Montenbruck and Gill (2000), with a total of 9 components:
      a constant, sine and cosine term (with true anomaly as argument) for each of the three independent directions of
      the RSW frame.

    parameters:
      - name: constantAcceleration # [cpp]
        type: Eigen::Vector3d, default=Eigen::Vector3d::Zero() # [cpp]
      - name: constant_acceleration # [py]
        type: numpy.ndarray, default=numpy.array([0, 0, 0]) # [py]
        description: Constant term, defined in the RSW frame.

      - name: sineAcceleration # [cpp]
        type: Eigen::Vector3d, default=Eigen::Vector3d::Zero() # [cpp]
      - name: sine_acceleration # [py]
        type: numpy.ndarray, default=numpy.array([0, 0, 0]) # [py]
        description: Sine term (function of the true anomaly), defined in the RSW frame..

      - name: cosineAcceleration # [cpp]
        type: Eigen::Vector3d, default=Eigen::Vector3d::Zero() # [cpp]
      - name: cosine_acceleration # [py]
        type: numpy.ndarray, default=numpy.array([0, 0, 0]) # [py]
        description: Cosine term (function of the true anomaly), defined in the RSW frame..

    returns:
        type: EmpiricalAccelerationSettings
        description: Empirical acceleration settings object.


  # Custom
  - name: customAccelerationSettings # [cpp]
  - name: custom # [py]
    short_summary: "Creates settings for custom acceleration."
    extended_summary: |
      Creates settings for empirical accelerations. These are expressed in the
      RSW frame, for which the mangitude is determined empirically (typically during an orbit determination process).
      The acceleration components are defined according to Montenbruck and Gill (2000), with a total of 9 components:
      a constant, sine and cosine term (with true anomaly as argument) for each of the three independent directions of
      the RSW frame.

    parameters:
      - name: accelerationFunction # [cpp]
        type: std::function<Eigen::Vector3d(const double)> # [cpp]
      - name: acceleration_function # [py]
        type: Callable[[float], list] # [py]
        description: Custom acceleration function with time as an independent variable.

      - name: scalingFunction # [cpp]
        type: std::function<double(const double)>, default=nullptr # [cpp]
      - name: scaling_function # [py]
        type: Callable[[float], float], default=None # [py]
        description: Scaling function with time as an independent variable to be multiplied by the custom acceleration function.

    returns:
        type: CustomAccelerationSettings
        description: Custom acceleration settings object.


  # Direct tidal dissipation
  - name: directTidalDissipationAcceleration # [cpp]
  - name: direct_tidal_dissipation_acceleration # [py]
    short_summary: "Creates settings for custom acceleration."
    extended_summary: |
      Creates settings for tidal accelerations. The direct of tidal effects in a satellite system is applied directly as
      an acceleration (as opposed to a modification of spherical harmonic coefficients).
      The model is based on Lainey et al. (2007, 2012). It can compute the acceleration due to tides, and in
      particular tidal dissipation, on a planetary satellite. The acceleration computed can account for either the
      effect of tide raised on the satellite by the planet or on the planet by the satellite. The satellite is assumed
      to be tidally locked to the planet.

    parameters:
      - name: k2LoveNumber # [cpp]
        type: double # [cpp]
      - name: k2_love_number # [py]
        type: float # [py]
        description: Value of the k2 Love number.

      - name: timeLag # [cpp]
        type: double # [cpp]
      - name: time_lag # [py]
        type: float # [py]
        description: Value of the tidal time lag.

      - name: includeDirectRadialComponent # [cpp]
        type: bool, default=true # [cpp]
      - name: include_direct_radial_component # [py]
        type: bool, default=True # [py]
        description: It denotes whether the term independent of the time lag is to be computed.

      - name: useTideRaisedOnPlanet # [cpp]
        type: bool, default=true # [cpp]
      - name: use_tide_raised_on_planet # [py]
        type: bool, default=True # [py]
        description: It denotes whether the tide raised on the planet is to be modelled (if true) or the tide raised on the satellite (if false).

    returns:
        type: DirectTidalDissipationAccelerationSettings
        description: Direct tidal dissipation acceleration settings object.

  # Momentum wheel desaturation
  - name: momentumWheelDesaturationAcceleration # [cpp]
  - name: momentum_wheel_desaturation_acceleration # [py]
    short_summary: "Creates settings for momentum wheel desaturation acceleration."
    extended_summary: |
      The acceleration model is purpose-built to represent short bursts of thrust, such as a momentum wheel desaturation.
      A typical use case is precise orbit determination, but the functionality can be used just as well in propagation
      (for instance to model an impulsive manuever in a continuous manner when going from preliminary modelling to
      'full' modelling). The thrust is modelled similarly to Fig. 3 of Alessi et al. (2012), with the main difference
      being that a third-order polynomial to go from zero acceleration to the maximum acceleration level is employed.
      By using a 3rd-order polynomial and imposing continuity in the value and first derivative of the acceleration,
      defining the 'rise time' (time it takes acceleration to go from 0 to its maximum level), the total time where
      there is non-zero thrust ('total maneuver time'), and the total Delta V exerted by a single maneuver,
      the acceleration profile is fully defined.

    parameters:
      - name: thrustMidTimes # [cpp]
        type: std::vector<double> # [cpp]
      - name: thrust_mid_times # [py]
        type: list[float] # [py]
        description: Set of middle point in times in the maneuver denoting the epoch of each maneuver.

      - name: deltaVValues # [cpp]
        type: std::vector<Eigen::Vector3d> # [cpp]
      - name: delta_v_values # [py]
        type: list[numpy.ndarray] # [py]
        description: Set of delta V, one for each maneuver.

      - name: totalManeuverTime # [cpp]
        type: double # [cpp]
      - name: total_maneuver_time # [py]
        type: float # [py]
        description: Total duration of every maneuver.

      - name: maneuverRiseTime # [cpp]
        type: double # [cpp]
      - name: maneuver_rise_time # [py]
        type: float # [py]
        description: Time taken by the acceleration to go from zero to its maximum level.

    returns:
        type: MomentumWheelDesaturationAccelerationSettings
        description: Momentum wheel desaturation acceleration settings object.


  # Thrust acceleration (overload 1)
  - name: thrustAcceleration # [cpp]
  - name: thrust_from_direction_and_magnitude # [py]
    short_summary: "Creates settings for thrust acceleration from thrust guidance settings."
    extended_summary: |
      Creates settings for thrust acceleration from thrust guidance settings. The thrust direction and magnitude are
      supplied  separately in the form of dedicated settings objects (see the API for the respective classes).

    parameters:
      - name: ThrustDirectionSettings # [cpp]
        type: ThrustDirectionSettings # [cpp]
      - name: thrust_direction_settings # [py]
        type: ThrustDirectionSettings # [py]
        description: Thrust direction settings object.

      - name: thrustMagnitudeSettings # [cpp]
        type: ThrustMagnitudeSettings # [cpp]
      - name: thrust_magnitude_settings # [py]
        type: ThrustMagnitudeSettings # [py]
        description: Thrust magnitude settings object.

    returns:
        type: ThrustAccelerationSettings
        description: Thrust acceleration settings object.


  # Thrust acceleration (overload 2)
  - name: thrustAcceleration # [cpp]
  - name: thrust_from_interpolator_variable_isp # [py]
    short_summary: "Creates settings for thrust acceleration from interpolated thrust data with variable specific impulse."
    extended_summary: |
      Creates settings for thrust acceleration from interpolated thrust data and variable specific impulse. The thrust 
      direction and magnitude is defined through the related interpolator (which uses time as independent variable) and 
      it returns the thrust direction vector in the specified frame (it can be local-vertical-local-horizontal or inertial). 
      The specific impulse is defined through a user-defined function of time.

    parameters:
      - name: dataInterpolationSettings # [cpp]
        type: DataInterpolationSettings<double, Eigen::Vector3d> # [cpp]
      - name: data_interpolation_settings # [py]
        type: DataInterpolationSettings<float, numpy.ndarray> # [py]
        description: Interpolator object that provides the thrust direction vector in the given thrust frame as a function of time.

      - name: specificImpulseFunction # [cpp]
        type: std::function<double(double)> # [cpp]
      - name: specific_impulse_function # [py]
        type: Callable[[double], double] # [py]
        description: Specific impulse provided as a function of time.

      - name: thrustFrame # [cpp]
        type: ThrustFrames, default=unspecified_thrust_frame # [cpp]
      - name: thrust_frame # [py]
        type: ThrustFrames, default=unspecified_thrust_frame # [py]
        description: Frame in which the thrust direction vector is represented.

      - name: centralBody # [cpp]
        type: std::string, default="" # [cpp]
      - name: central_body # [py]
        type: str, default="" # [py]
        description: Central body that is the origin of the thrust frame (if different from the vehicle, otherwise empty by default).

    returns:
        type: ThrustAccelerationSettings
        description: Thrust acceleration settings object.


  # Thrust acceleration (overload 3)
  - name: thrustAcceleration # [cpp]
  - name: thrust_from_interpolator # [py]
    short_summary: "Creates settings for thrust acceleration from interpolated thrust data with constant specific impulse."
    extended_summary: |
      Creates settings for thrust acceleration from interpolated thrust data and constant specific impulse. The thrust 
      direction and magnitude is defined through the related interpolator (which uses time as independent variable) and 
      it returns the thrust direction vector in the specified frame (it can be local-vertical-local-horizontal or inertial). 

    parameters:
      - name: dataInterpolationSettings # [cpp]
        type: DataInterpolationSettings<double, Eigen::Vector3d> # [cpp]
      - name: data_interpolation_settings # [py]
        type: DataInterpolationSettings<float, numpy.ndarray> # [py]
        description: Interpolator object that provides the thrust direction vector in the given thrust frame as a function of time.

      - name: constantSpecificImpulse # [cpp]
        type: double # [cpp]
      - name: constant_specific_impulse # [py]
        type: float # [py]
        description: Constant specific impulse.

      - name: thrustFrame # [cpp]
        type: ThrustFrames, default=unspecified_thrust_frame # [cpp]
      - name: thrust_frame # [py]
        type: ThrustFrames, default=unspecified_thrust_frame # [py]
        description: Frame in which the thrust direction vector is represented.

      - name: centralBody # [cpp]
        type: std::string, default="" # [cpp]
      - name: central_body # [py]
        type: str, default="" # [py]
        description: Central body that is the origin of the thrust frame (if different from the vehicle, otherwise empty by default).

    returns:
        type: ThrustAccelerationSettings
        description: Thrust acceleration settings object.


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ################## Thrust model guidance ( createThrustModelGuidance.h / createThrustModelGuidance.cpp ) ############
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# For now, it was decided that these functions should not be part of the user interface

#  # Free functions
#
#  # Combined thrust direction
#  - name: getCombinedThrustDirection # [cpp]
#  - name: get_combined_thrust_direction # [py]
#    short_summary: "Function to retrieve the effective thrust direction from a set of thrust sources."
#    extended_summary: |
#      Function to retrieve the effective thrust direction from a set of thrust sources (e.g., multiple nozzles).
#      It returns the vector sum of all thrust directions and the scalar sum of all thrust magnitudes. Both thrust
#      magnitude and direction are supplied as functions of time.
#
#    parameters:
#      - name: thrustDirections # [cpp]
#        type: std::vector<std::function<Eigen::Vector3d()>> # [cpp]
#      - name: thrust_directions # [py]
#        type: list[Callable[[], numpy.ndarray] # [py]
#        description: Set of functions of time representing the thrust direction vector of each thrust source.
#
#      - name: thrustMagnitudes # [cpp]
#        type: std::vector<std::function<double()> # [cpp]
#      - name: thrust_magnitudes # [py]
#        type: list[Callable[[], float] # [py]
#        description: Set of functions of time representing the thrust magnitude of each thrust source.
#
#    returns:
#        type: Eigen::Vector3d # [cpp]
#        type: numpy.ndarray # [py]
#        description: Net thrust direction vector.
#
#
#  # Body-fixed thrust direction
#  - name: getBodyFixedThrustDirection # [cpp]
#  - name: get_body_fixed_thrust_direction # [py]
#    short_summary: "Function to compute the body-fixed thrust direction from a thrust magnitude settings object."
#    extended_summary: |
#      Function to compute the thrust direction in the body-fixed frame from a thrust magnitude settings object.
#      Multiple types of thrust magnitude settings are supported (see ThrustMagnitudeTypes enum).
#
#    parameters:
#      - name: thrustDirections # [cpp]
#        type: std::vector<std::function<Eigen::Vector3d()>> # [cpp]
#      - name: thrust_directions # [py]
#        type: list[Callable[[], numpy.ndarray] # [py]
#        description: Set of functions of time representing the thrust direction vector of each thrust source.
#
#      - name: thrustMagnitudes # [cpp]
#        type: std::vector<std::function<double()> # [cpp]
#      - name: thrust_magnitudes # [py]
#        type: list[Callable[[], float] # [py]
#        description: Set of functions of time representing the thrust magnitude of each thrust source.
#
#    returns:
#        type: Eigen::Vector3d # [cpp]
#        type: numpy.ndarray # [py]
#        description: Net thrust direction vector.
#
#
#  # TODO: Thrust magnitude wrapper
#  - name: createThrustMagnitudeWrapper # [cpp]
#  - name: create_thrust_magnitude_wrapper # [py]
#    short_summary: "Function to compute the body-fixed thrust direction from a thrust magnitude settings object."
#    extended_summary: |
#      Function to compute the thrust direction in the body-fixed frame from a thrust magnitude settings object.
#      Multiple types of thrust magnitude settings are supported (see ThrustMagnitudeTypes enum).
#
#    parameters:
#      - name: thrustDirections # [cpp]
#        type: std::vector<std::function<Eigen::Vector3d()>> # [cpp]
#      - name: thrust_directions # [py]
#        type: list[Callable[[], numpy.ndarray] # [py]
#        description: Set of functions of time representing the thrust direction vector of each thrust source.
#
#      - name: thrustMagnitudes # [cpp]
#        type: std::vector<std::function<double()> # [cpp]
#      - name: thrust_magnitudes # [py]
#        type: list[Callable[[], float] # [py]
#        description: Set of functions of time representing the thrust magnitude of each thrust source.
#
#    returns:
#        type: Eigen::Vector3d # [cpp]
#        type: numpy.ndarray # [py]
#        description: Net thrust direction vector.
#
#
#  # Update thrust settings
#  - name: updateThrustSettings # [cpp]
#  - name: update_thrust_settings # [py]
#    short_summary: "Function to update the thrust settings (direction and magnitude)."
#    extended_summary: |
#      Function used to update the thrust settings (direction and magnitude) to the given time.
#
#    parameters:
#      - name: thrustMagnitudeWrapper # [cpp]
#        type: ThrustMagnitudeWrapper # [cpp]
#      - name: thrust_magnitude_wrapper # [py]
#        type: ThrustMagnitudeWrapper # [py]
#        description: Thrust magnitude wrapper object used during propagation to compute the thrust magnitude.
#
#      - name: thrustDirectionGuidance # [cpp]
#        type: BodyFixedForceDirectionGuidance # [cpp]
#      - name: thrust_direction_guidance # [py]
#        type: BodyFixedForceDirectionGuidance # [py]
#        description: Thrust direction guidance object object used during propagation to compute the body-fixed thrust direction.
#
#      - name: currentTime # [cpp]
#        type: std::vector<std::function<double()> # [cpp]
#      - name: current_time # [py]
#        type: list[Callable[[], float] # [py]
#        description: Time at which the thrust direction and magnitude should be updated.
#
#
#  # Reset thrust settings
#  - name: resetThrustSettingsTime # [cpp]
#  - name: reset_thrust_settings_time # [py]
#    short_summary: "Function to reset the thrust settings (direction and magnitude)."
#    extended_summary: |
#      Function used to reset the current time relevant for the thrust settings (direction and magnitude).
#
#    parameters:
#      - name: thrustMagnitudeWrapper # [cpp]
#        type: ThrustMagnitudeWrapper # [cpp]
#      - name: thrust_magnitude_wrapper # [py]
#        type: ThrustMagnitudeWrapper # [py]
#        description: Thrust magnitude wrapper object used during propagation to compute the thrust magnitude.
#
#      - name: thrustDirectionGuidance # [cpp]
#        type: BodyFixedForceDirectionGuidance # [cpp]
#      - name: thrust_direction_guidance # [py]
#        type: BodyFixedForceDirectionGuidance # [py]
#        description: Thrust direction guidance object object used during propagation to compute the body-fixed thrust direction.
#
#      - name: currentTime # [cpp]
#        type: std::vector<std::function<double()> # [cpp]
#      - name: current_time # [py]
#        type: list[Callable[[], float] # [py]
#        description: Time to which the old time should be updated (relevant for the thrust direction and magnitude).

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ################## Thrust settings ( thrustSettings.h / thrustSettings.cpp ) ########################################
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  # TODO: fix default input arguments
  # Reset thrust settings
  - name: getPropulsionInputVariables # [cpp]
  - name: get_propulsion_input_variables # [py]
    short_summary: "Function to create a list of functions that compute and return independent variables for the thrust."
    extended_summary: |
      Function to create a list of functions that compute and return independent variables for thrust and/or specific
      impulse. This parameterization is used to create a specific thrust magnitude type (see thrust magnitude from
      dependent variables). This function retrieves all input functions from the environment and a list of user-defined
      functions.

    parameters:
      - name: bodyWithGuidance # [cpp]
        type: Body # [cpp]
      - name: body_with_guidance # [py]
        type: Body # [py]
        description: Body object whose thrust guidance should be defined.

      - name: independentVariables # [cpp]
        type: std::vector<ThrustIndependentVariables> # [cpp]
      - name: independent_variables # [py]
        type: list[ThrustIndependentVariables] # [py]
        description: Set of dependent variables that should be used to compute the thrust.

      - name: guidanceInputFunctions # [cpp]
        type: std::vector<std::function<double()>, default=std::vector<std::function<double()>() # [cpp]
      - name: guidance_input_functions # [py]
        type: list[Callable[[], float], default=[] # [py]
        description: Set of functions to compute the thrust, each associated to a specific dependent variable.


  # Factory functions: thrust direction

  # From state guidance
  - name: thrustDirectionFromStateGuidanceSettings # [cpp]
  - name: thrust_direction_from_state_guidance # [py]
    short_summary: "Create thrust direction settings from the state guidance."
    extended_summary: |
      Factory function that creates thrust direction settings from the state guidance. In various simplified cases,
      the thrust direction can be assumed to be in line with either the position or velocity of the body of interest
      with respect to some other body.

    parameters:
      - name: centralBody # [cpp]
        type: Body # [cpp]
      - name: central_body # [py]
        type: Body # [py]
        description: Central body with respect to which the position and velocity of the body undergoing the thrust acceleration are computed.

      - name: isColinearWithVelocity_ # [cpp]
        type: bool # [cpp]
      - name: is_colinear_with_velocity # [py]
        type: bool # [py]
        description: Whether the thrust direction is colinear with the velocity (true) or the position vector with respect to some other body (false).

      - name: directionIsOppositeToVector_ # [cpp]
        type: bool # [cpp]
      - name: direction_is_opposite_to_vector # [py]
        type: bool # [py]
        description: Whether the thrust is pointing towards the thrusting body (true) or the central body (false).

    returns:
        type: ThrustDirectionFromStateGuidanceSettings
        description: Thrust direction from state guidance settings object.


  # From existing body orientation
  - name: thrustFromExistingBodyOrientation # [cpp]
  - name: thrust_from_existing_body_orientation # [py]
    short_summary: "Create thrust direction settings from the existing body orientation."
    extended_summary: |
      Factory function that creates thrust direction settings from the existing body orientation. In some cases,
      the vehicle’s orientation may be predetermined, either due to aerodynamic guidance or to the concurrent
      propagation of the rotational equations of motion. In such a case, the thrust direction is computed from the
      body-fixed thrust direction (defined in ThrustMagnitudeSettings) and the existing vehicle orientation.

    returns:
        type: ThrustDirectionSettings
        description: Thrust direction settings object.


  # Custom thrust orientation (overload 1, cpp only)
  - name: customThrustOrientationSettings # [cpp]
    short_summary: "Create custom thrust orientation settings, expressed as a quaternion." # [cpp]
    extended_summary: | # [cpp]
      Factory function that creates custom thrust orientation settings, expressed through a quaternion. # [cpp]
      As an alternative expression for generalized thrust direction guidance, the thrust orientation can be defined as # [cpp]
      an arbitrary function of time. As with the custom thrust direction, this allows a broad range of options to be # [cpp]
      defined, at the expense of increased complexity (somehow the thrust orientation needs to be manually defined). # [cpp]
      The thrust orientation is provided through a unit quaternion representing the rotation # [cpp]
      from body-fixed thrust direction to the inertial thrust direction. # [cpp]


    parameters:
      - name: thrustOrientationFunction # [cpp]
        type: std::function<Eigen::Quaterniond(double)> # [cpp]
        description: Function of time returning the quaternion representing the rotation between the thrust direction in the body-fixed frame to the inertial frame. # [cpp]

    returns:
        type: CustomThrustOrientationSettings # [cpp]
        description: Custom thrust orientation settings object. # [cpp]


  # Custom thrust orientation (overload 2)
  - name: customThrustOrientationSettings # [cpp]
  - name: custom_thrust_orientation # [py]
    short_summary: "Create custom thrust orientation settings, expressed as a rotation matrix."
    extended_summary: |
      Factory function that creates custom thrust orientation settings, expressed through a rotation matrix.
      As an alternative expression for generalized thrust direction guidance, the thrust orientation can be defined as
      an arbitrary function of time. As with the custom thrust direction, this allows a broad range of options to be
      defined, at the expense of increased complexity (somehow the thrust orientation needs to be manually defined).
      The thrust orientation is provided through a rotation matrix representing the rotation
      from body-fixed thrust direction to the inertial thrust direction.

    parameters:
      - name: thrustOrientationFunction # [cpp]
        type: std::function<Eigen::Matrix3d(double)> # [cpp]
      - name: thrust_orientation_function # [py]
        type: Callable[[float], numpy.ndarray] # [py]
        description: Function of time returning the matrix representing the rotation between the thrust direction in the body-fixed frame to the inertial frame.

    returns:
        type: CustomThrustOrientationSettings
        description: Custom thrust orientation settings object.


  # Custom thrust direction
  - name: customThrustDirectionSettings # [cpp]
  - name: custom_thrust_direction # [py]
    short_summary: "Create custom thrust direction settings, expressed as a vector in the inertial frame."
    extended_summary: |
      Factory function that creates custom thrust direction settings, expressed as a unit vector in the inertial frame.
      For a generalized thrust direction guidance, the thrust can be defined as an arbitrary function of time.
      This allows a broad range of options to be defined, at the expense of increased complexity (somehow the thrust
      direction needs to be manually defined).

    parameters:
      - name: thrustDirectionFunction # [cpp]
        type: std::function<Eigen::Vector3d(double)> # [cpp]
      - name: thrust_direction_function # [py]
        type: Callable[[float], numpy.ndarray] # [py]
        description: Function of time returning the thrust direction in the inertial frame.

    returns:
        type: CustomThrustDirectionSettings
        description: Custom thrust direction settings object.


  ## Modified equinoctial elements costate-based thrust direction (overload 1)
  #- name: meeCostateBasedThrustDirectionSettings # [cpp]
  #- name: custom_thrust_direction # [py]
    #short_summary: "Create thrust direction settings, expressed through modified equinoctial elements costates."
    #extended_summary: |
      #Factory function that creates thrust direction settings, expressed through modified equinoctial elements costates.
      #By using these settings for the thrust direction, the so-called co-states of the Modified Equinoctial elements
      #are used to determine the direction of the thrust. Details of this model are given by Kluever (2010),
      #Boudestijn (2014) and Hogervorst (2017). This function takes variable costates as an interpolator over time.

    #parameters:
      #- name: vehicleName # [cpp]
        #type: std::string # [cpp]
      #- name: vehicle_name # [py]
        #type: str # [py]
        #description: Name of the body undergoing thrust.

      #- name: centralBodyName # [cpp]
        #type: std::string # [cpp]
      #- name: central_body_name # [py]
        #type: str # [py]
        #description: Name of the central body with respect to which the Modified Equinoctial Elements are computed.

      #- name: costateInterpolator # [cpp]
        #type: OneDimensionalInterpolator<double, Eigen::VectorXd> # [cpp]
      #- name: costate_interpolator # [py]
        #type: OneDimensionalInterpolator<float, numpy.ndarray> # [py]
        #description: Interpolator object returning the five costates with time as an independent variable.

    #returns:
        #type: MeeCostateBasedThrustDirectionSettings
        #description: Modified Equinoctial Elements costate-based thrust direction settings object.


  ## Modified equinoctial elements costate-based thrust direction (overload 2)
  #- name: meeCostateBasedThrustDirectionSettings # [cpp]
  #- name: custom_thrust_direction # [py]
    #short_summary: "Create thrust direction settings, expressed through modified equinoctial elements costates."
    #extended_summary: |
      #Factory function that creates thrust direction settings, expressed through modified equinoctial elements costates.
      #By using these settings for the thrust direction, the so-called co-states of the Modified Equinoctial elements
      #are used to determine the direction of the thrust. Details of this model are given by Kluever (2010),
      #Boudestijn (2014) and Hogervorst (2017). This function takes constant costates.

    #parameters:
      #- name: vehicleName # [cpp]
        #type: std::string # [cpp]
      #- name: vehicle_name # [py]
        #type: str # [py]
        #description: Name of the body undergoing thrust.

      #- name: centralBodyName # [cpp]
        #type: std::string # [cpp]
      #- name: central_body_name # [py]
        #type: str # [py]
        #description: Name of the central body with respect to which the Modified Equinoctial Elements are computed.

      #- name: constantCostates # [cpp]
        #type: Eigen::VectorXd # [cpp]
      #- name: constant_costates # [py]
        #type: numpy.ndarray # [py]
        #description: Set of five constant costates.

    #returns:
        #type: MeeCostateBasedThrustDirectionSettings
        #description: Modified Equinoctial Elements costate-based thrust direction settings object.

  # Factory functions: thrust magnitude

  # Constant thrust magnitude
  - name: constantThrustMagnitudeSettings # [cpp]
  - name: constant_thrust_magnitude # [py]
    short_summary: "Create thrust magnitude settings from a constant thrust magnitude and Isp."
    extended_summary: |
      Factory function that creates constant thrust magnitude settings. The specific impulse to use for the thrust is
      also supplied when applying a mass rate model in the propagation of the vehicle dynamics, relating the thrust
      to the mass decrease of the vehicle.

    parameters:
      - name: thrustMagnitude # [cpp]
        type: double # [cpp]
      - name: thrust_magnitude # [py]
        type: float # [py]
        description: Value of the constant thrust magnitude.

      - name: specificImpulse # [cpp]
        type: double # [cpp]
      - name: specific_impulse # [py]
        type: float # [py]
        description: Value of the constant specific impulse, used to link the thrust model to the mass propagation.

      - name: bodyFixedThrustDirection # [cpp]
        type: Eigen::Vector3d, default=Eigen::Vector3d::UnitX() # [cpp]
      - name: body_fixed_thrust_direction # [py]
        type: numpy.ndarray, default=numpy.ndarray([])  # [py]
        description: Constant body-fixed thrust direction (positive x-direction by default). Note that this should be a unit-vector representing the direction opposite to the nozzle direction.

    returns:
        type: ConstantThrustMagnitudeSettings
        description: Constant thrust magnitude settings object.


  # Custom thrust magnitude
  - name: fromFunctionThrustMagnitudeSettings # [cpp]
  - name: custom_thrust_magnitude # [py]
    short_summary: "Create thrust magnitude settings from a custom thrust magnitude function."
    extended_summary: |
      Factory function that creates thrust magnitude from a custom thrust magnitude function.
      This model defines a thrust force and specific impulse that can vary with time. The specific impulse is also
      provided to apply a mass rate model in the propagation the vehicle dynamics, relating the thrust to the mass
      decrease of the vehicle. Note that, if you wish to use a constant value for any or all of the first three
      arguments, lambda expression can be used. Presently, the definition of the thrust direction in the body-fixed
      frame is also defined through these derived classes. In essence, the ThrustMagnitudeSettings defines all local
      (to the vehicle systems) settings for the thrust, while ThrustDirectionGuidanceSettings defines how the full
      vehicle must orient itself in space for the required thrust direction to be achieved. At present, there is no
      direct option for thrust-vector control (i.e. modifying the thrust direction in the body-fixed frame).

    parameters:
      - name: thrustMagnitudeFunction # [cpp]
        type: std::function<double(double)> # [cpp]
      - name: thrust_magnitude_function # [py]
        type: Callable[[float], float] # [py]
        description: Function of time returning the value of the thrust magnitude.

      - name: specificImpulseFunction # [cpp]
        type: std::function<double(double)> # [cpp]
      - name: specific_impulse_function # [py]
        type: Callable[[float], float] # [py]
        description: Function of time returning the value of the specific impulse, useful to link the mass propagation to the thrust model.

      - name: isEngineOnFunction # [cpp]
        type: std::function<bool(double)>, default=[](double){return true;} # [cpp]
      - name: is_engine_on_function # [py]
        type: "Callable[[float], bool], default=lambda t: true"  # [py]
        description: Function of time returning a boolean, denoting  whether the thrust should be engaged at all (e.g. thrust is 0 N if it returns false). It is useful to link the mass propagation to the thrust model.

      - name: bodyFixedThrustDirection # [cpp]
        type: std::function<Eigen::Vector3d()>, , default=[](){return Eigen::Vector3d::UnitX();} # [cpp] # [cpp]
      - name: body_fixed_thrust_direction # [py]
      - name: "Callable[[], numpy.ndarray], default=lambda t: numpy.ndarray([])" # [py]
        description: Constant body-fixed thrust direction (positive x-direction by default). Note that this function should be a unit-vector representing the direction opposite to the nozzle direction. This setting can be used to incorporate thrust-vector control (TVC) into the thrust.

      - name: customThrustResetFunction # [cpp]
        type: std::function<void(const double)>, default=std::function<void(const double)>() # [cpp]
      - name: custom_thrust_reset_function # [py]
        type: "Callable[[float], ], default=lambda t: None" # [py]
        description: Function of time that updates any relevant aspects of the environment/system models, called before retrieving the thrust magnitude, specific impulse, and body-fixed thrust direction.

    returns:
        type: FromFunctionThrustMagnitudeSettings
        description: From function thrust magnitude settings object.

description: "This module provides the functionality for creating rotation model objects."
notes: "None"

# documentation of classes and functions are made distinct to perform
# sanity checks on the provided fields below. i.e. Class constructors don't need the return detailed.

# includes content for
# -- Rotation Models (expose_rotation_model_setup) [done]
# -- Gravity Field Models (expose_gravity_field_setup) [WIP]
# -- Ephemeris Models (expose_ephemeris_setup) [WIP]





# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
################## Rotation Model Setup ( createRotationalModel.h ) ###################################################
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# enums
#      py::enum_<tss::RotationModelType>
#      py::enum_<tba::IAUConventions>


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
################## Gravity Field Setup ( createGravityField.h ) #######################################################
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# enums
#       py::enum_<tss::GravityFieldType>
#       py::enum_<tss::SphericalHarmonicsModel>


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
############# Ephemeris Models ( approximatePlanetPositionsBase.h, createEphemeris.h ) ################################
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# enums
#    py::enum_<te::ApproximatePlanetPositionsBase::BodiesWithEphemerisData>





classes:

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ################## Rotation Model Setup ( createRotationalModel.h ) #################################################
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


  # base class:

  - name: RotationModelSettings
    short_summary: "Base class for providing settings for automatic rotation model creation."
    extended_summary: |
      This class is a functional base class for settings of rotation models that require no information in addition to their type.
      Basic rotation model has constant orientation of the rotation axis (body-fixed z-axis) and constant rotation rate about this axis.
      Rotation models requiring additional information must be created using the factory functions which create the specific object derived from this base class.

    attributes: # [py]
      - name: rotation_type # [py] # readonly
        type: RotationModelType # [py]
        description: Type of rotation model that is to be created. # [py]

      - name: base_frame # [py]
        type: str # [py]
        description: Base frame of rotation model. # [py]

      - name: target_frame # [py] # readonly
        type: str # [py]

    methods:
#      - name: __init__ # [py]
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for rotation models should be instantiated through the factory functions of a derived class." # [cpp]

      - name: getRotationType # [cpp]
        short_summary: "Retrieve rotation model type." # [cpp]
        extended_summary: "Function to retrieve the type of rotation model that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: RotationModelType # [cpp]
            description: Type of rotation model that is to be created. # [cpp]

      - name: getOriginalFrame # [cpp]
        short_summary: "Retrieve base frame." # [cpp]
        extended_summary: "Function to retrieve the base frame of rotation model that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: std::string # [cpp]
            description: Base frame of rotation model. # [cpp]

      - name: getTargetFrame # [cpp]
        short_summary: "Retrieve target frame." # [cpp]
        extended_summary: "Function to retrieve the target frame of rotation model that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: std::string # [cpp]
            description: Target frame of rotation model. # [cpp]

      - name: resetOriginalFrame # [cpp]
        short_summary: "Reset base frame." # [cpp]
        extended_summary: "Function to reset the orientation of the base frame." # [cpp]
        parameters: # [cpp]
          - name: originalFrame # [cpp]
            type: std::string # [cpp]
            description: Base frame of rotation model that is to be defined by the settings object. # [cpp]


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ################## Gravity Field Setup ( createGravityField.h ) #####################################################
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# base class:

  - name: GravityFieldSettings
    short_summary: "Base class for providing settings for automatic gravity field model creation."
    extended_summary: |
      This class is a functional base class for settings of gravity field models that require no information in addition to their type.
      Gravity field model classes requiring additional information must be created using an object derived from this class.

    attributes: # [py]
      - name: gravity_field_type # [py] # readonly
        type: GravityFieldType # [py]
        description: Type of gravity field model that is to be created. # [py]

    methods:
      - name: __init__ # [py]
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for gravity field models should be instantiated through the factory functions of a derived class." # [cpp]

      - name: getGravityFieldType # [cpp]
        short_summary: "Retrieve gravity field type." # [cpp]
        extended_summary: "Function to retrieve the type of gravity field that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - name: gravityFieldType # [cpp]
            type: GravityFieldType # [cpp]

  # derived classes:

  - name: CentralGravityFieldSettings
    short_summary: "`GravityFieldSettings` derived class defining settings of point mass gravity field."
    extended_summary: |
      Derived class of `GravityFieldSettings` for central gravity fields, which are defined by a single gravitational parameter.

    attributes: # [py]
      - name: gravitational_parameter # [py]
        type: float # [py]
        description: Gravitational parameter of central gravity field. # [py]

    methods: # [cpp]
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `CentralGravityFieldSettings` class should be created through the `centralGravitySettings` factory function." # [cpp]
#      - name: __init__ # [py]
#        short_summary: "Constructor." # [py]
#        extended_summary: "Instances of the `CentralGravityFieldSettings` class should be created through the `central` factory function." # [py]

      - name: getGravitationalParameter # [cpp]
        short_summary: "Retrieve gravitational parameter." # [cpp]
        extended_summary: "Function to retrieve gravitational parameter of the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: double # [cpp]
            description: Gravitational parameter of central gravity field. # [cpp]

      - name: resetGravitationalParameter # [cpp]
        short_summary: "Reset gravitational parameter." # [cpp]
        extended_summary: "Function to reset gravitational parameter of the settings object." # [cpp]
        parameters: # [cpp]
          - name: gravitationalParameter # [cpp]
            type: double # [cpp]
            description: Gravitational parameter of central gravity field that is to be defined by the settings object. # [cpp]


  - name: SphericalHarmonicsGravityFieldSettings
    short_summary: "`GravityFieldSettings` derived class defining settings of spherical harmonic gravity field representation."
    extended_summary: |
      Derived class of `GravityFieldSettings` for gravity fields, which are defined by a spherical harmonic gravity field representation.

    attributes: # [py]
      - name: gravitational_parameter # [py]
        type: float # [py]
        description: Gravitational parameter of gravity field. # [py]

      - name: reference_radius # [py] # readonly
        type: float # [py]
        description: Reference radius of spherical harmonic field expansion. # [py]

      - name: normalized_cosine_coefficients # [py]
        type: numpy.ndarray # [py]
        description: Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j. # [py]

      - name: normalized_sine_coefficients # [py]
        type: numpy.ndarray # [py]
        description: Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j. # [py]

      - name: associated_reference_frame # [py]
        type: str # [py]
        description: Identifier for body-fixed reference frame with which the coefficients are associated. # [py]

      - name: create_time_dependent_field # [py]
        type: bool # [py]
        description: Boolean that denotes whether the field should be created as time-dependent (even if no variations are imposed intially). # [py]

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `SphericalHarmonicsGravityFieldSettings` class should be created through the `sphericalHarmonicsGravitySettings` factory function." # [cpp]
#      - name: __init__ # [py]
#        short_summary: "Constructor." # [py]
#        extended_summary: "Instances of the `SphericalHarmonicsGravityFieldSettings` class should be created through the `spherical_harmonic` factory function." # [py]

      - name: getGravitationalParameter # [cpp]
        short_summary: "Retrieve gravitational parameter." # [cpp]
        extended_summary: "Function to retrieve gravitational parameter of the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: double # [cpp]
            description: Gravitational parameter of gravity field. # [cpp]

      - name: resetGravitationalParameter # [cpp]
        short_summary: "Reset gravitational parameter." # [cpp]
        extended_summary: "Function to reset gravitational parameter of the settings object." # [cpp]
        parameters: # [cpp]
          - name: gravitationalParameter # [cpp]
            type: double # [cpp]
            description: Gravitational parameter of gravity field that is to be created from the settings object. # [cpp]

      - name: getReferenceRadius # [cpp]
        short_summary: "Retrieve reference radius." # [cpp]
        extended_summary: "Function to retrieve the reference radius (of the spherical harmonics field expansion) from the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: double # [cpp]
            description: Reference radius of spherical harmonic field expansion. # [cpp]

      - name: getCosineCoefficients # [cpp]
        short_summary: "Retrieve cosine coefficients." # [cpp]
        extended_summary: "Function to retrieve the (geodesy normalized) cosine spherical harmonic coefficients from the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: Eigen::MatrixXd # [cpp]
            description: Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j. # [cpp]

      - name: resetCosineCoefficients # [cpp]
        short_summary: "Reset cosine coefficients." # [cpp]
        extended_summary: "Function to reset the (geodesy normalized) cosine spherical harmonic coefficients of the settings object." # [cpp]
        parameters: # [cpp]
          - name: cosineCoefficients # [cpp]
            type: Eigen::MatrixXd # [cpp]
            description: Cosine spherical harmonic coefficients (geodesy normalized) of the gravity field that is to be created from the setings object. Entry (i,j) denotes coefficient at degree i and order j. # [cpp]


      - name: getSineCoefficients # [cpp]
        short_summary: "Retrieve sine coefficients." # [cpp]
        extended_summary: "Function to retrieve the (geodesy normalized) sine spherical harmonic coefficients from the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: Eigen::MatrixXd # [cpp]
            description: Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j. # [cpp]

      - name: resetSineCoefficients # [cpp]
        short_summary: "Reset sine coefficients." # [cpp]
        extended_summary: "Function to reset the (geodesy normalized) sine spherical harmonic coefficients of the settings object." # [cpp]
        parameters: # [cpp]
          - name: sineCoefficients # [cpp]
            type: Eigen::MatrixXd # [cpp]
            description: Sine spherical harmonic coefficients (geodesy normalized) of the gravity field that is to be created from the setings object. Entry (i,j) denotes coefficient at degree i and order j. # [cpp]

      - name: getAssociatedReferenceFrame # [cpp]
        short_summary: "Retrieve associated reference frame." # [cpp]
        extended_summary: "Function to retrieve the reference frame with which the spherical harmonics coefficients of the settings object are associated." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: std::string # [cpp]
            description: Identifier for body-fixed reference frame with which the spherical harmonics coefficients of the settings object are associated. # [cpp]

      - name: resetAssociatedReferenceFrame # [cpp]
        short_summary: "Reset associated reference frame." # [cpp]
        extended_summary: "Function to reset the reference frame with which the spherical harmonics coefficients of the settings object are associated." # [cpp]
        parameters: # [cpp]
          - name: associatedReferenceFrame # [cpp]
            type: std::string # [cpp]
            description: Identifier for body-fixed reference frame with which the spherical harmonics coefficients of the settings object are associated. # [cpp]

      - name: getCreateTimeDependentField # [cpp]
        short_summary: "Check whether the field should be created as time-dependent." # [cpp]
        extended_summary: "Function to retrieve boolean that denotes whether the settings object sets the gravity field to be created as time-dependent." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: bool # [cpp]
            description: Boolean that denotes whether the field should be created as time-dependent (even if no variations are imposed intially). # [cpp]

      - name: setCreateTimeDependentField # [cpp]
        short_summary: "Set whether field is created as time-dependent." # [cpp]
        extended_summary: "Function to set boolean that denotes whether the settings object sets the gravity field to be created as time-dependent." # [cpp]
        parameters: # [cpp]
          - name: CreateTimeDependentField # [cpp]
            type: bool # [cpp]
            description: Boolean that denotes whether the field should be created as time-dependent (even if no variations are imposed intially). # [cpp]


# skip for now
#  - name: FromFileSphericalHarmonicsGravityFieldSettings
#    short_summary: "`SphericalHarmonicsGravityFieldSettings` derived class defining settings from a spherical harmonics model file."


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ############# Ephemeris Models ( approximatePlanetPositionsBase.h, createEphemeris.h ) ##############################
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  - name: EphemerisSettings
    short_summary: "Base class for providing settings for ephemeris model."
    extended_summary: |
      Functional (base) class for settings of ephemeris models that require no information in addition to their type (and frame origin and orientation).
      Ephemeris model classes requiring additional information must be created using an object derived from this class.

    attributes: # [py]
      - name: ephemeris_type # [py] # readonly
        type: EphemerisType # [py]
        description: Type of ephemeris that is to be created. # [py]

      - name: frame_origin # [py]
        type: str # [py]
        description: Origin of frame in which ephemeris data is to be defined. # [py]

      - name: frame_orientation # [py]
        type: str # [py]
        description: Orientation of frame in which ephemeris data is to be defined. # [py]

      - name: make_multi_arc_ephemeris # [py]
        type: bool # [py]
        description: Boolean denoting whether the ephemeris that is to be created is a multi-arc ephemeris. # [py]


    methods:
      - name: ctor # [cpp]
#      - name: __init__ # [py]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for ephemerides should be instantiated through the factory functions of a derived class." # [cpp]

      - name: getEphemerisType # [cpp]
        short_summary: "Retrieve ephemeris type." # [cpp]
        extended_summary: "Function to retrieve the type of ephemeris that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: EphemerisType # [cpp]
            description: Type of ephemeris that is to be created. # [cpp]

      - name: getFrameOrigin # [cpp]
        short_summary: "Retrieve frame origin." # [cpp]
        extended_summary: "Function to retrieve the frame origin of the ephemeris that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: std::string # [cpp]
            description: Ephemeris frame origin. # [cpp]

      - name: getFrameOrientation # [cpp]
        short_summary: "Retrieve frame orientation." # [cpp]
        extended_summary: "Function to retrieve the frame orientation of the ephemeris that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: std::string # [cpp]
            description: Ephemeris frame orientation. # [cpp]

      - name: getMultiArcEphemeris # [cpp]
        short_summary: "Check whether the ephemeris that is to be created is a multi-arc ephemeris." # [cpp]
        extended_summary: "Function to retrieve boolean denoting whether the ephemeris that is to be created is a multi-arc ephemeris." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: std::string # [cpp]
            description: Boolean denoting whether the ephemeris that is to be created is a multi-arc ephemeris. # [cpp]

      - name: resetFrameOrigin # [cpp]
        short_summary: "Reset frame origin." # [cpp]
        extended_summary: "Function to reset the frame origin of the ephemeris that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: frameOrigin # [cpp]
            type: std::string # [cpp]
            description: Ephemeris frame origin. # [cpp]

      - name: resetFrameOrientation # [cpp]
        short_summary: "Reset frame orientation." # [cpp]
        extended_summary: "Function to reset the frame orientation of the ephemeris that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: frameOrientation # [cpp]
            type: std::string # [cpp]
            description: Ephemeris frame orientation. # [cpp]

      - name: resetMakeMultiArcEphemeris # [cpp]
        short_summary: "Set whether the ephemeris that is to be created is a multi-arc ephemeris." # [cpp]
        extended_summary: "Function to reset boolean denoting whether the ephemeris that is to be created is a multi-arc ephemeris." # [cpp]
        parameters: # [cpp]
          - name: makeMultiArcEphemeris # [cpp]
            type: std::string # [cpp]
            description: Boolean denoting whether the ephemeris that is to be created is a multi-arc ephemeris. # [cpp]


  # derived classes:
  - name: ScaledEphemerisSettings
    short_summary: "Class for defining settings from scaling existing ephemeris settings."
    extended_summary: "`EphemerisSettings` derived class for a new ephemeris created from scaling an existing ephemeris settings object. It allows the user to apply a scaling factor to the resulting Cartesian states (for instance for an uncertainty analysis)."

    # class is not exposed as class in tudatpy
    # attributes:

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `ScaledEphemerisSettings` class should be created through the `scaledEphemerisSettings` factory functions." # [cpp]
#      - name: __init__ # [py]
#        short_summary: "Constructor."
#        extended_summary: "Instances of the `ScaledEphemerisSettings` class should be created through the `scaled` factory functions." # [py]

      - name: getBaseSettings # [cpp]
        short_summary: "Retrieve base settings of (un)scaled ephemeris." # [cpp]
        extended_summary: "Function to retrieve the base settings (frame origin and orientation) of (un)scaled ephemeris." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: std::shared_ptr< EphemerisSettings > # [cpp]
            description: Base settings (frame origin and orientation) of (un)scaled ephemeris. # [cpp]

      - name: getScaling # [cpp]
        short_summary: "Retrieve scaling factor(s)." # [cpp]
        extended_summary: | # [cpp]
          Function to retrieve the scaling factor(s). Can be constant factor for all elements of Cartesian state, constant factor for each Cartesian state or even custom time-dependent function for scaling factors for each Cartesian state. # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: double, Eigen::Vector6d, std::function< Eigen::Vector6d( const double ) > # [cpp]
            description: Scaling factor(s) for ephemeris scaling. # [cpp]

      - name: getIsScalingAbsolute # [cpp]
        short_summary: "Check whether ephemeris scaling is absolute." # [cpp]
        extended_summary: | # [cpp]
          Function to retrieve the boolean indicating whether ephemeris scaling is absolute. When set to true (default false), the scaling factors will be interpreted as values and added to the state. # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: bool # [cpp]
            description: Boolean indicating whether ephemeris scaling is absolute. # [cpp]


  - name: DirectSpiceEphemerisSettings
    short_summary: "Class for defining settings of an ephemeris linked directly to Spice."
    extended_summary: "`EphemerisSettings` derived class for ephemeris which are directly linked to Spice."

    attributes: # [py]
      - name: correct_for_stellar_aberration # [py] # readonly
        type: bool # [py]
        description: Boolean defining whether to correct for stellar abberations in retrieved values (of observed state). # [py]

      - name: correct_for_light_time_aberration # [py] # readonly
        type: bool # [py]
        description: Boolean defining whether to correct for light time in retrieved values (of observed state). # [py]

      - name: converge_light_time_aberration # [py] # readonly
        type: bool # [py]
        description: Boolean defining whether to use single iteration or max. 3 iterations for calculating light time correction. # [py]

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `DirectSpiceEphemerisSettings` class should be created through the `directSpiceEphemerisSettings` factory function." # [cpp]
#      - name: __init__ # [py]
#        short_summary: "Constructor." # [py]
#        extended_summary: "Instances of the `DirectSpiceEphemerisSettings` class should be created through the `direct_spice` factory function." # [py]

      - name: getCorrectForStellarAberration # [cpp]
        short_summary: "Check whether to correct for stellar aberration." # [cpp]
        extended_summary: | # [cpp]
          Function to retrieve the boolean which indicates whether to correct for stellar aberration in retrieved values (of observed state). # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: bool # [cpp]
            description: Boolean defining whether to correct for stellar abberations in retrieved values (of observed state). # [cpp]

      - name: getCorrectForLightTimeAberration # [cpp]
        short_summary: "Check whether to correct for light time aberration." # [cpp]
        extended_summary: | # [cpp]
          Function to retrieve the boolean which indicates whether to correct for light time abberation in retrieved values (of observed state). # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: bool # [cpp]
            description: Boolean defining whether to correct for light time abberations in retrieved values (of observed state). # [cpp]

      - name: getConvergeLighTimeAberration # [cpp]
        short_summary: "Check whether to use iterative solution for light time." # [cpp]
        extended_summary: | # [cpp]
          Function to retrieve the boolean which indicates whether to use single iteration or max. 3 iterations for calculating light time. # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: bool # [cpp]
            description: Boolean defining whether to use single iteration or max. 3 iterations for calculating light time. # [cpp]



  - name: InterpolatedSpiceEphemerisSettings
    short_summary: "Class for defining settings of an ephemeris interpolated from Spice data."
    extended_summary: "`DirectSpiceEphemerisSettings` derived class for setting ephemerides to be created from interpolated Spice ephemeris data."

    attributes: # [py]
      - name: initial_time # [py] # readonly
        type: float # [py]
        description: "Initial time from which interpolated data from Spice should be created." # [py]

      - name: final_time # [py] # readonly
        type: float # [py]
        description: "Final time from which interpolated data from Spice should be created." # [py]

      - name: time_step # [py] # readonly
        type: float # [py]
        description: "Time step setting to be used for the state interpolation." # [py]


    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `InterpolatedSpiceEphemerisSettings` class should be created through the `interpolatedSpiceEphemerisSettings` factory function." # [cpp]
#      - name: __init__ # [py]
#        short_summary: "Constructor." # [py]
#        extended_summary: "Instances of the `InterpolatedSpiceEphemerisSettings` class should be created through the `interpolated_spice` factory function." # [py]

      - name: getInitialTime # [cpp]
        short_summary: "Retrieve initial time of interpolation." # [cpp]
        extended_summary: "Function to retrieve initial time from which interpolated data from Spice should be created." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: double # [cpp]
            description: "Initial time from which interpolated data from Spice should be created." # [cpp]

      - name: getFinalTime # [cpp]
        short_summary: "Retrieve final time of interpolation." # [cpp]
        extended_summary: "Function to retrieve final time from which interpolated data from Spice should be created." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: double # [cpp]
            description: "Final time from which interpolated data from Spice should be created." # [cpp]

      - name: getTimeStep # [cpp]
        short_summary: "Retrieve time step used for interpolation." # [cpp]
        extended_summary: "Function to retrieve time step setting to be used for the state interpolation." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: double # [cpp]
            description: "Time step setting to be used for the state interpolation." # [cpp]


  - name: ApproximatePlanetPositionSettings
    short_summary: "Class for creating settings of approximate ephemeris for major planets."
    extended_summary: "`EphemerisSettings` derived class for approximate ephemeris for major planets as inplemented in ApproximatePlanetPositions class and derived class (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf)."

    attributes: # [py]
      - name: body_identifier # [py] # readonly
        # (%! unable to find translated type in tudatpy) type: ephemerides::ApproximatePlanetPositionsBase::BodiesWithEphemerisData
        description: "Type Parameter identifying for which body an ephemeris is to be created." # [py]

      - name: use_circular_coplanar_approximation # [py] # readonly
        type: bool # [py]
        description: "Boolean defining whether a circular coplanar orbit of the body is to be assumed." # [py]

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `ApproximatePlanetPositionSettings` class should be created through the `approximatePlanetPositionsSettings` factory function." # [cpp]
#      - name: __init__ # [py]
#        short_summary: "Constructor." # [py]
#        extended_summary: "Instances of the `ApproximatePlanetPositionSettings` class should be created through the `approximate_planet_positions` factory function." # [py]


      - name: getBodyIdentifier # [cpp]
        short_summary: "Retrieve identifier for which body an ephemeris is to be created." # [cpp]
        extended_summary: "Function to retrieve parameter identifying for which body an ephemeris is to be created." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: ephemerides::ApproximatePlanetPositionsBase::BodiesWithEphemerisData # [cpp]
            description: "Type Parameter identifying for which body an ephemeris is to be created." # [cpp]

      - name: getUseCircularCoplanarApproximation # [cpp]
        short_summary: "Check weather a circular coplanar orbit of the body is to be assumed." # [cpp]
        extended_summary: | # [cpp]
          Function to retrieve parameter indicating whether a circular, coplanar orbit of the body is to be assumed. # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: bool # [cpp]
            description: "Boolean defining whether a circular coplanar orbit of the body is to be assumed." # [cpp]


  - name: ConstantEphemerisSettings
    short_summary: "Class for defining settings of constant ephemerides."
    extended_summary: "`EphemerisSettings` derived class for ephemerides producing a constant (time-independent) state."

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `ConstantEphemerisSettings` class should be created through the `constantEphemerisSettings` factory function." # [cpp]
#      - name: __init__ # [py]
#        short_summary: "Constructor." # [py]
#        extended_summary: "Instances of the `ConstantEphemerisSettings` class should be created through the `constant` factory function." # [py]


      - name: getConstantState # [cpp]
        short_summary: "Retrieve the constant state." # [cpp]
        extended_summary: "Function to retrieve the constant (time-independent) state that defines the ephemeris to be created." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: Eigen::Vector6d # [cpp]
            description: "Constant (time-independent) state that defines the ephemeris to be created." # [cpp]


  - name: CustomEphemerisSettings
    short_summary: "Class for defining settings of a custom ephemeris."
    extended_summary: "`EphemerisSettings` derived class for ephemerides producing a custom state (e.g. arbitrary state as a function of time)."

    attributes: # [py]
      - name: custom_state_function # [py] # readonly
        # (%! unable to formulate that type in tudatpy) type: std::function< Eigen::Vector6d >
        description: "Function returning the state as a function of time." # [py]

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `CustomEphemerisSettings` class should be created through the `customEphemerisSettings` factory function." # [cpp]
#      - name: __init__ # [py]
#        short_summary: "Constructor." # [py]
#        extended_summary: "Instances of the `CustomEphemerisSettings` class should be created through the `custom` factory function." # [py]


      - name: getCustomStateFunction # [cpp]
        short_summary: "Retrieve the function returning the state as a function of time." # [cpp]
        extended_summary: "Function to retrieve the function returning the state as a function of time." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: std::function< Eigen::Vector6d > # [cpp]
            description: "Function returning the state as a function of time." # [cpp]


  - name: KeplerEphemerisSettings # [cpp]
    short_summary: "Class for defining settings of an ideal Kepler orbit ephemeris." # [cpp]
    extended_summary: "`EphemerisSettings` derived class for ephemerides which represent an ideal Kepler orbit."

    attributes: # [py]
      - name: initial_state_in_keplerian_elements # [py] # readonly
        type: numpy.ndarray # [py]
        description: "Kepler elements at time epochOfInitialState." # [py]
      - name: epoch_of_initial_state # [py] # readonly
        type: float # [py]
        description: "Time at which initialStateInKeplerianElements represents the Keplerian state." # [py]
      - name: central_body_gravitational_parameter # [py] # readonly
        type: float # [py]
        description: "Gravitational parameter of the central body that is used in the computations." # [py]
      - name: root_finder_absolute_tolerance # [py] # readonly
        type: float # [py]
        description: "Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState." # [py]
      - name: root_finder_maximum_number_of_iterations # [py] # readonly
        type: float # [py]
        description: "Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState." # [py]

    methods:

      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `KeplerEphemerisSettings` class should be created through the `keplerEphemerisSettings` or `keplerEphemerisFromSpiceSettings` factory function." # [cpp]
#      - name: __init__ # [py]
#        short_summary: "Constructor." # [py]
#        extended_summary: "Instances of the `KeplerEphemerisSettings` class should be created through the `keplerian` or `keplerian_from_spice` factory function." # [py]


      - name: getInitialStateInKeplerianElements # [cpp]
        short_summary: "Retrieve the kepler elements at time epochOfInitialState." # [cpp]
        extended_summary: "Function to retrieve the kepler elements at time epochOfInitialState." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: Eigen::Vector6d # [cpp]
            description: "Kepler elements at time epochOfInitialState." # [cpp]

      - name: getEpochOfInitialState # [cpp]
        short_summary: "Retrieve the initial epoch of propagation." # [cpp]
        extended_summary: "Function to retrieve the initial epoch from which propagation of Kepler orbit is performed." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: double # [cpp]
            description: "Time at which initialStateInKeplerianElements represents the Keplerian state." # [cpp]

      - name: getCentralBodyGravitationalParameter # [cpp]
        short_summary: "Retrieve the gravitational parameter of central body." # [cpp]
        extended_summary: "Function to retrieve the gravitational parameter of central body about which the Kepler orbit is defined." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: double # [cpp]
            description: "Gravitational parameter of the central body that is used in the computations." # [cpp]

      - name: getRootFinderAbsoluteTolerance # [cpp]
        short_summary: "Retrieve convergence tolerance for anomaly conversion." # [cpp]
        extended_summary: "Function to retrieve the convergence tolerance for root finder used to convert mean to eccentric anomaly." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: double # [cpp]
            description: "Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState." # [cpp]

      - name: getRootFinderMaximumNumberOfIterations # [cpp]
        short_summary: "Retrieve the maximum number of iteration for anomaly conversion." # [cpp]
        extended_summary: "Function to retrieve the maximum number of iteration for root finder used to convert mean to eccentric anomaly." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: double # [cpp]
            description: "Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState." # [cpp]


  - name: TabulatedEphemerisSettings
    short_summary: "Class for defining settings of ephemeris to be created from tabulated data."
    extended_summary: "`EphemerisSettings` derived class for ephemeris created from tabulated data. The provided data is interpolated into ephemerides."

    attributes: # [py]
      - name: body_state_history # [py] # readonly
        type: dict # [py]
        description: Dictionary of the discrete state history data from which ephemeris is to be created. Keys representing the time (float) and values representing Cartesian states (numpy.ndarray). # [py]
      - name: use_long_double_states # [py]
        type: bool # [py]
        description: Boolean defining whether increased numerical precision (long double type) is to be used when creating the ephemeris. # [py]

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `TabulatedEphemerisSettings` class should be created through the `tabulatedEphemerisSettings` factory function." # [cpp]
#      - name: __init__ # [py]
#        short_summary: "Constructor."  # [py]
#        extended_summary: "Instances of the `TabulatedEphemerisSettings` class should be created through the `tabulated` factory function." # [py]

      - name: getBodyStateHistory # [cpp]
        short_summary: "Retrieve body state history." # [cpp]
        extensive_summary: "Function to retrieve data map defining discrete state history data from which ephemeris is to be created." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: std::map< double, Eigen::Vector6d > # [cpp]
            description: Data map defining discrete data from which an ephemeris is to be created. # [cpp]

      - name: setUseLongDoubleStates # [cpp]
        short_summary: "Set whether increased numerical precision is used." # [cpp]
        extended_summary: "Function to set boolean indicating whether increased numerical precision (long double type) is to be used when creating the ephemeris." # [cpp]
        parameters: # [cpp]
          - name: useLongDoubleStates # [cpp]
            type: bool # [cpp]
            description: Boolean indicating whether increased numerical precision (long double type) is to be used when creating the ephemeris. # [cpp]




functions:


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ################## Rotation Model Setup ( createRotationalModel.h ) ###################################################
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


  # functions:

  #      (what to do with this one? - not exposed in tudatpy)
  #      std::shared_ptr< ephemerides::RotationalEphemeris > createRotationModel(
  #             const std::shared_ptr< RotationModelSettings > rotationModelSettings,
  #             const std::string& body,
  #             const SystemOfBodies& bodies = SystemOfBodies( ) );


  # factory functions:

  - name: simpleRotationModelSettings # [cpp]     # overload cpp
    short_summary: "Factory function for creating simple rotation model settings." # [cpp]
    extended_summary: | # [cpp]
      Factory function for settings object, defining a basic rotation model with constant orientation of the rotation axis and constant rotation rate about this axis. # [cpp]
      Rotation from original (inertial) to target (body-fixed) frame at some reference time ``initial_time`` is defined by the ``initial_orientation`` rotation matrix. # [cpp]
      Rotation about the body-fixed z-axis is defined by the ``rotation_rate`` float variable (in rad/s). # [cpp]
      This function creates an instance of a `RotationModelSettings` derived `simpleRotationModelSettings` object. # [cpp]

    parameters: # [cpp]

      - name: originalFrame # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model. # [cpp]

      - name: target_frame # [cpp]
        type: std::string # [cpp]
        description: Target frame of rotation model. # [cpp]

      - name: initialOrientation # [cpp]
        type: Eigen::Quaterniond # [cpp]
        description: Orientation of target frame in base frame at initial time. # [cpp]


      - name: initialTime # [cpp]
        type: double # [cpp]
        description: Initial time (reference epoch for rotation matrices). # [cpp]


      - name: rotationRate # [cpp]
        type: double # [cpp]
        description: Constant rotation rate [rad/s] about rotational axis. # [cpp]

    returns: # [cpp]
      - type: SimpleRotationModelSettings # [cpp]
        description: Simple rotation model settings object (derived from `RotationModelSettings` base class). # [cpp]


  - name: simple # [py]
  - name: simpleRotationModelSettings # [cpp]     # overload 1, cpp only
    short_summary: "Factory function for creating simple rotation model settings."
    extended_summary: |
      Factory function for settings object, defining a basic rotation model with constant orientation of the rotation axis and constant rotation rate about this axis.
      Rotation from original (inertial) to target (body-fixed) frame at some reference time ``initial_time`` is defined by the ``initial_orientation`` rotation matrix.
      Rotation about the body-fixed z-axis is defined by the ``rotation_rate`` float variable (in rad/s).
      This function creates an instance of a `RotationModelSettings` derived `simpleRotationModelSettings` object.

    parameters:
      - name: base_frame # [py]
        type: str # [py]
      - name: originalFrame # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: target_frame # [cpp]
        type: std::string # [cpp]
        description: Target frame of rotation model.

      - name: initial_orientation # [py]
        type: numpy.ndarray # [py]
      - name: initialOrientation # [cpp]
        type: Eigen::Matrix3d # [cpp]
        description: Orientation of target frame in base frame at initial time.

      - name: initial_time # [py]
        type: float # [py]
      - name: initialTime # [cpp]
        type: double # [cpp]
        description: Initial time (reference epoch for rotation matrices).

      - name: rotation_rate # [py]
        type: float # [py]
      - name: rotationRate # [cpp]
        type: double # [cpp]
        description: Constant rotation rate [rad/s] about rotational axis.

    returns:
      - type: SimpleRotationModelSettings
        description: Simple rotation model settings object (derived from `RotationModelSettings` base class).


  - name: simple_from_spice # [py]
  - name: simpleRotationModelFromSpiceSettings # [cpp]
    short_summary: "Factory function for creating simple rotation model settings using initial orientation and rotaton rates from Spice."
    extended_summary: |
      Factory function for settings object, defining a simple rotation model with the added functionality that the initial orientation and rotation rate are extracted from Spice, as opposed to provided manually.
      Note that *only* the initial orientation and rotation rate ( at the time defined by `initial_time` ) are extracted from Spice.
      The distinction between the two target frame inputs is the following

        - the ``target_frame`` parameter is the name of frame that Tudat assigns to the body-fixed frame
        - the ``target_frame_spice`` is the name of the frame in Spice for which the initial orientation and rotation rate are extracted.

      This function creates an instance of a `RotationModelSettings` derived `simpleRotationModelSettings` object.

    parameters:
      - name: base_frame # [py]
        type: str # [py]
      - name: originalFrame # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: target_frame # [cpp]
        type: std::string # [cpp]
        description: Target frame of rotation model.

      - name: target_frame_spice # [py]
        type: str # [py]
      - name: targetFrameSpice # [cpp]
        type: std::string # [cpp]
        description: Spice reference of target frame.

      - name: initial_time # [py]
        type: float # [py]
      - name: initialTime # [cpp]
        type: double # [cpp]
        description: Initial time (reference epoch for rotation matrices).

    returns:
      - type: SimpleRotationModelSettings
        description: Simple rotation model settings object (derived from RotationModelSettings base class) with target frame info inferred from Spice.


  - name: synchronous # [py]
  - name: synchronousRotationModelSettings # [cpp]
    short_summary: "Factory function for creating synchronous rotational ephemeris settings."
    extended_summary: |
        Factory function for settings object, defining a synchronous rotation model where rotation of a body is defined from its relative orbit w.r.t. some central body. Specifically
        - the body-fixed x-axis is *always* pointing towards the central body
        - the body-fixed z-axis is *always* perpendicular to the orbital plane (along the direction of
        .. math:: \mathbf{x} \cross \mathbf{v} )
        - the body-fixed y-axis completes the right-handed reference frame

        Such a model can be useful for, for instance, approximate rotation of tidally locked natural satellites or nadir-pointing spacraft.
        This function creates an instance of a `RotationModelSettings` derived `SynchronousRotationModelSettings` object.

    parameters:
      - name: central_body_name # [py]
        type: str # [py]
      - name: centralBodyName # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model.

      - name: base_frame # [py]
        type: str # [py]
      - name: baseFrameOrientation # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: targetFrameSpice # [cpp]
        type: std::string # [cpp]
        description: Spice reference of target frame.


    returns:
      - type: SynchronousRotationModelSettings
        description: Synchonous rotation model settings object (derived from RotationModelSettings base class).


  - name: spice # [py]
  - name: spiceRotationModelSettings # [cpp]
    short_summary: "Factory function for creating rotation model settings from the Spice interface."
    extended_summary: |
      Factory function for settings object, defining a rotation model directly (and entirely) from Spice interface.
      This function creates an instance of a `RotationModelSettings` object.

    parameters:
      - name: base_frame # [py]
        type: str # [py]
      - name: baseFrame # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: targetFrame # [cpp]
        type: std::string # [cpp]
        description: Target frame of rotation model.

    returns:
      - type: RotationModelSettings
        description: Rotation model settings object inferred from Spice rotational model.


  - name: gcrs_to_itrs # [py]
  - name: gcrsToItrsRotationModelSettings # [cpp]
    short_summary: "Factory function for creating high-accuracy Earth rotation model settings."
    extended_summary: |
      Factory function for settings object, defining high-accuracy Earth rotation model according to the IERS 2010 Conventions.
      This settings class has various options to deviate from the default settings, typical applications will use default.
      Note that for this model the original frame must be J2000 or GCRS (in the case of the former, the frame bias between GCRS and J2000 is automatically corrected for). The target frame (e.g. body-fixed frame) name is ITRS.
      The precession-nutation theory may be `iau_2000a` / `iau_2000b` or `iau_2006`, as implemented in the SOFA toolbox. Alternative options to modify the input (not shown above) include the EOP correction file, input time scale, short period UT1 and polar motion variations.
      The target frame (e.g. body-fixed frame) name is ITRS.
      This function creates an instance of a `RotationModelSettings` derived `gcrsToItrsRotationModelSettings` object.

    parameters:
      - name: precession_nutation_theory # [py]
        type: default=tba::iau_2006 # [py]
      - name: nutationTheory # [cpp]
        type: basic_astrodynamics::IAUConventions default=basic_astrodynamics::iau_2006 # [cpp]
        description: |
          Setting theory for modelling Earth nutation.

      - name: base_frame # [py]
        type: str, default='GCRS' # [py]
      - name: baseFrameName # [cpp]
        type: std::string, default='GCRS' # [cpp]
        description: Base frame of rotation model

    returns:
      - type: GcrsToItrsRotationModelSettings
        description: High-accuracy Earth rotation model settings object (derived from RotationModelSettings base class).


  - name: constantRotationModelSettings # [cpp]
    short_summary: "Factory function for creating simple rotation model settings for target-frames with constant orientation." # [cpp]
    extended_summary: | # [cpp]
      Factory function for settings object, defining simple rotation model setting objects with constant rotation matrix. # [cpp]
      These model settings are for target frames which do not have a rotational rate in the base frame and are fully defined by their initial orientation. # [cpp]
      This function creates an instance of a `RotationModelSettings` derived `SimpleRotationModelSettings` object. # [cpp]

    parameters: # [cpp]

      - name: baseFrame # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model. # [cpp]

      - name: targetFrame # [cpp]
        type: std::string # [cpp]
        description: Target frame of rotation model. # [cpp]

      - name: initialOrientation # [cpp]
        type: Eigen::Quaterniond # [cpp]
        description: Orientation of target frame in base frame at initial time (constant throughout). # [cpp]

    returns: # [cpp]
      - type: SimpleRotationModelSettings # [cpp]
        description: Simple rotation model settings object (derived from RotationModelSettings base class) with constant orientation of target in base frame. # [cpp]



  - name: constant # [py]
  - name: constantRotationModelSettings # [cpp] # overload cpp
    short_summary: "Factory function for creating simple rotation model settings for target-frames with constant orientation."
    extended_summary: |
      Factory function for settings object, defining simple rotation model setting objects with constant rotation matrix.
      These model settings are for target frames which do not have a rotational rate in the base frame and are fully defined by their initial orientation.
      This function creates an instance of a `RotationModelSettings` derived `SimpleRotationModelSettings` object.

    parameters:
      - name: base_frame # [py]
        type: str # [py]
      - name: baseFrame # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: targetFrame # [cpp]
        type: std::string # [cpp]
        description: Target frame of rotation model.

      - name: initial_orientation # [py]
        type: numpy.ndarray # [py]
      - name: initialOrientation # [cpp]
        type: Eigen::Quaterniond # [cpp]
        description: Orientation of target frame in base frame at initial time (constant throughout).

    returns:
      - type: SimpleRotationModelSettings
        description: Simple rotation model settings object (derived from RotationModelSettings base class) with constant orientation of target in base frame.


  #      (what to do with this one? - not exposed in tudatpy)
  #      std::shared_ptr< ephemerides::RotationalEphemeris > createRotationModel(
  #             const std::shared_ptr< RotationModelSettings > rotationModelSettings,
  #             const std::string& body,
  #             const SystemOfBodies& bodies = SystemOfBodies( ) );



  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ################## Gravity Field Setup ( createGravityField.h ) #######################################################
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  # factory functions:

  - name: central # [py]
  - name: centralGravitySettings # [cpp]
    short_summary: "Factory function for central gravity field settings object."
    extended_summary: |
      Factory function for settings object, defining a point-mass gravity field model with user-defined gravitational parameter.
      This function returns a `GravityFieldSettings` derived `CentralGravityFieldSettings` object.
    parameters:
      - name: gravitational_parameter # [py]
        type: float # [py]
      - name: gravitationalParameter # [cpp]
        type: double # [cpp]
    returns:
      - type: CentralGravityFieldSettings
        description: "`CentralGravityFieldSettings` object defined by the provided gravitational parameter."


  - name: central_spice # [py]
  - name: centralGravityFromSpiceSettings # [cpp]
    short_summary: "Factory function to create central gravity field settings from Spice settings."
    extended_summary: |
      Factory function for settings object, defining a point-mass gravity field model with gravitational parameter from Spice.
      This function returns a `GravityFieldSettings` object of gravity field type ``central_spice``.
    parameters:
      - name: None
    returns:
      - type: GravityFieldSettings
        description: "`GravityFieldSettings` object defined by gravitational parameters from Spice settings."


  - name: spherical_harmonic # [py]
  - name: sphericalHarmonicsGravitySettings # [cpp]
    short_summary: "Factory function for creating a spherical harmonics gravity field settings object."
    extended_summary: |
      Factory function for settings object, defining a gravity field model through spherical harmonic expansion.
      The associated reference frame must presently be the same frame ID as the target frame of the body’s rotation model.
      It represents the frame in which the spherical harmonic field is defined.
      Spherical harmonic coefficients used for this environment model must *always* be fully normalized.
      To normalize unnormalized spherical harmonic coefficients, see `spherical_harmonics_normalization`.
      This function returns a `GravityFieldSettings` derived `SphericalHarmonicsGravityFieldSettings` object.

    parameters:
      - name: gravitational_parameter # [py]
        type: float # [py]
      - name: gravitationalParameter # [cpp]
        type: double # [cpp]
        description: Gravitational parameter of gravity field.

      - name: reference_radius # [py]
        type: float # [py]
      - name: referenceRadius # [cpp]
        type: double # [cpp]
        description: Reference radius of spherical harmonic field expansion.

      - name: normalized_cosine_coefficients # [py]
        type: numpy.ndarray # [py]
      - name: cosineCoefficients # [cpp]
        type: Eigen::MatrixXd # [cpp]
        description: |
          Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j.
          As such, note that entry (0,0) of cosine coefficients should be equal to 1.

      - name: normalized_sine_coefficients # [py]
        type: numpy.ndarray # [py]
      - name: sineCoefficients # [cpp]
        type: Eigen::MatrixXd # [cpp]
        description: "Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j."

      - name: associated_reference_frame # [py]
        type: str # [py]
      - name: associatedReferenceFrame # [cpp]
        type: std::string # [cpp]
        description: Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated.

    returns:
      - type: SphericalHarmonicsGravityFieldSettings
        description: "`SphericalHarmonicsGravityFieldSettings` object defined by the provided parameters."


  - name: spherical_harmonic_triaxial_body # [py]
  - name: createHomogeneousTriAxialEllipsoidGravitySettings # [cpp]
    short_summary: "Factory function for spherical harmonics gravity field settings object from triaxial ellipsoid parameters."
    extended_summary: |
      Factory function for settings object, defining a gravity field model through spherical harmonic expansion of a homogeneous triaxial ellipsoid.
      The constant mass distribution in the specified ellipsoid shape is expanded to obtain a spherical harmonic coefficient representation.
      Gravity fields from this setting object are expressed in normalized spherical harmonic coefficients.
      (%!) The x-, y- and z-axis of the ... ABC (?).
      This function returns a `GravityFieldSettings` derived `SphericalHarmonicsGravityFieldSettings` object.

    parameters:
      - name: axis_a # [py]
        type: float # [py]
      - name: axisA # [cpp]
        type: double # [cpp]
        description: Dimension of largest axis of triaxial ellipsoid.

      - name: axis_b # [py]
        type: float # [py]
      - name: axisB # [cpp]
        type: double # [cpp]
        description: Dimension of intermediate axis of triaxial ellipsoid.

      - name: axis_c # [py]
        type: float # [py]
      - name: axisC # [cpp]
        type: double # [cpp]
        description: Dimension of smallest axis of triaxial ellipsoid.

      - name: density # [py]
        type: float # [py]
      - name: ellipsoidDensity # [cpp]
        type: double # [cpp]
        description: Density of ellipsoid.

      - name: maximum_degree # [py]
        type: int # [py]
      - name: maximumDegree # [cpp]
        type: int # [cpp]
        description: Maximum degree of spherical harmonics expansion.

      - name: maximum_order # [py]
        type: int # [py]
      - name: maximumOrder # [cpp]
        type: int # [cpp]
        description: Maximum order of spherical harmonics expansion.

      - name: associated_reference_frame # [py]
        type: str # [py]
      - name: associatedReferenceFrame # [cpp]
        type: std::string # [cpp]
        description: Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated.

    returns:
      - type: SphericalHarmonicsGravityFieldSettings
        description: "`SphericalHarmonicsGravityFieldSettings` object defined by expansion of homogeneous triaxial ellipsoid."


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ############# Ephemeris Models ( approximatePlanetPositionsBase.h, createEphemeris.h ) ##############################
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  # factory functions:

  - name: directSpiceEphemerisSettings # [cpp]
    short_summary: "Factory function for creating ephemeris model settings entirely from Spice." # [cpp]
    extended_summary: | # [cpp]
      Factory function for settings object, defining ephemeris model directly and entirely from Spice. # [cpp]
      Requires an appropriate Spice kernel to be loaded. # [cpp]
      This function creates an instance of an `EphemerisSettings` derived `DirectSpiceEphemerisSettings` object. # [cpp]

    parameters: # [cpp]

      - name: frameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined." # [cpp]

      - name: frameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined." # [cpp]

      - name: correctForStellarAberration # [cpp]
        type: bool, default=false # [cpp]
        description: "Boolean whether to correct for stellar abberations in retrieved values (of observed state)." # [cpp]

      - name: correctForLightTimeAberration # [cpp]
        type: bool, default=false # [cpp]
        description: "Boolean whether to correct for light time in retrieved values (of observed state)." # [cpp]

      - name: convergeLighTimeAberration # [cpp]
        type: bool, default=false # [cpp]
        description: "Boolean whether to use single iteration or max. 3 iterations for calculating light time." # [cpp]

    returns: # [cpp]
      - type: DirectSpiceEphemerisSettings # [cpp]
        description: # [cpp]

  - name: direct_spice # [py]
  - name: directSpiceEphemerisSettings # [cpp] # overload 1
    short_summary: "Factory function for creating ephemeris model settings entirely from Spice."
    extended_summary: |
      Factory function for settings object, defining ephemeris model directly and entirely from Spice.
      Requires an appropriate Spice kernel to be loaded.
      This function creates an instance of an `EphemerisSettings` derived `DirectSpiceEphemerisSettings` object.

    parameters:
      - name: frame_origin # [py]
        type: str, default='SSB' # [py]
      - name: frameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined."

      - name: frame_orientation # [py]
        type: str, default='ECLIPJ2000' # [py]
      - name: frameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined."

      - name: body_name_to_use # [py]
        type: str, default = "" # [py]
      - name: bodyNameOverride # [cpp]
        type: std::string, default = "" # [cpp]
        description: "?"

    returns:
      - type: DirectSpiceEphemerisSettings  # [py]
        description: # [py]
      - type: DirectSpiceEphemerisSettings  # [cpp]
        description: # [cpp]


  - name: interpolated_spice # [py]
  - name: interpolatedSpiceEphemerisSettings # [cpp]
    short_summary: "Factory function for creating ephemeris model settings using interpolated Spice data."
    extended summary: |
      Factory function for settings object defining an ephemeris model from interpolated Spice data.
      Using this option the state of the body is retrieved from Spice at regular intervals *before* the environment propagation (as opposed to during the propagation).
      These data are then used to create an interpolator, which is put into the environment, and called during the propagation.
      This has the advantage of only requiring calls to Spice outside of the propagation inner loop, reducing computation time in many cases (a single call to the interpolator is significantly faster that a single call to Spice).
      However, it has the downside of being applicable only during a limited time interval, and requiring the tabulated data to be stored in RAM.
      For many numerical integration scenarios, this approach may be faster than using `DirectSpiceEphemerisSettings`, with negligible influence on accuracy.
      This function creates an instance of a `DirectSpiceEphemerisSettings` derived `InterpolatedSpiceEphemerisSettings` object.

    parameters:

      - name: initial_time # [py]
        type: float # [py]
      - name: initialTime # [cpp]
        type: double # [cpp]
        description: "Initial time from which interpolated data from Spice should be created."

      - name: final_time # [py]
        type: float # [py]
      - name: finalTime # [cpp]
        type: double # [cpp]
        description: "Final time from which interpolated data from Spice should be created."

      - name: time_step # [py]
        type: float # [py]
      - name: timeStep # [cpp]
        type: double # [cpp]
        description: "Time step with which interpolated data from Spice should be created."

      - name: frame_origin # [py]
        type: str, default='SSB' # [py]
      - name: frameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined."

      - name: frame_orientation # [py]
        type: str, default='ECLIPJ2000' # [py]
      - name: frameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined."

      - name: interpolator_settings # [py]
        type: std::make_shared< interpolators::InterpolatorSettings >, default=std::make_shared<tudat::interpolators::LagrangeInterpolatorSettings>(6))
      - name: interpolatorSettings # [cpp]
        type: std::make_shared< interpolators::InterpolatorSettings >, default=std::make_shared< interpolators::LagrangeInterpolatorSettings >( 6 )
        description: "Settings to be used for the state interpolation."

      - name: body_name_to_use # [py]
        type: str, default = "" # [py]
      - name: bodyNameOverride # [cpp]
        type: std::string, default = "" # [cpp]
        description: "?"

    returns:
      - type: InterpolatedSpiceEphemerisSettings # [py]
        description: # [py]
      - type: InterpolatedSpiceEphemerisSettings # [cpp]
        description: # [cpp]


   # (%!) confirm that the approximatePlanetPositionsSettings FF situation is documented correctly
  - name: approximatePlanetPositionsSettings # [cpp] # (%! naming is misleading - Position vs Positions)
    short_summary: "Factory function for creating approximate ephemeris model settings for major planets." # [cpp]
    extended_summary: | # [cpp]
      Factory function for settings object, defining approximate ephemeris model for major planets. # [cpp]
      In this highly simplified ephemeris model, Keplerian elements of the major solar system bodies are modelled as linear functions of time and several sinusoidal variations (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf). # [cpp]
      #(%! only given in ctor, not FF) Three-dimensional and circular-coplanar approximation may be used. # [cpp]
      This function creates an instance of an `EphemerisSettings` derived `ApproximatePlanetPositionsSettings` object. # [cpp]

    parameters: # [cpp]
      - name: bodyIdentifier # [cpp]
        type: ephemerides::ApproximatePlanetPositionsBase::BodiesWithEphemerisData # [cpp]
        description: "Identifier for the body that the ephemeris is to be created for." # [cpp]

      #- name: use_circular_coplanar_approximation # [py]
      #  type: bool, default=false # [py]
      #- name: useCircularCoplanarApproximation # [cpp]
      #  type: bool, default=false # [cpp]
      #  description: |
      #    Boolean defining whether a circular, coplanar orbit of the body is to be assumed, or whether a non-zero inclination and long-period changes in the orbit are to be included.

    returns: # [cpp]
      - type: ApproximatePlanetPositionSettings # [cpp]
        description: # [cpp]


  - name: approximate_planet_positions # [py]
  - name: approximatePlanetPositionsSettings # [cpp] # overload 1
    short_summary: "Factory function for creating approximate ephemeris model settings for major planets."
    extended_summary: |
      Factory function for settings object, defining approximate ephemeris model for major planets.
      In this highly simplified ephemeris model, Keplerian elements of the major solar system bodies are modelled as linear functions of time and several sinusoidal variations (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf).
      #(%! only given in ctor, not FF) Three-dimensional and circular-coplanar approximation may be used.
      This function creates an instance of an `EphemerisSettings` derived `ApproximatePlanetPositionsSettings` object.

    parameters:
      - name: body_name_to_use # [py]
        type: str # [py]
      - name: bodyName # [cpp]
        type: std::string # [cpp]
        description: "String that is attempted to be matched to an identifier for the body that the ephemeris is to be created for."

    returns:
      - type: ApproximatePlanetPositionSettings
        description:


  - name: approximate_planet_positions # [py]
  - name: approximatePlanetPositionsSettings # [cpp] # overload 1
    short_summary: "Factory function for creating approximate ephemeris model settings for major planets."
    extended_summary: |
      Factory function for settings object, defining approximate ephemeris model for major planets.
      In this highly simplified ephemeris model, Keplerian elements of the major solar system bodies are modelled as linear functions of time and several sinusoidal variations (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf).
      #(%! only given in ctor, not FF) Three-dimensional and circular-coplanar approximation may be used.
      This function creates an instance of an `EphemerisSettings` derived `ApproximatePlanetPositionsSettings` object.
    parameters:
      - name: None

    returns:
      - type: ApproximatePlanetPositionSettings
        description:


  - name: constant # [py]
  - name: constantEphemerisSettings # [cpp]
    short_summary: "Factory function for creating constant ephemeris model settings."
    extended_summary: |
       Factory function for settings object, defining ephemeris model with a constant, time-independent state.
       This function creates an instance of an `EphemerisSettings` derived `constantEphemerisSettings` object.

    parameters:
      - name: constant_state # [py]
        type: numpy.ndarray # [py]
      - name: constantState # [cpp]
        type: Eigen::Vector6d # [cpp]
        description: "Constant state that will be provided as output of the ephemeris at all times."

      - name: frame_origin # [py]
        type: str, default='SSB' # [py]
      - name: frameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined."

      - name: frame_orientation # [py]
        type: str, default='ECLIPJ2000' # [py]
      - name: frameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined."

    returns:
      - type: ConstantEphemerisSettings
        description: ""


  - name: custom # [py]
  - name: customEphemerisSettings # [cpp]
    short_summary: "Factory function for creating custom ephemeris model settings."
    extended_summary: |
       Factory function for settings object, defining ephemeris model with a custom state.
       This allows the user to provide an custom state function as ephemeris model.
       The state function (pointer) must be taking a time (float) as input and returning the Cartesian state (numpy.ndarray).
       This function creates an instance of an `EphemerisSettings` derived `customEphemerisSettings` object.

    parameters:
      - name: custom_state_function # [py]
        type: # [py] # (%! py type for function)
      - name: customStateFunction # [cpp]
        type: std::function< Eigen::Vector6d > # [cpp]
        description: "Function returning the state as a function of time."

      - name: frame_origin # [py]
        type: str, default='SSB' # [py]
      - name: frameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined."

      - name: frame_orientation # [py]
        type: str, default='ECLIPJ2000' # [py]
      - name: frameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined."

    returns:
      - type: CustomEphemerisSettings
        description: ""

  - name: keplerian # [py]
  - name: keplerEphemerisSettings # [cpp]
    short_summary: "Factory function for creating Keplerian ephemeris model settings."
    extended_summary: |
      Factory function for settings object, defining ephemeris model which represents an ideal Kepler orbit from the given Kepler elements.
      These are taken as the elements at the ``initial_state_epoch`` and propagated to any other time using the provided ``central_body_gravitational_parameter``.
      See Frame/State Transformations (`link`) for more details on orbital elements in Tudat.
      This function creates an instance of an `EphemerisSettings` derived `KeplerEphemerisSettings` object.

    parameters:
      - name: initial_state_in_keplerian_elements # [py]
        type: numpy.ndarray # [py]
      - name: initialStateInKeplerianElements # [cpp]
        type: Eigen::Vector6d # [cpp]
        description: "Kepler elements at time epochOfInitialState."

      - name: initial_state_epoch # [py]
        type: float # [py]
      - name: epochOfInitialState # [cpp]
        type: double # [cpp]
        description: "Time at which initialStateInKeplerianElements represents the Keplerian state."

      - name: central_body_gravitational_parameter # [py]
        type: float # [py]
      - name: centralBodyGravitationalParameter # [cpp]
        type: double # [cpp]
        description: "Gravitational parameter of the central body that is used in the computations."

      - name: frame_origin # [py]
        type: str, default='SSB' # [py]
      - name: referenceFrameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined."

      - name: frame_orientation # [py]
        type: str, default='ECLIPJ2000' # [py]
      - name: referenceFrameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined."

      - name: root_finder_absolute_tolerance # [py]
        type: float # [py]
      - name: rootFinderAbsoluteTolerance # [cpp]
        type: double, default=200.0 * std::numeric_limits< double >::epsilon( ) # [cpp]
        description: "Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."

      - name: root_finder_maximum_number_of_iterations # [py]
        type: float # [py]
      - name: rootFinderMaximumNumberOfIterations # [cpp]
        type: double, default=200.0 * std::numeric_limits< double >::epsilon( ) # [cpp]
        description: "Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."

    returns:
      - type: KeplerEphemerisSettings
        description: ""


  - name: keplerian_from_spice # [py]
  - name: keplerEphemerisFromSpiceSettings # [cpp]
    short_summary: "Factory function for creating Keplerian ephemeris model settings with initial state from Spice."
    extended_summary: |
      Factory function for settings object, defining ephemeris model which represents an ideal Kepler orbit from an initial state from Spice.
      The Kepler elements inferred from the initial state are propagated to any other time using the provided ``central_body_gravitational_parameter``.
      See Frame/State Transformations (`link`) for more details on orbital elements in Tudat.
      This function creates an instance of an `EphemerisSettings` derived `KeplerEphemerisSettings` object.

    parameters:
      - name: body # [py]
        type: str # [py]
      - name: body # [cpp] # (%!) suggest bodyName for consistency with cpp style and parameter of other functions
        type: std::string # [cpp]
        description: "Name of body for which to create ephemeris settings and infer initial state from Spice."

      - name: initial_state_epoch # [py]
        type: float # [py]
      - name: epochOfInitialState # [cpp]
        type: double # [cpp]
        description: "Time at which initialStateInKeplerianElements represents the Keplerian state."

      - name: central_body_gravitational_parameter # [py]
        type: float # [py]
      - name: centralBodyGravitationalParameter # [cpp]
        type: double # [cpp]
        description: "Gravitational parameter of the central body that is used in the computations."

      - name: frame_origin # [py]
        type: str, default='SSB' # [py]
      - name: referenceFrameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined."

      - name: frame_orientation # [py]
        type: str, default='ECLIPJ2000' # [py]
      - name: referenceFrameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined."

      - name: root_finder_absolute_tolerance # [py]
        type: float # [py]
      - name: rootFinderAbsoluteTolerance # [cpp]
        type: double, default=200.0 * std::numeric_limits< double >::epsilon( ) # [cpp]
        description: "Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."

      - name: root_finder_maximum_number_of_iterations # [py]
        type: float # [py]
      - name: rootFinderMaximumNumberOfIterations # [cpp]
        type: double, default=200.0 * std::numeric_limits< double >::epsilon( ) # [cpp]
        description: "Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."

    returns:
      - type: KeplerEphemerisSettings
        description: ""


  - name: scaled # [py]
  - name: scaledEphemerisSettings # [cpp]
    short_summary: "Factory function for creating scaled ephemeris model settings."
    extended_summary: |
      Factory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.
      The user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).
      This function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.

    parameters:
      - name: unscaled_ephemeris_settings # [py]
        type: EphemerisSettings # [py] # (%! correct type?)
      - name: baseSettings # [cpp]
        type: std::shared_ptr< EphemerisSettings > # [cpp]
        description: "Sets base settings of ephemeris to be scaled."

      - name: scaling_constant # [py]
        type: float # [py]
      - name: scaling # [cpp]
        type: double # [cpp]
        description: "Constant scaling factor to be applied to all elements of the Cartesian state."

      - name: is_scaling_absolute # [py]
        type: bool, default=false # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: "Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value."

    returns:
      - type: ScaledEphemerisSettings
        description: ""


  - name: scaled # [py]
  - name: scaledEphemerisSettings # [cpp]
    short_summary: "Factory function for creating scaled ephemeris model settings."
    extended_summary: |
      Factory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.
      The user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).
      This function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.

    parameters:
      - name: unscaled_ephemeris_settings # [py]
        type: EphemerisSettings # [py] # (%! correct type?)
      - name: baseSettings # [cpp]
        type: std::shared_ptr< EphemerisSettings > # [cpp]
        description: "Sets base settings of ephemeris to be scaled."

      - name: scaling_vector # [py]
        type: numpy.ndarray # [py]
      - name: scaling # [cpp]
        type: double # [cpp]
        description: "Vector containing scaling factors to be applied to each element of the Cartesian state."

      - name: is_scaling_absolute # [py]
        type: bool, default=false # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: "Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value."

    returns:
      - type: ScaledEphemerisSettings
        description: ""

  - name: scaled # [py]
  - name: scaledEphemerisSettings # [cpp]
    short_summary: "Factory function for creating scaled ephemeris model settings."
    extended_summary: |
      Factory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.
      The user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).
      This function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.

    parameters:
      - name: unscaled_ephemeris_settings # [py]
        type: EphemerisSettings # [py] # (%! correct type?)
      - name: baseSettings # [cpp]
        type: std::shared_ptr< EphemerisSettings > # [cpp]
        description: "Sets base settings of ephemeris to be scaled."

      - name: scaling_vector_function # [py]
        type: function < numpy.ndarray > # [py] #(%! type)
      - name: scaling # [cpp]
        type: double # [cpp]
        description: "Function returning a vector with the scaling factors to be applied to each element of the Cartesian state."

      - name: is_scaling_absolute # [py]
        type: bool, default=false # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: "Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value."

    returns:
      - type: ScaledEphemerisSettings
        description: ""

  - name: tabulated # [py]
  - name: tabulatedEphemerisSettings # [cpp]
    short_summary: "Factory function for creating ephemeris model settings from tabulated data."
    extended_summary: |
      Factory function for settings object, defining ephemeris model to be created from tabulated data.
      Currently the data that is provided gets interpolated by a 6th order Lagrange interpolator (hardcoded).
      At the edges of the interpolation interval a cubic spline interpolator is used to suppres the influence of Runge's phenomenon.
      This function creates an instance of an `EphemerisSettings` derived `TabulatedEphemerisSettings` object.

    parameters:
      - name: body_state_history # [py] # readonly
        type: dict # [py]
        description: Dictionary of the discrete state history data from which ephemeris is to be created. Keys representing the time (float) and values representing Cartesian states (numpy.ndarray). # [py]
      - name: bodyStateHistory # [cpp]
        type: std::map< double, Eigen::Vector6d > # [cpp]
        description: Data map defining discrete data from which an ephemeris is to be created. Keys representing the time (double) and values representing Cartesian states (Eigen::Vector6d). # [cpp]

      - name: frame_origin # [py]
        type: str, default='SSB' # [py]
      - name: frameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined."

      - name: frame_orientation # [py]
        type: str, default='ECLIPJ2000' # [py]
      - name: frameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined."

    returns:
      - type: TabulatedEphemerisSettings
        description: ""



  # then only return types & syntax, aestetics are open
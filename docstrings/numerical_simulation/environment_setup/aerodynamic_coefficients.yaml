#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################
# Aerodynamic Coefficient Setup ( createAerodynamicCoefficientInterface.h)


extended_summary: |
  This module contains the factory functions for setting up the
  aerodynamic interface of artificial and celestial bodies in an environment.

#########################################################################
#  ███████ ███   ██ ██    ██ ███    ███  ██████
#  ██      ████  ██ ██    ██ ████  ████ █
#  █████   ██ ██ ██ ██    ██ ██ ████ ██  █████
#  ██      ██  ████ ██    ██ ██  ██  ██       █
#  ███████ ██    ██  ██████  ██      ██ ██████
#########################################################################

  # no enums



#########################################################################
#   ██████ ██          ██      ██████  ██████ ███████  ██████
#  ██      ██         ████    █       █       ██      █
#  ██      ██        ██  ██    █████   █████  █████    █████
#  ██      ██       ████████        █       █ ██            █
#   ██████ ███████ ██      ██ ██████  ██████  ███████ ██████
#########################################################################

classes:
  # base class:
  #######################################################################

  - name: AerodynamicCoefficientSettings
    short_summary: "Base class for providing settings for aerodynamic interface model."
    extended_summary: |
      Functional (base) class for settings of aerodynamic interface models that require no
      information in addition to their type.
      Aerodynamic interface model settings requiring additional information must be defined using an object derived from this class.

  # attributes: none exposed

    methods:
      - name: ctor # [cpp]
        #      - name: __init__ # [py]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for ephemerides should be instantiated through the factory functions of a derived class." # [cpp]


  # derived classes:
  #######################################################################

  - name: ConstantAerodynamicCoefficientSettings
    short_summary: "Class for defining model settings from constant aerodynamic coefficients."
    extended_summary: "`AerodynamicCoefficientSettings` derived class for aerodynamic interface model settings using only constant aerodynamic coefficients."

  # attributes: none exposed

    methods:       # [cpp]
    #methods:      # [py]
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `ConstantAerodynamicCoefficientSettings` class should be created through the `constantAerodynamicCoefficientSettings` factory function." # [cpp]
      #      - name: __init__ # [py]
      #        short_summary: "Constructor."
      #        extended_summary: "Instances of the `ScaledEphemerisSettings` class should be created through the `scaled` factory functions." # [py]


##############################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
##############################################################################

functions:
  # factory functions:
  #######################################################################

  - name: constant # [py]
  - name: constantAerodynamicCoefficientSettings # [cpp]
    short_summary: "Factory function for creating aerodynamic interface model settings entirely from constant coefficients."
    extended_summary: |
      Factory function for settings object, defining aerodynamic interface model entirely from constant aerodynamic coefficients,
      i.e. coefficients are not a function of any independent variables.

    parameters:
      - name: reference_area # [py]
        type: float # [py]
      - name: referenceArea # [cpp]
        type: double # [cpp]
        description: "Reference area with which aerodynamic forces and moments are non-dimensionalized."

      - name: constant_force_coefficient # [py]
        type: ndarray # [py]
      - name: constantForceCoefficient # [cpp]
        type: Eigen::Vector3d # [cpp]
        description: "Constant force coefficients."

      - name: are_coefficients_in_aerodynamic_frame # [py]
        type: bool, default = true # [py]
      - name: areCoefficientsInAerodynamicFrame # [cpp]
        type: bool, default = true # [cpp]
        description: |
          Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame
          (drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz).

      - name: are_coefficients_in_negative_axis_direction # [py]
        type: bool, default = true # [py]
        description: | # [py]
          Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or
          aerodynamic frame (see arg are_coefficients_in_aerodynamic_frame).
          Note that for drag, side and lift force, the coefficients are typically defined in negative direction.
      - name: areCoefficientsInNegativeAxisDirection # [cpp]
        type: bool, default = true # [cpp]
        description: "Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or aerodynamic frame (see arg areCoefficientsInAerodynamicFrame). Note that for drag, side and lift force, the coefficients are typically defined in negative direction." # [cpp]

    returns:
        type: ConstantAerodynamicCoefficientSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.ConstantAerodynamicCoefficientSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` for the artifical body "Spacecraft", using only constant aerodynamic coefficients:

      .. code-block:: python # [py]
         # [py]
         # define parameters of constant aerodynamic coefficient model  # [py]
         reference_area = 20.0  # [py]
         drag_coefficient = 1.5  # [py]
         lift_coefficient = 0.3  # [py]
         # create aerodynamic interface settings
         aero_coefficient_settings = environment_setup.aerodynamic_coefficients.constant(
             reference_area, [ drag_coefficient, 0, lift_coefficient ] )
         # assign aerodynamic interface to "Spacecraft" vehicle
         environment_setup.add_aerodynamic_coefficient_interface(
                     bodies, "Spacecraft", aero_coefficient_settings )

      .. code-block:: cpp # [cpp]
         # [cpp]
         // define parameters of constant aerodynamic coefficient model # [cpp]
         double referenceArea = 20.0; # [cpp]
         Eigen::Vector3d constantCoefficients; # [cpp]
         constantCoefficients( 0 ) = 1.5; # [cpp]
         constantCoefficients( 2 ) = 0.3; # [cpp]
         // create aerodynamic interface and assign to "Spacecraft" vehicle # [cpp]
         bodySettings[ "Spacecraft" ]->aerodynamicCoefficientSettings = std::make_shared< ConstantAerodynamicCoefficientSettings >( # [cpp]
         referenceArea, constantCoefficients, true, true ); # [cpp]

  #######################################################################
  # (%!) not on tudat-space

  - name: custom # [py]
  - name: customAerodynamicCoefficientSettings # [cpp]
    short_summary: "Factory function for creating aerodynamic interface model settings from custom coefficients."
    extended_summary: |
      Factory function for settings object, defining aerodynamic interface model via a custom force coefficient function
      (function of independent variable).

    parameters:
      - name: force_coefficient_function # [py]
        type: callable[[list[float]], numpy.ndarray[numpy.float64[3, 1]]] # [py]
        description: Function that is defining the aerodynamic coefficients as function of an independent variable (see arg independent_variable_names). # [py]
      - name: forceCoefficientFunction # [cpp]
        type: std::function<Eigen::Vector3d(const std::vector<double> &)> # [cpp]
        description: Function that is defining the aerodynamic coefficients as function of an independent variable (see arg independentVariableNames). # [cpp]

      - name: reference_area # [py]
        type: float # [py]
      - name: referenceArea # [cpp]
        type: double # [cpp]
        description: "Reference area with which aerodynamic forces and moments are non-dimensionalized."

      - name: independent_variable_name # [py]
        type: list[astro.aerodynamics.AerodynamicCoefficientsIndependentVariables] # [py]
      - name: independentVariableNames # [cpp]
        type: std::vector< aerodynamics::AerodynamicCoefficientsIndependentVariables > # [cpp]
        description: "Vector with identifiers for the independent variable w.r.t. which the aerodynamic coefficients are defined."

      - name: are_coefficients_in_aerodynamic_frame # [py]
        type: bool, default = true # [py]
      - name: areCoefficientsInAerodynamicFrame # [cpp]
        type: bool, default = true # [cpp]
        description: |
          Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame
          (drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz).

      - name: are_coefficients_in_negative_axis_direction # [py]
        type: bool, default = true # [py]
      - name: areCoefficientsInNegativeAxisDirection # [cpp]
        type: bool, default = true # [cpp]
        description: |
          Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or
          aerodynamic frame (see arg areCoefficientsInAerodynamicFrame). # [cpp]
          aerodynamic frame (see arg are_coefficients_in_aerodynamic_frame). # [py]
          Note that for drag, side and lift force, the coefficients are typically defined in negative direction.

    returns:
        type: CustomAerodynamicCoefficientSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.CustomAerodynamicCoefficientSettings` class


  #######################################################################
  # (%!) no example on tudat-space

  - name: tabulated_one_dimensional # [py]
  - name: oneDimensionalTabulatedAerodynamicCoefficientSettings # [cpp]
    short_summary: "Factory function for creating aerodynamic interface model settings from user-defined, 1-d tabulated coefficients."
    extended_summary: |
      Factory function for settings object, defining aerodynamic interface model via user-defined, 1-dimensional, tabulated aerodynamic force and moment coefficients
      (tabulated w.r.t. independent variable).

    parameters:

      - name: independent_variables # [py]
        type: list[astro.aerodynamics.AerodynamicCoefficientsIndependentVariables] # [py]
      - name: constantForceCoefficient # [cpp]
        type: std::vector< aerodynamics::AerodynamicCoefficientsIndependentVariables > # [cpp]
        description: "Values of indepependent variables at which the coefficients in the input multi vector are defined (size 1)"

      - name: force_coefficients # [py]
        type: list[numpy.ndarray[numpy.float64[3, 1]]] # [py]
        description: Values of force coefficients at independent variables defined by independent_variables. # [py]
      - name: forceCoefficients # [cpp]
        type: std::vector< Eigen::Vector3d > # [cpp]
        description: Values of force coefficients at independent variables defined by independentVariables. # [cpp]

      - name: moment_coefficients # [py]
        type: list[numpy.ndarray[numpy.float64[3, 1]]] # [py]
        description: Values of moment coefficients at independent variables defined by independent_variables. # [py]
      - name: momentCoefficients # [cpp]
        type: std::vector< Eigen::Vector3d > # [cpp]
        description: Values of moment coefficients at independent variables defined by independentVariables. # [cpp]

      - name: reference_area # [py]
        type: float # [py]
      - name: referenceArea # [cpp]
        type: double # [cpp]
        description: "Reference area with which aerodynamic forces and moments are non-dimensionalized."

      - name: reference_length # [py]
        type: float # [py]
      - name: referenceLength # [cpp]
        type: double # [cpp]
        description: "Reference length with which aerodynamic moments about x- and z- axes are non-dimensionalized."

      - name: lateral_reference_length # [py]
        type: float # [py]
      - name: lateralReferenceLength # [cpp]
        type: double # [cpp]
        description: "Reference length with which aerodynamic moment about y-axis is non-dimensionalized."

      - name: moment_reference_point # [py]
        type: float # [py]
      - name: momentReferencePoint # [cpp]
        type: double # [cpp]
        description: "Point w.r.t. aerodynamic moment is calculated."

      - name: independent_variable_name # [py]
        type: list[astro.aerodynamics.AerodynamicCoefficientsIndependentVariables] # [py]
      - name: independentVariableNames # [cpp]
        type: std::vector< aerodynamics::AerodynamicCoefficientsIndependentVariables > # [cpp]
        description: "Vector with identifiers for the independent variable w.r.t. which the aerodynamic coefficients are defined."

      - name: are_coefficients_in_aerodynamic_frame # [py]
        type: bool, default = true # [py]
      - name: areCoefficientsInAerodynamicFrame # [cpp]
        type: bool, default = true # [cpp]
        description: |
          Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame
          (drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz).

      - name: are_coefficients_in_negative_axis_direction # [py]
        type: bool, default = true # [py]
      - name: areCoefficientsInNegativeAxisDirection # [cpp]
        type: bool, default = true # [cpp]
        description: |
          Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or
          aerodynamic frame (see arg areCoefficientsInAerodynamicFrame).
          Note that for drag, side and lift force, the coefficients are typically defined in negative direction.

      - name: interpolator_settings # [py]
        type: math.interpolators.InterpolatorSettings # [py]
        description: Interpolator settings object, where the conditions for interpolation of tabulated inputs are saved. # [py]
      - name: interpolatorSettings # [cpp]
        type: std::shared_ptr< interpolators::InterpolatorSettings >, default = nullptr # [cpp]
        description: Pointer to an interpolator settings object, where the conditions for interpolation of tabulated inputs are saved. # [cpp]


    returns:
        type: TabulatedAerodynamicCoefficientSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.TabulatedAerodynamicCoefficientSettings` class (via :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.TabulatedAerodynamicCoefficientSettingsBase` class)


  #######################################################################
  # (%!) not on tudat-space

  - name: tabulated_force_only # [py]
  - name: oneDimensionalTabulatedAerodynamicCoefficientSettings # [cpp]
    short_summary: "Factory function for creating aerodynamic interface model settings from user-defined, 1-d tabulated force coefficients."
    extended_summary: |
      Factory function for settings object, defining aerodynamic interface model via user-defined, 1-dimensional, tabulated aerodynamic force coefficients
      (tabulated w.r.t. independent variable).

    parameters:

      - name: independent_variables # [py]
        type: list[astro.aerodynamics.AerodynamicCoefficientsIndependentVariables] # [py]
      - name: constantForceCoefficient # [cpp]
        type: std::vector< aerodynamics::AerodynamicCoefficientsIndependentVariables > # [cpp]
        description: "Values of indepependent variables at which the coefficients in the input multi vector are defined (size 1)"

      - name: force_coefficients # [py]
        type: list[numpy.ndarray[numpy.float64[3, 1]]] # [py]
        description: Values of force coefficients at independent variables defined by independent_variables. # [py]
      - name: forceCoefficients # [cpp]
        type: std::vector< Eigen::Vector3d > # [cpp]
        description: Values of force coefficients at independent variables defined by independentVariables. # [cpp]

      - name: reference_area # [py]
        type: float # [py]
      - name: referenceArea # [cpp]
        type: double # [cpp]
        description: "Reference area with which aerodynamic forces and moments are non-dimensionalized."

      - name: independent_variable_name # [py]
        type: list[astro.aerodynamics.AerodynamicCoefficientsIndependentVariables] # [py]
      - name: independentVariableNames # [cpp]
        type: std::vector< aerodynamics::AerodynamicCoefficientsIndependentVariables > # [cpp]
        description: "Vector with identifiers for the independent variable w.r.t. which the aerodynamic coefficients are defined."

      - name: are_coefficients_in_aerodynamic_frame # [py]
        type: bool, default = true # [py]
      - name: areCoefficientsInAerodynamicFrame # [cpp]
        type: bool, default = true # [cpp]
        description: |
          Boolean to define whether the aerodynamic coefficients are defined in the aerodynamic frame
          (drag, side, lift force) or in the body frame (typically denoted as Cx, Cy, Cz).

      - name: are_coefficients_in_negative_axis_direction # [py]
        type: bool, default = true # [py]
      - name: areCoefficientsInNegativeAxisDirection # [cpp]
        type: bool, default = true # [cpp]
        description: |
          Boolean to define whether the aerodynamic coefficients are positive along the positive axes of the body or
          aerodynamic frame (see arg areCoefficientsInAerodynamicFrame).
          Note that for drag, side and lift force, the coefficients are typically defined in negative direction.

      - name: interpolator_settings # [py]
        type: math.interpolators.InterpolatorSettings # [py]
        description: |  # [py]
          Interpolator settings object, where the conditions for interpolation of tabulated inputs are saved.
      - name: interpolatorSettings # [cpp]
        type: std::shared_ptr< interpolators::InterpolatorSettings >, default = nullptr # [cpp]
        description: | # [cpp]
          Pointer to an interpolator settings object where the conditions for interpolation of tabulated inputs are saved.

    returns:
        type: TabulatedAerodynamicCoefficientSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.TabulatedAerodynamicCoefficientSettings` class


  #######################################################################
  # (%!) not on tudat-space

  - name: scaled_by_constant # [py]
  - name: scaledAerodynamicCoefficientSettings # [cpp]
    short_summary: "Factory function for creating aerodynamic interface model settings by applying one constant scaling factor/value to all coefficients of an existing model settings object."
    extended_summary: |
      Factory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by one constant factor or value.
      Via the ``is_scaling_absolute`` # [py]
      Via the ``isScalingAbsolute`` # [cpp]
      boolean, the user can apply a constant scaling factor or an absolute value to the resulting force and moment coefficients (for instance for an uncertainty analysis).

    parameters:

      - name: unscaled_coefficient_settings # [py]
        type: AerodynamicCoefficientSettings # [py]
      - name: baseSettings # [cpp]
        type: std::shared_ptr< AerodynamicCoefficientSettings > # [cpp]
        description: "Existing aerodynamic interface model settings object that is used as the base for the scaled settings object."

      - name: force_scaling_constant # [py]
        type: float # [py]
      - name: forceScaling # [cpp]
        type: double # [cpp]
        description: "Constant scaling factor to be applied to all aerodynamic force coefficients."

      - name: moment_scaling_constant # [py]
        type: float # [py]
      - name: momentScaling # [cpp]
        type: double # [cpp]
        description: "Constant scaling factor to be applied to all aerodynamic moment coefficients."

      - name: is_scaling_absolute # [py]
        type: bool # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: |
          Boolean indicating whether aerodynamic coefficient scaling is absolute.
          Setting this boolean to true will add the scaling value to the base value,
          instead of the default behaviour of multiplying the base value by the scaling factor.

    returns:
        type: ScaledAerodynamicCoefficientInterfaceSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.ScaledAerodynamicCoefficientInterfaceSettings` class


  #######################################################################
  # (%!) not on tudat-space

  - name: scaled_by_vector # [py]
    short_summary: "Factory function for creating aerodynamic interface model settings by applying constant scaling factors/values to the coefficients of an existing model settings object." # [py]
    extended_summary: | # [py]
      Factory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by constant factors or values.
      Via the ``is_scaling_absolute`` boolean, the user can apply one constant scaling factor or an absolute value to each resulting force and moment coefficient (for instance for an uncertainty analysis).

  - name: scaledAerodynamicCoefficientSettings # [cpp]
    short_summary: "Factory function for creating aerodynamic interface model settings by applying constant scaling factors/values to the coefficients of an existing model settings object." # [cpp]
    extended_summary: "Factory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by constant factors or values. Via the `isScalingAbsolute` boolean, the user can apply one constant scaling factor or an absolute value to each resulting force and moment coefficient (for instance for an uncertainty analysis). This function creates an instance of an `AerodynamicCoefficientSettings` derived `ScaledAerodynamicCoefficientInterfaceSettings` object." # [cpp]

    parameters:

      - name: unscaled_coefficient_settings # [py]
        type: AerodynamicCoefficientSettings # [py]
      - name: baseSettings # [cpp]
        type: std::shared_ptr< AerodynamicCoefficientSettings > # [cpp]
        description: "Existing aerodynamic interface model settings object that is used as the base for the scaled settings object."

      - name: force_scaling_vector # [py]
        type: numpy.ndarray[numpy.float64[3, 1]] # [py]
      - name: forceScaling # [cpp]
        type: Eigen::Vector3d # [cpp]
        description: "Constant scaling factors to be applied to each aerodynamic force coefficient."

      - name: moment_scaling_vector # [py]
        type: numpy.ndarray[numpy.float64[3, 1]] # [py]
      - name: momentScaling # [cpp]
        type: Eigen::Vector3d # [cpp]
        description: "Constant scaling factors to be applied to each aerodynamic moment coefficient."

      - name: is_scaling_absolute # [py]
        type: bool # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: |
          Boolean indicating whether aerodynamic coefficient scaling is absolute.
          Setting this boolean to true will add the scaling value to the base value,
          instead of the default behaviour of multiplying the base value by the scaling factor.

    returns:
        type: ScaledAerodynamicCoefficientInterfaceSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.ScaledAerodynamicCoefficientInterfaceSettings` class


  #######################################################################
  # (%!) not on tudat-space

  - name: scaled_by_vector_function # [py]
    short_summary: "Factory function for creating aerodynamic interface model settings by applying custom scaling factors/values to the coefficients of an existing model settings object." # [py]
    extended_summary: |  # [py]
      Factory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by custom factors or values.
      Via the ``is_scaling_absolute`` boolean, the user can apply the scaling factors or absolute values to each resulting force and moment coefficient (for instance for an uncertainty analysis).

  - name: scaledAerodynamicCoefficientSettings # [cpp]
      short_summary: "Factory function for creating aerodynamic interface model settings by applying custom scaling factors/values to the coefficients of an existing model settings object." # [cpp]
      extended_summary: "Factory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by custom factors or values. Via the `isScalingAbsolute` boolean, the user can apply the scaling factors or absolute values to each resulting force and moment coefficient (for instance for an uncertainty analysis). This function creates an instance of an `AerodynamicCoefficientSettings` derived `ScaledAerodynamicCoefficientInterfaceSettings` object." # [cpp]

    parameters:

      - name: unscaled_coefficient_settings # [py]
        type: AerodynamicCoefficientSettings # [py]
      - name: baseSettings # [cpp]
        type: std::shared_ptr< AerodynamicCoefficientSettings > # [cpp]
        description: "Existing aerodynamic interface model settings object that is used as the base for the scaled settings object."

      - name: force_scaling_vector_function # [py]
        type: callable[[float], numpy.ndarray[numpy.float64[3, 1]]] # [py]
      - name: forceScaling # [cpp]
        type: std::function< Eigen::Vector3d( const double ) > # [cpp]
        description: "Custom scaling factors to be applied to each aerodynamic force coefficient."

      - name: moment_scaling_vector_function # [py]
        type: callable[[float], numpy.ndarray[numpy.float64[3, 1]]] # [py]
      - name: momentScaling # [cpp]
        type: std::function< Eigen::Vector3d( const double ) > # [cpp]
        description: "Custom scaling factors to be applied to each aerodynamic moment coefficient."

      - name: is_scaling_absolute # [py]
        type: bool # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: |
          Boolean indicating whether aerodynamic coefficient scaling is absolute.
          Setting this boolean to true will add the scaling value to the base value,
          instead of the default behaviour of multiplying the base value by the scaling factor.

    returns:
        type: ScaledAerodynamicCoefficientInterfaceSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.ScaledAerodynamicCoefficientInterfaceSettings` class


  #######################################################################
  # missing (w.r.t) tudat-space:
  #     - Local Inclination Methods


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
################## Gravity Field Setup ( createGravityField.h ) #####################################################
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

extended_summary: |
  This module consists of factory functions for setting up the
  gravitational potential models of celestial bodies in an environment.



enums:

  #    py::enum_<tss::GravityFieldType>
  #        enum tudat::simulation_setup::GravityFieldType

  - name: GravityFieldType
    short_summary: "Enumeration of gravity field types."
    extended_summary: |
      Enumeration of gravity field types supported by tudat.
    members:
      - name: central # [cpp]
      - name: central_spice # [cpp]
      - name: spherical_harmonic # [cpp]

      - name: central_gravity # [py]
      - name: central_spice_gravity # [py]
      - name: spherical_harmonic_gravity # [py]

  #    py::enum_<tss::SphericalHarmonicsModel>
  #        enum tudat::simulation_setup::SphericalHarmonicsModel

  - name: SphericalHarmonicsModel
    short_summary: "Enumeration of spherical harmonics models."
    extended_summary: |
      Enumeration of spherical harmonics models supported by tudat.
    members:
      - name: customModel # [cpp]
      - name: custom_model # [py]
      - name: egm96
      - name: ggm02c
      - name: ggm02s
      - name: glgm3150
      - name: lpe200
      - name: jgmro120d

######



classes:


  # base class:

  - name: GravityFieldSettings
    short_summary: "Base class for providing settings for automatic gravity field model creation."
    extended_summary: |
      This class is a functional base class for settings of gravity field models that require no information in addition to their type.
      Gravity field model classes requiring additional information must be created using an object derived from this class.

    attributes: # [py]
      - name: gravity_field_type # [py] # readonly
        type: GravityFieldType # [py]
        description: Type of gravity field model that is to be created. # [py]

    methods:
      - name: __init__ # [py]
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for gravity field models should be instantiated through the factory functions of a derived class." # [cpp]

      - name: getGravityFieldType # [cpp]
        short_summary: "Retrieve gravity field type." # [cpp]
        extended_summary: "Function to retrieve the type of gravity field that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - name: gravityFieldType # [cpp]
            type: GravityFieldType # [cpp]

  # derived classes:

  - name: CentralGravityFieldSettings
    short_summary: "`GravityFieldSettings` derived class defining settings of point mass gravity field."
    extended_summary: |
      Derived class of `GravityFieldSettings` for central gravity fields, which are defined by a single gravitational parameter.

    attributes: # [py]
      - name: gravitational_parameter # [py]
        type: float # [py]
        description: Gravitational parameter of central gravity field. # [py]

    methods: # [cpp]
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `CentralGravityFieldSettings` class should be created through the `centralGravitySettings` factory function." # [cpp]
      #      - name: __init__ # [py]
      #        short_summary: "Constructor." # [py]
      #        extended_summary: "Instances of the `CentralGravityFieldSettings` class should be created through the `central` factory function." # [py]

      - name: getGravitationalParameter # [cpp]
        short_summary: "Retrieve gravitational parameter." # [cpp]
        extended_summary: "Function to retrieve gravitational parameter of the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: double # [cpp]
            description: Gravitational parameter of central gravity field. # [cpp]

      - name: resetGravitationalParameter # [cpp]
        short_summary: "Reset gravitational parameter." # [cpp]
        extended_summary: "Function to reset gravitational parameter of the settings object." # [cpp]
        parameters: # [cpp]
          - name: gravitationalParameter # [cpp]
            type: double # [cpp]
            description: Gravitational parameter of central gravity field that is to be defined by the settings object. # [cpp]


  - name: SphericalHarmonicsGravityFieldSettings
    short_summary: "`GravityFieldSettings` derived class defining settings of spherical harmonic gravity field representation."
    extended_summary: |
      Derived class of `GravityFieldSettings` for gravity fields, which are defined by a spherical harmonic gravity field representation.

    attributes: # [py]
      - name: gravitational_parameter # [py]
        type: float # [py]
        description: Gravitational parameter of gravity field. # [py]

      - name: reference_radius # [py] # readonly
        type: float # [py]
        description: Reference radius of spherical harmonic field expansion. # [py]

      - name: normalized_cosine_coefficients # [py]
        type: numpy.ndarray # [py]
        description: Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j. # [py]

      - name: normalized_sine_coefficients # [py]
        type: numpy.ndarray # [py]
        description: Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j. # [py]

      - name: associated_reference_frame # [py]
        type: str # [py]
        description: Identifier for body-fixed reference frame with which the coefficients are associated. # [py]

      - name: create_time_dependent_field # [py]
        type: bool # [py]
        description: Boolean that denotes whether the field should be created as time-dependent (even if no variations are imposed intially). # [py]

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `SphericalHarmonicsGravityFieldSettings` class should be created through the `sphericalHarmonicsGravitySettings` factory function." # [cpp]
      #      - name: __init__ # [py]
      #        short_summary: "Constructor." # [py]
      #        extended_summary: "Instances of the `SphericalHarmonicsGravityFieldSettings` class should be created through the `spherical_harmonic` factory function." # [py]

      - name: getGravitationalParameter # [cpp]
        short_summary: "Retrieve gravitational parameter." # [cpp]
        extended_summary: "Function to retrieve gravitational parameter of the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: double # [cpp]
            description: Gravitational parameter of gravity field. # [cpp]

      - name: resetGravitationalParameter # [cpp]
        short_summary: "Reset gravitational parameter." # [cpp]
        extended_summary: "Function to reset gravitational parameter of the settings object." # [cpp]
        parameters: # [cpp]
          - name: gravitationalParameter # [cpp]
            type: double # [cpp]
            description: Gravitational parameter of gravity field that is to be created from the settings object. # [cpp]

      - name: getReferenceRadius # [cpp]
        short_summary: "Retrieve reference radius." # [cpp]
        extended_summary: "Function to retrieve the reference radius (of the spherical harmonics field expansion) from the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: double # [cpp]
            description: Reference radius of spherical harmonic field expansion. # [cpp]

      - name: getCosineCoefficients # [cpp]
        short_summary: "Retrieve cosine coefficients." # [cpp]
        extended_summary: "Function to retrieve the (geodesy normalized) cosine spherical harmonic coefficients from the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: Eigen::MatrixXd # [cpp]
            description: Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j. # [cpp]

      - name: resetCosineCoefficients # [cpp]
        short_summary: "Reset cosine coefficients." # [cpp]
        extended_summary: "Function to reset the (geodesy normalized) cosine spherical harmonic coefficients of the settings object." # [cpp]
        parameters: # [cpp]
          - name: cosineCoefficients # [cpp]
            type: Eigen::MatrixXd # [cpp]
            description: Cosine spherical harmonic coefficients (geodesy normalized) of the gravity field that is to be created from the setings object. Entry (i,j) denotes coefficient at degree i and order j. # [cpp]


      - name: getSineCoefficients # [cpp]
        short_summary: "Retrieve sine coefficients." # [cpp]
        extended_summary: "Function to retrieve the (geodesy normalized) sine spherical harmonic coefficients from the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: Eigen::MatrixXd # [cpp]
            description: Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j. # [cpp]

      - name: resetSineCoefficients # [cpp]
        short_summary: "Reset sine coefficients." # [cpp]
        extended_summary: "Function to reset the (geodesy normalized) sine spherical harmonic coefficients of the settings object." # [cpp]
        parameters: # [cpp]
          - name: sineCoefficients # [cpp]
            type: Eigen::MatrixXd # [cpp]
            description: Sine spherical harmonic coefficients (geodesy normalized) of the gravity field that is to be created from the setings object. Entry (i,j) denotes coefficient at degree i and order j. # [cpp]

      - name: getAssociatedReferenceFrame # [cpp]
        short_summary: "Retrieve associated reference frame." # [cpp]
        extended_summary: "Function to retrieve the reference frame with which the spherical harmonics coefficients of the settings object are associated." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: std::string # [cpp]
            description: Identifier for body-fixed reference frame with which the spherical harmonics coefficients of the settings object are associated. # [cpp]

      - name: resetAssociatedReferenceFrame # [cpp]
        short_summary: "Reset associated reference frame." # [cpp]
        extended_summary: "Function to reset the reference frame with which the spherical harmonics coefficients of the settings object are associated." # [cpp]
        parameters: # [cpp]
          - name: associatedReferenceFrame # [cpp]
            type: std::string # [cpp]
            description: Identifier for body-fixed reference frame with which the spherical harmonics coefficients of the settings object are associated. # [cpp]

      - name: getCreateTimeDependentField # [cpp]
        short_summary: "Check whether the field should be created as time-dependent." # [cpp]
        extended_summary: "Function to retrieve boolean that denotes whether the settings object sets the gravity field to be created as time-dependent." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: bool # [cpp]
            description: Boolean that denotes whether the field should be created as time-dependent (even if no variations are imposed intially). # [cpp]

      - name: setCreateTimeDependentField # [cpp]
        short_summary: "Set whether field is created as time-dependent." # [cpp]
        extended_summary: "Function to set boolean that denotes whether the settings object sets the gravity field to be created as time-dependent." # [cpp]
        parameters: # [cpp]
          - name: CreateTimeDependentField # [cpp]
            type: bool # [cpp]
            description: Boolean that denotes whether the field should be created as time-dependent (even if no variations are imposed intially). # [cpp]


  # skip for now
  #  - name: FromFileSphericalHarmonicsGravityFieldSettings
  #    short_summary: "`SphericalHarmonicsGravityFieldSettings` derived class defining settings from a spherical harmonics model file."



functions:


  # factory functions:

  - name: central # [py]
  - name: centralGravitySettings # [cpp]
    short_summary: "Factory function for central gravity field settings object."
    extended_summary: |
      Factory function for settings object, defining a point-mass gravity field model with user-defined gravitational parameter.
      This function returns a `GravityFieldSettings` derived `CentralGravityFieldSettings` object.
    parameters:
      - name: gravitational_parameter # [py]
        type: float # [py]
      - name: gravitationalParameter # [cpp]
        type: double # [cpp]
    returns:
        type: CentralGravityFieldSettings
        description: "`CentralGravityFieldSettings` object defined by the provided gravitational parameter."


  - name: central_spice # [py]
  - name: centralGravityFromSpiceSettings # [cpp]
    short_summary: "Factory function to create central gravity field settings from Spice settings."
    extended_summary: |
      Factory function for settings object, defining a point-mass gravity field model with gravitational parameter from Spice.
      This function returns a `GravityFieldSettings` object of gravity field type ``central_spice``.
    parameters:
      - name: None
    returns:
        type: GravityFieldSettings
        description: "`GravityFieldSettings` object defined by gravitational parameters from Spice settings."


  - name: spherical_harmonic # [py]
  - name: sphericalHarmonicsGravitySettings # [cpp]
    short_summary: "Factory function for creating a spherical harmonics gravity field settings object."
    extended_summary: |
      Factory function for settings object, defining a gravity field model through spherical harmonic expansion.
      The associated reference frame must presently be the same frame ID as the target frame of the body’s rotation model.
      It represents the frame in which the spherical harmonic field is defined.
      Spherical harmonic coefficients used for this environment model must *always* be fully normalized.
      To normalize unnormalized spherical harmonic coefficients, see `spherical_harmonics_normalization`.
      This function returns a `GravityFieldSettings` derived `SphericalHarmonicsGravityFieldSettings` object.

    parameters:
      - name: gravitational_parameter # [py]
        type: float # [py]
      - name: gravitationalParameter # [cpp]
        type: double # [cpp]
        description: Gravitational parameter of gravity field.

      - name: reference_radius # [py]
        type: float # [py]
      - name: referenceRadius # [cpp]
        type: double # [cpp]
        description: Reference radius of spherical harmonic field expansion.

      - name: normalized_cosine_coefficients # [py]
        type: numpy.ndarray # [py]
      - name: cosineCoefficients # [cpp]
        type: Eigen::MatrixXd # [cpp]
        description: |
          Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j.
          As such, note that entry (0,0) of cosine coefficients should be equal to 1.

      - name: normalized_sine_coefficients # [py]
        type: numpy.ndarray # [py]
      - name: sineCoefficients # [cpp]
        type: Eigen::MatrixXd # [cpp]
        description: "Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j."

      - name: associated_reference_frame # [py]
        type: str # [py]
      - name: associatedReferenceFrame # [cpp]
        type: std::string # [cpp]
        description: Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated.

    returns:
        type: SphericalHarmonicsGravityFieldSettings
        description: "`SphericalHarmonicsGravityFieldSettings` object defined by the provided parameters."


  - name: spherical_harmonic_triaxial_body # [py]
  - name: createHomogeneousTriAxialEllipsoidGravitySettings # [cpp]
    short_summary: "Factory function for spherical harmonics gravity field settings object from triaxial ellipsoid parameters."
    extended_summary: |
      Factory function for settings object, defining a gravity field model through spherical harmonic expansion of a homogeneous triaxial ellipsoid.
      The constant mass distribution in the specified ellipsoid shape is expanded to obtain a spherical harmonic coefficient representation.
      Gravity fields from this setting object are expressed in normalized spherical harmonic coefficients.
      The body-fixed x-, y- and z- axes are assumed to be along the A-, B- and C- axes.
      This function returns a `GravityFieldSettings` derived `SphericalHarmonicsGravityFieldSettings` object.

    parameters:
      - name: axis_a # [py]
        type: float # [py]
      - name: axisA # [cpp]
        type: double # [cpp]
        description: Dimension of largest axis of triaxial ellipsoid.

      - name: axis_b # [py]
        type: float # [py]
      - name: axisB # [cpp]
        type: double # [cpp]
        description: Dimension of intermediate axis of triaxial ellipsoid.

      - name: axis_c # [py]
        type: float # [py]
      - name: axisC # [cpp]
        type: double # [cpp]
        description: Dimension of smallest axis of triaxial ellipsoid.

      - name: density # [py]
        type: float # [py]
      - name: ellipsoidDensity # [cpp]
        type: double # [cpp]
        description: Density of ellipsoid.

      - name: maximum_degree # [py]
        type: int # [py]
      - name: maximumDegree # [cpp]
        type: int # [cpp]
        description: Maximum degree of spherical harmonics expansion.

      - name: maximum_order # [py]
        type: int # [py]
      - name: maximumOrder # [cpp]
        type: int # [cpp]
        description: Maximum order of spherical harmonics expansion.

      - name: associated_reference_frame # [py]
        type: str # [py]
      - name: associatedReferenceFrame # [cpp]
        type: std::string # [cpp]
        description: Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated.

    returns:
        type: SphericalHarmonicsGravityFieldSettings
        description: "`SphericalHarmonicsGravityFieldSettings` object defined by expansion of homogeneous triaxial ellipsoid."

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
##################               Atmosphere Setup ( createAtmopshereModel.h )              ##########################
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

description: "None"
notes: "None"



classes:

###### enums

  # no enums

######

  - name: WindModelSettings
    short_summary: "Class for providing settings for wind model."
    extended_summary: |
      Functional (base) class for settings of wind models that require no information in addition to their type.
      Wind model classes requiring additional information must be created using an object derived from this class.

  - name: AtmosphereSettings
    short_summary: "Base class for providing settings for atmosphere model."
    extended_summary: |
      Functional (base) class for settings of atmosphere models that require no information in addition to their type.
      Atmosphere model classes requiring additional information must be created using an object derived from this class.

    attributes: # [py]
      - name: wind_settings # [py] # readonly
        type: WindModelSettings # [py]
        description: Wind model settings for the atmosphere model settings object. # [py]

    methods:
      - name: ctor # [cpp]
        #      - name: __init__ # [py]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for atmosphere models should be instantiated through the factory functions of a derived class." # [cpp]

      - name: setWindSettings # [cpp]
        short_summary: "Set wind settings for the atmosphere model settings object." # [cpp]
        extended_summary: "Function to set wind settings for the atmosphere model settings object." # [cpp]
        parameters: # [cpp]
          - name: windSettings # [cpp]
            type: WindModelSettings # [cpp]

      - name: getWindSettings # [cpp]
        short_summary: "Retrieve wind settings of the atmosphere model settings object." # [cpp]
        extended_summary: "Function to retrieve wind settings of the atmosphere model settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: WindModelSettings # [cpp]
            description: Wind settings of the atmosphere model settings object. # [cpp]


  # derived classes:

  - name: ExponentialAtmosphereSettings
    short_summary: "Class for providing settings for exponential atmosphere model."
    extended_summary: "`AtmosphereSettings` derived class for a defining the settings of an exponential atmosphere model."

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `ExponentialAtmosphereSettings` class should be created through the `exponential` factory function." # [cpp]


# this class does not have any factory function  exposed or even associated w/ it in tudat source.

#  - name: TabulatedAtmosphereSettings
#    short_summary: "Class for using tabulated data as atmosphere model settings."
#    extended_summary: "`AtmosphereSettings` derived class for using tabulated data for defining the settings of an atmosphere model."
#
#    methods:
#      - name: ctor # [cpp]
#        short_summary: "Constructor." # [cpp]
#        extended_summary: "Instances of the `TabulatedAtmosphereSettings` class should be created through the (%!)NONE factory function." # [cpp]


functions:

  # factory functions:
    # WindModelSettings FFs first

  - name: constant_wind_model # [py]
  - name: constantWindModelSettings # [cpp]
    short_summary: "Factory function for creating wind model settings with constant wind velocity."
    extended_summary: |
      Factory function for settings object, defining wind model entirely from constant wind velocity in a given reference frame.
      This function creates an instance of an `WindModelSettings` derived `ConstantWindModelSettings` object.

    parameters:
      - name: wind_velocity # [py]
        type: numpy.ndarray[numpy.float64[3, 1]] # [py]
      - name: constantWindVelocity # [cpp]
        type: std::string # [cpp]
        description: |
          Constant wind velocity in the specified reference frame.

      - name: associated_reference_frame # [py]
        type: numerical_simulation.environment.AerodynamicsReferenceFrames, default = AerodynamicsReferenceFrames.vertical_frame # [py]
      - name: associatedFrame # [cpp]
        type: reference_frames::AerodynamicsReferenceFrames, default = reference_frames::vertical_frame # [cpp]
        description: |
          Reference frame in which constant wind velocity is defined.

    returns:
        type: ConstantWindModelSettings  # [py]
        description: # [py]
        type: ConstantWindModelSettings  # [cpp]
        description: # [cpp]


  - name: custom_wind_model # [py]
  - name: customWindModelSettings # [cpp]
    short_summary: "Factory function for creating wind model settings with custom wind velocity."
    extended_summary: |
      Factory function for settings object, defining wind model entirely from custom wind velocity function in a given reference frame.
      The custom wind velocity has to be given as a function of altitude, longitude, latitude and time.
      This function creates an instance of an `WindModelSettings` derived `CustomWindModelSettings` object.

    parameters:
      - name: wind_velocity # [py]
        type: callable[[float, float, float, float], numpy.ndarray[numpy.float64[3, 1]]] # [py]
      - name: constantWindVelocity # [cpp]
        type: std::function< Eigen::Vector3d( const double, const double, const double, const double ) > # [cpp]
        description: |
          Custom wind velocity function (w.r.t. altitude, longitude, latitude and time) in the specified reference frame.

      - name: associated_reference_frame # [py]
        type: numerical_simulation.environment.AerodynamicsReferenceFrames, default = AerodynamicsReferenceFrames.vertical_frame # [py]
      - name: associatedFrame # [cpp]
        type: reference_frames::AerodynamicsReferenceFrames, default = reference_frames::vertical_frame # [cpp]
        description: |
          Reference frame in which constant wind velocity is defined.

    returns:
        type: CustomWindModelSettings  # [py]
        description: # [py]
        type: CustomWindModelSettings  # [cpp]
        description: # [cpp]


    # AtmosphereSettings hereafter

  - name: exponential_predefined # [py]
  - name: exponentialAtmosphereSettings # [cpp]
    short_summary: "Factory function for creating atmospheric model settings from pre-defined exponential model."
    extended_summary: |
      Factory function for settings object, defining atmosphere model from pre-defined exponential model.
      Model settings available for bodies Earth and Mars.
      This function creates an instance of an `AtmosphereSettings` derived `ExponentialAtmosphereSettings` object.

    parameters:
      - name: body_name # [py]
        type: str # [py]
      - name: bodyName # [cpp]
        type: std::string # [cpp]
        description: |
          Body for which pre-defined model settings are to be loaded. Available bodies "Earth", "Mars".

    returns:
        type: ExponentialAtmosphereSettings  # [py]
        description: # [py]
        type: ExponentialAtmosphereSettings  # [cpp]
        description: # [cpp]

  - name: exponential # [py]
  - name: exponentialAtmosphereSettings # [cpp]
    short_summary: "Factory function for creating atmospheric model settings from fully parametrized exponential model."
    extended_summary: |
      Factory function for settings object, defining exponential atmosphere model from fully parametrized model.
      This means that in addition to scale height and ground-level air density parameters the user can specify a constant temperature
      and even non-standard values for gas constant and speficic heats ratio.
      This function creates an instance of an `AtmosphereSettings` derived `ExponentialAtmosphereSettings` object.

    parameters:

      - name: scale_height # [py]
        type: float # [py]
      - name: densityScaleHeight # [cpp]
        type: double # [cpp]
        description: "Scale height for density profile of atmosphere."

      - name: surface_density # [py]
        type: float # [py]
      - name: densityAtZeroAltitude # [cpp]
        type: double # [cpp]
        description: "Atmospheric density at ground level."

      - name: constant_temperature # [py]
        type: float, default = 288.15 # [py]
      - name: constantTemperature # [cpp]
        type: double, default = 288.15 # [cpp]
        description: "Constant atmospheric temperature."

      - name: specific_gas_constant # [py]
        type: float, default = constants.SPECIFIC_GAS_CONSTANT_AIR # [py]
      - name: specificGasConstant # [cpp]
        type: double, default = physical_constants::SPECIFIC_GAS_CONSTANT_AIR # [cpp]
        description: "Specific gas constant for (constant) atmospheric chemical composition."

      - name: ratio_specific_heats # [py]
        type: float, default = 1.4 # [py]
      - name: ratioOfSpecificHeats # [cpp]
        type: double, default = 1.4  # [cpp]
        description: "Ratio of specific heats for (constant) atmospheric chemical composition."

    returns:
        type: ExponentialAtmosphereSettings # [py]
        description: # [py]
        type: ExponentialAtmosphereSettings # [cpp]
        description: # [cpp]



  - name: nrlmsise00 # [py]
  - name: nrlmsise00AtmosphereSettings # [cpp]
    short_summary: "Factory function for creating NRLMSISE-00 atmospheric model settings."
    extended_summary: |
      Factory function for settings object, defining atmosphere model in accordance to NRLMSISE-00 atmospheric model.
      Note that NRLMSISE-00 is a global reference model for Earth's atmosphere.
      This function creates an instance of an `AtmosphereSettings` object.

    returns:
        type: AtmosphereSettings # [py]
        description:  # [py]
        type: AtmosphereSettings # [cpp]
        description: AtmosphereSettings object of athmosphereType nrlmsise00.# [cpp]


  - name: custom_constant_temperature # [py]
  - name: customConstantTemperatureAtmosphereSettings # [cpp]
    short_summary: "Factory function for creating atmospheric model settings from custom density profile."
    extended_summary: |
      Factory function for settings object, defining constant temperature atmosphere model from custom density profile.
      The user is specifying the density profile as a function of altitude.
      This function creates an instance of an `AtmosphereSettings` derived `CustomConstantTemperatureAtmosphereSettings` object.

    parameters:

      - name: density_function # [py]
        type: callable[[float], float] # [py]
      - name: densityFunction # [cpp]
        type: std::function< double(const double) > # [cpp]
        description: |
          Function to retrieve the density at the current altitude.

      - name: constant_temperature # [py]
        type: float # [py]
      - name: constantTemperature # [cpp]
        type: double # [cpp]
        description: "Constant atmospheric temperature."

      - name: specific_gas_constant # [py]
        type: float, default = 287.0 # [py]
      - name: specificGasConstant # [cpp]
        type: double, default = physical_constants::SPECIFIC_GAS_CONSTANT_AIR # [cpp]
        description: "Specific gas constant for (constant) atmospheric chemical composition."

      - name: ratio_specific_heats # [py]
        type: float, default = 1.4 # [py]
      - name: ratioOfSpecificHeats # [cpp]
        type: double, default = 1.4  # [cpp]
        description: "Ratio of specific heats for (constant) atmospheric chemical composition."

    returns:
        type: CustomConstantTemperatureAtmosphereSettings # [py]
        description: # [py]
        type: CustomConstantTemperatureAtmosphereSettings # [cpp]
        description: # [cpp]


  - name: custom_four_dimensional_constant_temperature # [py]
  - name: customConstantTemperatureAtmosphereSettings # [cpp]
    short_summary: "Factory function for creating atmospheric model settings from custom density profile."
    extended_summary: |
      Factory function for settings object, defining constant temperature atmosphere model from custom density profile.
      The user is specifying the density profile as a function of altitude, longitude, latitude and time.
      This function creates an instance of an `AtmosphereSettings` derived `CustomConstantTemperatureAtmosphereSettings` object.

    parameters:

      - name: density_function # [py]
        type: callable[[float, float, float, float], float] # [py]
      - name: densityFunction # [cpp]
        type: std::function< double( const double, const double, const double, const double ) > # [cpp]
        description: |
          Function to retrieve the density at the current altitude, longitude, latitude and time.

      - name: constant_temperature # [py]
        type: float # [py]
      - name: constantTemperature # [cpp]
        type: double # [cpp]
        description: "Constant atmospheric temperature."

      - name: specific_gas_constant # [py]
        type: float, default = 287.0 # [py]
      - name: specificGasConstant # [cpp]
        type: double, default = physical_constants::SPECIFIC_GAS_CONSTANT_AIR # [cpp]
        description: "Specific gas constant for (constant) atmospheric chemical composition."

      - name: ratio_specific_heats # [py]
        type: float, default = 1.4 # [py]
      - name: ratioOfSpecificHeats # [cpp]
        type: double, default = 1.4  # [cpp]
        description: "Ratio of specific heats for (constant) atmospheric chemical composition."

    returns:
        type: CustomConstantTemperatureAtmosphereSettings # [py]
        description: # [py]
        type: CustomConstantTemperatureAtmosphereSettings # [cpp]
        description: # [cpp]


  - name: scaled_by_function # [py]
  - name: scaledAtmosphereSettings # [cpp]
    short_summary: "Factory function for creating scaled atmospheric model settings."
    extended_summary: |
      Factory function for settings object, defining atmospheric model based on scaling an existing atmospheric settings object.
      The user can apply custom scaling factors (or absolute values) to the air densities of the existing model settings (for instance for an uncertainty analysis).
      This function creates an instance of an `AtmosphereSettings` derived `ScaledAtmosphereSettings` object.

    parameters:
      - name: unscaled_atmosphere_settings # [py]
        type: AtmosphereSettings # [py] # (%! correct type?)
      - name: baseSettings # [cpp]
        type: std::shared_ptr< AtmosphereSettings > # [cpp]
        description: "Sets base settings of atmosphere model to be scaled."

      - name: density_scaling_function # [py]
        type: float # [py]
      - name: scaling # [cpp]
        type: std::function< double( const double ) >  # [cpp]
        description: "Specifies air density scaling factors as a function of time."

      - name: is_scaling_absolute # [py]
        type: bool, default=false # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: |
          Boolean indicating whether density scaling is absolute. Setting this boolean to true will add the scaling value to the basline density, instead of the default behaviour of multiplying the baseline density by the scaling value.

    returns:
        type: ScaledAtmosphereSettings # [py]
        description: # [py]
        type: ScaledAtmosphereSettings # [cpp]
        description: # [cpp]


  - name: scaled_by_constant # [py]
  - name: scaledAtmosphereSettings # [cpp]
    short_summary: "Factory function for creating scaled atmospheric model settings."
    extended_summary: |
      Factory function for settings object, defining atmospheric model based on an scaling of an existing atmospheric settings object.
      The user can apply a scaling factor (or an absolute value) to the air densities of the existing model settings (for instance for an uncertainty analysis).
      This function creates an instance of an `AtmosphereSettings` derived `ScaledAtmosphereSettings` object.

    parameters:
      - name: unscaled_atmosphere_settings # [py]
        type: AtmosphereSettings # [py] # (%! correct type?)
      - name: baseSettings # [cpp]
        type: std::shared_ptr< AtmosphereSettings > # [cpp]
        description: "Sets base settings of atmosphere model to be scaled."

      - name: density_scaling # [py]
        type: float # [py]
      - name: scaling # [cpp]
        type: double # [cpp]
        description: "Constant scaling factor to be applied to the entire air density profile."

      - name: is_scaling_absolute # [py]
        type: bool, default=false # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: |
          Boolean indicating whether density scaling is absolute. Setting this boolean to true will add the scaling value to the basline density, instead of the default behaviour of multiplying the baseline density by the scaling value.

    returns:
        type: ScaledAtmosphereSettings # [py]
        description: # [py]
        type: ScaledAtmosphereSettings # [cpp]
        description: # [cpp]



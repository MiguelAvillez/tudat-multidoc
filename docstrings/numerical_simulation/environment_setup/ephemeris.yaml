# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
################## Ephemeris Setup ( approximatePlanetPositionsBase.h, createEphemeris.h ) ##########################
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

description: "None"
notes: "None"



classes:

###### enums


######


  - name: EphemerisSettings
    short_summary: "Base class for providing settings for ephemeris model."
    extended_summary: |
      Functional (base) class for settings of ephemeris models that require no information in addition to their type (and frame origin and orientation).
      Ephemeris model classes requiring additional information must be created using an object derived from this class.

    attributes: # [py]
      - name: ephemeris_type # [py] # readonly
        type: EphemerisType # [py]
        description: Type of ephemeris that is to be created. # [py]

      - name: frame_origin # [py]
        type: str # [py]
        description: Origin of frame in which ephemeris data is to be defined. # [py]

      - name: frame_orientation # [py]
        type: str # [py]
        description: Orientation of frame in which ephemeris data is to be defined. # [py]

      - name: make_multi_arc_ephemeris # [py]
        type: bool # [py]
        description: Boolean denoting whether the ephemeris that is to be created is a multi-arc ephemeris. # [py]


    methods:
      - name: ctor # [cpp]
        #      - name: __init__ # [py]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for ephemerides should be instantiated through the factory functions of a derived class." # [cpp]

      - name: getEphemerisType # [cpp]
        short_summary: "Retrieve ephemeris type." # [cpp]
        extended_summary: "Function to retrieve the type of ephemeris that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: EphemerisType # [cpp]
            description: Type of ephemeris that is to be created. # [cpp]

      - name: getFrameOrigin # [cpp]
        short_summary: "Retrieve frame origin." # [cpp]
        extended_summary: "Function to retrieve the frame origin of the ephemeris that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: std::string # [cpp]
            description: Ephemeris frame origin. # [cpp]

      - name: getFrameOrientation # [cpp]
        short_summary: "Retrieve frame orientation." # [cpp]
        extended_summary: "Function to retrieve the frame orientation of the ephemeris that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: std::string # [cpp]
            description: Ephemeris frame orientation. # [cpp]

      - name: getMultiArcEphemeris # [cpp]
        short_summary: "Check whether the ephemeris that is to be created is a multi-arc ephemeris." # [cpp]
        extended_summary: "Function to retrieve boolean denoting whether the ephemeris that is to be created is a multi-arc ephemeris." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: std::string # [cpp]
            description: Boolean denoting whether the ephemeris that is to be created is a multi-arc ephemeris. # [cpp]

      - name: resetFrameOrigin # [cpp]
        short_summary: "Reset frame origin." # [cpp]
        extended_summary: "Function to reset the frame origin of the ephemeris that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: frameOrigin # [cpp]
            type: std::string # [cpp]
            description: Ephemeris frame origin. # [cpp]

      - name: resetFrameOrientation # [cpp]
        short_summary: "Reset frame orientation." # [cpp]
        extended_summary: "Function to reset the frame orientation of the ephemeris that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: frameOrientation # [cpp]
            type: std::string # [cpp]
            description: Ephemeris frame orientation. # [cpp]

      - name: resetMakeMultiArcEphemeris # [cpp]
        short_summary: "Set whether the ephemeris that is to be created is a multi-arc ephemeris." # [cpp]
        extended_summary: "Function to reset boolean denoting whether the ephemeris that is to be created is a multi-arc ephemeris." # [cpp]
        parameters: # [cpp]
          - name: makeMultiArcEphemeris # [cpp]
            type: std::string # [cpp]
            description: Boolean denoting whether the ephemeris that is to be created is a multi-arc ephemeris. # [cpp]


  # derived classes:
  - name: ScaledEphemerisSettings
    short_summary: "Class for defining settings from scaling existing ephemeris settings."
    extended_summary: "`EphemerisSettings` derived class for a new ephemeris created from scaling an existing ephemeris settings object. It allows the user to apply a scaling factor to the resulting Cartesian states (for instance for an uncertainty analysis)."

    # class is not exposed as class in tudatpy
    # attributes:

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `ScaledEphemerisSettings` class should be created through the `scaledEphemerisSettings` factory function." # [cpp]
      #      - name: __init__ # [py]
      #        short_summary: "Constructor."
      #        extended_summary: "Instances of the `ScaledEphemerisSettings` class should be created through the `scaled` factory function." # [py]

      - name: getBaseSettings # [cpp]
        short_summary: "Retrieve base settings of (un)scaled ephemeris." # [cpp]
        extended_summary: "Function to retrieve the base settings (frame origin and orientation) of (un)scaled ephemeris." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: std::shared_ptr< EphemerisSettings > # [cpp]
            description: Base settings (frame origin and orientation) of (un)scaled ephemeris. # [cpp]

      - name: getScaling # [cpp]
        short_summary: "Retrieve scaling factor(s)." # [cpp]
        extended_summary: | # [cpp]
          Function to retrieve the scaling factor(s). Can be constant factor for all elements of Cartesian state, constant factor for each Cartesian state or even custom time-dependent function for scaling factors for each Cartesian state. # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: double, Eigen::Vector6d, std::function< Eigen::Vector6d( const double ) > # [cpp]
            description: Scaling factor(s) for ephemeris scaling. # [cpp]

      - name: getIsScalingAbsolute # [cpp]
        short_summary: "Check whether ephemeris scaling is absolute." # [cpp]
        extended_summary: | # [cpp]
          Function to retrieve the boolean indicating whether ephemeris scaling is absolute. When set to true (default false), the scaling factors will be interpreted as values and added to the state. # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          - type: bool # [cpp]
            description: Boolean indicating whether ephemeris scaling is absolute. # [cpp]


  - name: DirectSpiceEphemerisSettings
    short_summary: "Class for defining settings of an ephemeris linked directly to Spice."
    extended_summary: "`EphemerisSettings` derived class for ephemeris which are directly linked to Spice."

    attributes: # [py]
      - name: correct_for_stellar_aberration # [py] # readonly
        type: bool # [py]
        description: Boolean defining whether to correct for stellar abberations in retrieved values (of observed state). # [py]

      - name: correct_for_light_time_aberration # [py] # readonly
        type: bool # [py]
        description: Boolean defining whether to correct for light time in retrieved values (of observed state). # [py]

      - name: converge_light_time_aberration # [py] # readonly
        type: bool # [py]
        description: Boolean defining whether to use single iteration or max. 3 iterations for calculating light time correction. # [py]

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `DirectSpiceEphemerisSettings` class should be created through the `directSpiceEphemerisSettings` factory function." # [cpp]
      #      - name: __init__ # [py]
      #        short_summary: "Constructor." # [py]
      #        extended_summary: "Instances of the `DirectSpiceEphemerisSettings` class should be created through the `direct_spice` factory function." # [py]

      - name: getCorrectForStellarAberration # [cpp]
        short_summary: "Check whether to correct for stellar aberration." # [cpp]
        extended_summary: | # [cpp]
          Function to retrieve the boolean which indicates whether to correct for stellar aberration in retrieved values (of observed state). # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: bool # [cpp]
            description: Boolean defining whether to correct for stellar abberations in retrieved values (of observed state). # [cpp]

      - name: getCorrectForLightTimeAberration # [cpp]
        short_summary: "Check whether to correct for light time aberration." # [cpp]
        extended_summary: | # [cpp]
          Function to retrieve the boolean which indicates whether to correct for light time abberation in retrieved values (of observed state). # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: bool # [cpp]
            description: Boolean defining whether to correct for light time abberations in retrieved values (of observed state). # [cpp]

      - name: getConvergeLighTimeAberration # [cpp]
        short_summary: "Check whether to use iterative solution for light time." # [cpp]
        extended_summary: | # [cpp]
          Function to retrieve the boolean which indicates whether to use single iteration or max. 3 iterations for calculating light time. # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: bool # [cpp]
            description: Boolean defining whether to use single iteration or max. 3 iterations for calculating light time. # [cpp]



  - name: InterpolatedSpiceEphemerisSettings
    short_summary: "Class for defining settings of an ephemeris interpolated from Spice data."
    extended_summary: "`DirectSpiceEphemerisSettings` derived class for setting ephemerides to be created from interpolated Spice ephemeris data."

    attributes: # [py]
      - name: initial_time # [py] # readonly
        type: float # [py]
        description: "Initial time from which interpolated data from Spice should be created." # [py]

      - name: final_time # [py] # readonly
        type: float # [py]
        description: "Final time from which interpolated data from Spice should be created." # [py]

      - name: time_step # [py] # readonly
        type: float # [py]
        description: "Time step setting to be used for the state interpolation." # [py]


    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `InterpolatedSpiceEphemerisSettings` class should be created through the `interpolatedSpiceEphemerisSettings` factory function." # [cpp]
      #      - name: __init__ # [py]
      #        short_summary: "Constructor." # [py]
      #        extended_summary: "Instances of the `InterpolatedSpiceEphemerisSettings` class should be created through the `interpolated_spice` factory function." # [py]

      - name: getInitialTime # [cpp]
        short_summary: "Retrieve initial time of interpolation." # [cpp]
        extended_summary: "Function to retrieve initial time from which interpolated data from Spice should be created." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: double # [cpp]
            description: "Initial time from which interpolated data from Spice should be created." # [cpp]

      - name: getFinalTime # [cpp]
        short_summary: "Retrieve final time of interpolation." # [cpp]
        extended_summary: "Function to retrieve final time from which interpolated data from Spice should be created." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: double # [cpp]
            description: "Final time from which interpolated data from Spice should be created." # [cpp]

      - name: getTimeStep # [cpp]
        short_summary: "Retrieve time step used for interpolation." # [cpp]
        extended_summary: "Function to retrieve time step setting to be used for the state interpolation." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: double # [cpp]
            description: "Time step setting to be used for the state interpolation." # [cpp]


  - name: ApproximatePlanetPositionSettings
    short_summary: "Class for creating settings of approximate ephemeris for major planets."
    extended_summary: "`EphemerisSettings` derived class for approximate ephemeris for major planets as inplemented in ApproximatePlanetPositions class and derived class (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf)."

    attributes: # [py]
      - name: body_identifier # [py] # readonly
        # (%! unable to find translated type in tudatpy) type: ephemerides::ApproximatePlanetPositionsBase::BodiesWithEphemerisData
        description: "Type Parameter identifying for which body an ephemeris is to be created." # [py]

      - name: use_circular_coplanar_approximation # [py] # readonly
        type: bool # [py]
        description: "Boolean defining whether a circular coplanar orbit of the body is to be assumed." # [py]

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `ApproximatePlanetPositionSettings` class should be created through the `approximatePlanetPositionsSettings` factory function." # [cpp]
      #      - name: __init__ # [py]
      #        short_summary: "Constructor." # [py]
      #        extended_summary: "Instances of the `ApproximatePlanetPositionSettings` class should be created through the `approximate_planet_positions` factory function." # [py]


      - name: getBodyIdentifier # [cpp]
        short_summary: "Retrieve identifier for which body an ephemeris is to be created." # [cpp]
        extended_summary: "Function to retrieve parameter identifying for which body an ephemeris is to be created." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: ephemerides::ApproximatePlanetPositionsBase::BodiesWithEphemerisData # [cpp]
            description: "Type Parameter identifying for which body an ephemeris is to be created." # [cpp]

      - name: getUseCircularCoplanarApproximation # [cpp]
        short_summary: "Check weather a circular coplanar orbit of the body is to be assumed." # [cpp]
        extended_summary: | # [cpp]
          Function to retrieve parameter indicating whether a circular, coplanar orbit of the body is to be assumed. # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: bool # [cpp]
            description: "Boolean defining whether a circular coplanar orbit of the body is to be assumed." # [cpp]


  - name: ConstantEphemerisSettings
    short_summary: "Class for defining settings of constant ephemerides."
    extended_summary: "`EphemerisSettings` derived class for ephemerides producing a constant (time-independent) state."

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `ConstantEphemerisSettings` class should be created through the `constantEphemerisSettings` factory function." # [cpp]
      #      - name: __init__ # [py]
      #        short_summary: "Constructor." # [py]
      #        extended_summary: "Instances of the `ConstantEphemerisSettings` class should be created through the `constant` factory function." # [py]


      - name: getConstantState # [cpp]
        short_summary: "Retrieve the constant state." # [cpp]
        extended_summary: "Function to retrieve the constant (time-independent) state that defines the ephemeris to be created." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: Eigen::Vector6d # [cpp]
            description: "Constant (time-independent) state that defines the ephemeris to be created." # [cpp]


  - name: CustomEphemerisSettings
    short_summary: "Class for defining settings of a custom ephemeris."
    extended_summary: "`EphemerisSettings` derived class for ephemerides producing a custom state (e.g. arbitrary state as a function of time)."

    attributes: # [py]
      - name: custom_state_function # [py] # readonly
        # (%! unable to formulate that type in tudatpy) type: std::function< Eigen::Vector6d >
        description: "Function returning the state as a function of time." # [py]

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `CustomEphemerisSettings` class should be created through the `customEphemerisSettings` factory function." # [cpp]
      #      - name: __init__ # [py]
      #        short_summary: "Constructor." # [py]
      #        extended_summary: "Instances of the `CustomEphemerisSettings` class should be created through the `custom` factory function." # [py]


      - name: getCustomStateFunction # [cpp]
        short_summary: "Retrieve the function returning the state as a function of time." # [cpp]
        extended_summary: "Function to retrieve the function returning the state as a function of time." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: std::function< Eigen::Vector6d > # [cpp]
            description: "Function returning the state as a function of time." # [cpp]


  - name: KeplerEphemerisSettings # [cpp]
    short_summary: "Class for defining settings of an ideal Kepler orbit ephemeris." # [cpp]
    extended_summary: "`EphemerisSettings` derived class for ephemerides which represent an ideal Kepler orbit."

    attributes: # [py]
      - name: initial_state_in_keplerian_elements # [py] # readonly
        type: numpy.ndarray # [py]
        description: "Kepler elements at time epochOfInitialState." # [py]
      - name: epoch_of_initial_state # [py] # readonly
        type: float # [py]
        description: "Time at which initialStateInKeplerianElements represents the Keplerian state." # [py]
      - name: central_body_gravitational_parameter # [py] # readonly
        type: float # [py]
        description: "Gravitational parameter of the central body that is used in the computations." # [py]
      - name: root_finder_absolute_tolerance # [py] # readonly
        type: float # [py]
        description: "Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState." # [py]
      - name: root_finder_maximum_number_of_iterations # [py] # readonly
        type: float # [py]
        description: "Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState." # [py]

    methods:

      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `KeplerEphemerisSettings` class should be created through the `keplerEphemerisSettings` or `keplerEphemerisFromSpiceSettings` factory function." # [cpp]
      #      - name: __init__ # [py]
      #        short_summary: "Constructor." # [py]
      #        extended_summary: "Instances of the `KeplerEphemerisSettings` class should be created through the `keplerian` or `keplerian_from_spice` factory function." # [py]


      - name: getInitialStateInKeplerianElements # [cpp]
        short_summary: "Retrieve the kepler elements at time epochOfInitialState." # [cpp]
        extended_summary: "Function to retrieve the kepler elements at time epochOfInitialState." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: Eigen::Vector6d # [cpp]
            description: "Kepler elements at time epochOfInitialState." # [cpp]

      - name: getEpochOfInitialState # [cpp]
        short_summary: "Retrieve the initial epoch of propagation." # [cpp]
        extended_summary: "Function to retrieve the initial epoch from which propagation of Kepler orbit is performed." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: double # [cpp]
            description: "Time at which initialStateInKeplerianElements represents the Keplerian state." # [cpp]

      - name: getCentralBodyGravitationalParameter # [cpp]
        short_summary: "Retrieve the gravitational parameter of central body." # [cpp]
        extended_summary: "Function to retrieve the gravitational parameter of central body about which the Kepler orbit is defined." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: double # [cpp]
            description: "Gravitational parameter of the central body that is used in the computations." # [cpp]

      - name: getRootFinderAbsoluteTolerance # [cpp]
        short_summary: "Retrieve convergence tolerance for anomaly conversion." # [cpp]
        extended_summary: "Function to retrieve the convergence tolerance for root finder used to convert mean to eccentric anomaly." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: double # [cpp]
            description: "Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState." # [cpp]

      - name: getRootFinderMaximumNumberOfIterations # [cpp]
        short_summary: "Retrieve the maximum number of iteration for anomaly conversion." # [cpp]
        extended_summary: "Function to retrieve the maximum number of iteration for root finder used to convert mean to eccentric anomaly." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: double # [cpp]
            description: "Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState." # [cpp]


  - name: TabulatedEphemerisSettings
    short_summary: "Class for defining settings of ephemeris to be created from tabulated data."
    extended_summary: "`EphemerisSettings` derived class for ephemeris created from tabulated data. The provided data is interpolated into ephemerides."

    attributes: # [py]
      - name: body_state_history # [py] # readonly
        type: dict # [py]
        description: Dictionary of the discrete state history data from which ephemeris is to be created. Keys representing the time (float) and values representing Cartesian states (numpy.ndarray). # [py]
      - name: use_long_double_states # [py]
        type: bool # [py]
        description: Boolean defining whether increased numerical precision (long double type) is to be used when creating the ephemeris. # [py]

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `TabulatedEphemerisSettings` class should be created through the `tabulatedEphemerisSettings` factory function." # [cpp]
      #      - name: __init__ # [py]
      #        short_summary: "Constructor."  # [py]
      #        extended_summary: "Instances of the `TabulatedEphemerisSettings` class should be created through the `tabulated` factory function." # [py]

      - name: getBodyStateHistory # [cpp]
        short_summary: "Retrieve body state history." # [cpp]
        extensive_summary: "Function to retrieve data map defining discrete state history data from which ephemeris is to be created." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: std::map< double, Eigen::Vector6d > # [cpp]
            description: Data map defining discrete data from which an ephemeris is to be created. # [cpp]

      - name: setUseLongDoubleStates # [cpp]
        short_summary: "Set whether increased numerical precision is used." # [cpp]
        extended_summary: "Function to set boolean indicating whether increased numerical precision (long double type) is to be used when creating the ephemeris." # [cpp]
        parameters: # [cpp]
          - name: useLongDoubleStates # [cpp]
            type: bool # [cpp]
            description: Boolean indicating whether increased numerical precision (long double type) is to be used when creating the ephemeris. # [cpp]



functions:


  # factory functions:

  - name: directSpiceEphemerisSettings # [cpp]
    short_summary: "Factory function for creating ephemeris model settings entirely from Spice." # [cpp]
    extended_summary: | # [cpp]
      Factory function for settings object, defining ephemeris model directly and entirely from Spice. # [cpp]
      Requires an appropriate Spice kernel to be loaded. # [cpp]
      This function creates an instance of an `EphemerisSettings` derived `DirectSpiceEphemerisSettings` object. # [cpp]

    parameters: # [cpp]

      - name: frameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined." # [cpp]

      - name: frameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined." # [cpp]

      - name: correctForStellarAberration # [cpp]
        type: bool, default=false # [cpp]
        description: "Boolean whether to correct for stellar abberations in retrieved values (of observed state)." # [cpp]

      - name: correctForLightTimeAberration # [cpp]
        type: bool, default=false # [cpp]
        description: "Boolean whether to correct for light time in retrieved values (of observed state)." # [cpp]

      - name: convergeLighTimeAberration # [cpp]
        type: bool, default=false # [cpp]
        description: "Boolean whether to use single iteration or max. 3 iterations for calculating light time." # [cpp]

    returns: # [cpp]
        type: DirectSpiceEphemerisSettings # [cpp]
        description: # [cpp]

  - name: direct_spice # [py]
  - name: directSpiceEphemerisSettings # [cpp] # overload 1
    short_summary: "Factory function for creating ephemeris model settings entirely from Spice."
    extended_summary: |
      Factory function for settings object, defining ephemeris model directly and entirely from Spice.
      Requires an appropriate Spice kernel to be loaded.
      This function creates an instance of an `EphemerisSettings` derived `DirectSpiceEphemerisSettings` object.

    parameters:
      - name: frame_origin # [py]
        type: str, default='SSB' # [py]
      - name: frameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined."

      - name: frame_orientation # [py]
        type: str, default='ECLIPJ2000' # [py]
      - name: frameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined."

      - name: body_name_to_use # [py]
        type: str, default = "" # [py]
      - name: bodyNameOverride # [cpp]
        type: std::string, default = "" # [cpp]
        description: "?"

    returns:
        type: DirectSpiceEphemerisSettings  # [py]
        description: # [py]
        type: DirectSpiceEphemerisSettings  # [cpp]
        description: # [cpp]


  - name: interpolated_spice # [py]
  - name: interpolatedSpiceEphemerisSettings # [cpp]
    short_summary: "Factory function for creating ephemeris model settings using interpolated Spice data."
    extended summary: |
      Factory function for settings object defining an ephemeris model from interpolated Spice data.
      Using this option the state of the body is retrieved from Spice at regular intervals *before* the environment propagation (as opposed to during the propagation).
      These data are then used to create an interpolator, which is put into the environment, and called during the propagation.
      This has the advantage of only requiring calls to Spice outside of the propagation inner loop, reducing computation time in many cases (a single call to the interpolator is significantly faster that a single call to Spice).
      However, it has the downside of being applicable only during a limited time interval, and requiring the tabulated data to be stored in RAM.
      For many numerical integration scenarios, this approach may be faster than using `DirectSpiceEphemerisSettings`, with negligible influence on accuracy.
      This function creates an instance of a `DirectSpiceEphemerisSettings` derived `InterpolatedSpiceEphemerisSettings` object.

    parameters:

      - name: initial_time # [py]
        type: float # [py]
      - name: initialTime # [cpp]
        type: double # [cpp]
        description: "Initial time from which interpolated data from Spice should be created."

      - name: final_time # [py]
        type: float # [py]
      - name: finalTime # [cpp]
        type: double # [cpp]
        description: "Final time from which interpolated data from Spice should be created."

      - name: time_step # [py]
        type: float # [py]
      - name: timeStep # [cpp]
        type: double # [cpp]
        description: "Time step with which interpolated data from Spice should be created."

      - name: frame_origin # [py]
        type: str, default='SSB' # [py]
      - name: frameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined."

      - name: frame_orientation # [py]
        type: str, default='ECLIPJ2000' # [py]
      - name: frameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined."

      - name: interpolator_settings # [py]
        type: std::make_shared< interpolators::InterpolatorSettings >, default=std::make_shared<tudat::interpolators::LagrangeInterpolatorSettings>(6))
      - name: interpolatorSettings # [cpp]
        type: std::make_shared< interpolators::InterpolatorSettings >, default=std::make_shared< interpolators::LagrangeInterpolatorSettings >( 6 )
        description: "Settings to be used for the state interpolation."

      - name: body_name_to_use # [py]
        type: str, default = "" # [py]
      - name: bodyNameOverride # [cpp]
        type: std::string, default = "" # [cpp]
        description: "?"

    returns:
      type: InterpolatedSpiceEphemerisSettings # [py]
      description: # [py]
      type: InterpolatedSpiceEphemerisSettings # [cpp]
      description: # [cpp]


  # (%!) confirm that the approximatePlanetPositionsSettings FF situation is documented correctly
  - name: approximatePlanetPositionsSettings # [cpp] # (%! naming is misleading - Position vs Positions)
    short_summary: "Factory function for creating approximate ephemeris model settings for major planets." # [cpp]
    extended_summary: | # [cpp]
      Factory function for settings object, defining approximate ephemeris model for major planets. # [cpp]
      In this highly simplified ephemeris model, Keplerian elements of the major solar system bodies are modelled as linear functions of time and several sinusoidal variations (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf). # [cpp]
      #(%! only given in ctor, not FF) Three-dimensional and circular-coplanar approximation may be used. # [cpp]
      This function creates an instance of an `EphemerisSettings` derived `ApproximatePlanetPositionsSettings` object. # [cpp]

    parameters: # [cpp]
      - name: bodyIdentifier # [cpp]
        type: ephemerides::ApproximatePlanetPositionsBase::BodiesWithEphemerisData # [cpp]
        description: "Identifier for the body that the ephemeris is to be created for." # [cpp]

      #- name: use_circular_coplanar_approximation # [py]
      #  type: bool, default=false # [py]
      #- name: useCircularCoplanarApproximation # [cpp]
      #  type: bool, default=false # [cpp]
      #  description: |
      #    Boolean defining whether a circular, coplanar orbit of the body is to be assumed, or whether a non-zero inclination and long-period changes in the orbit are to be included.

    returns: # [cpp]
        type: ApproximatePlanetPositionSettings # [cpp]
        description: # [cpp]


  - name: approximate_planet_positions # [py]
  - name: approximatePlanetPositionsSettings # [cpp] # overload 1
    short_summary: "Factory function for creating approximate ephemeris model settings for major planets."
    extended_summary: |
      Factory function for settings object, defining approximate ephemeris model for major planets.
      In this highly simplified ephemeris model, Keplerian elements of the major solar system bodies are modelled as linear functions of time and several sinusoidal variations (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf).
      #(%! only given in ctor, not FF) Three-dimensional and circular-coplanar approximation may be used.
      This function creates an instance of an `EphemerisSettings` derived `ApproximatePlanetPositionsSettings` object.

    parameters:
      - name: body_name_to_use # [py]
        type: str # [py]
      - name: bodyName # [cpp]
        type: std::string # [cpp]
        description: "String that is attempted to be matched to an identifier for the body that the ephemeris is to be created for."

    returns:
        type: ApproximatePlanetPositionSettings
        description:


  - name: approximate_planet_positions # [py]
  - name: approximatePlanetPositionsSettings # [cpp] # overload 1
    short_summary: "Factory function for creating approximate ephemeris model settings for major planets."
    extended_summary: |
      Factory function for settings object, defining approximate ephemeris model for major planets.
      In this highly simplified ephemeris model, Keplerian elements of the major solar system bodies are modelled as linear functions of time and several sinusoidal variations (described on http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf).
      #(%! only given in ctor, not FF) Three-dimensional and circular-coplanar approximation may be used.
      This function creates an instance of an `EphemerisSettings` derived `ApproximatePlanetPositionsSettings` object.
    parameters:
      - name: None

    returns:
        type: ApproximatePlanetPositionSettings
        description:


  - name: constant # [py]
  - name: constantEphemerisSettings # [cpp]
    short_summary: "Factory function for creating constant ephemeris model settings."
    extended_summary: |
      Factory function for settings object, defining ephemeris model with a constant, time-independent state.
      This function creates an instance of an `EphemerisSettings` derived `constantEphemerisSettings` object.

    parameters:
      - name: constant_state # [py]
        type: numpy.ndarray # [py]
      - name: constantState # [cpp]
        type: Eigen::Vector6d # [cpp]
        description: "Constant state that will be provided as output of the ephemeris at all times."

      - name: frame_origin # [py]
        type: str, default='SSB' # [py]
      - name: frameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined."

      - name: frame_orientation # [py]
        type: str, default='ECLIPJ2000' # [py]
      - name: frameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined."

    returns:
        type: ConstantEphemerisSettings
        description: ""


  - name: custom # [py]
  - name: customEphemerisSettings # [cpp]
    short_summary: "Factory function for creating custom ephemeris model settings."
    extended_summary: |
      Factory function for settings object, defining ephemeris model with a custom state.
      This allows the user to provide an custom state function as ephemeris model.
      The state function (pointer) must be taking a time (float) as input and returning the Cartesian state (numpy.ndarray).
      This function creates an instance of an `EphemerisSettings` derived `customEphemerisSettings` object.

    parameters:
      - name: custom_state_function # [py]
        type: # [py] # (%! py type for function)
      - name: customStateFunction # [cpp]
        type: std::function< Eigen::Vector6d > # [cpp]
        description: "Function returning the state as a function of time."

      - name: frame_origin # [py]
        type: str, default='SSB' # [py]
      - name: frameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined."

      - name: frame_orientation # [py]
        type: str, default='ECLIPJ2000' # [py]
      - name: frameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined."

    returns:
        type: CustomEphemerisSettings
        description: ""

  - name: keplerian # [py]
  - name: keplerEphemerisSettings # [cpp]
    short_summary: "Factory function for creating Keplerian ephemeris model settings."
    extended_summary: |
      Factory function for settings object, defining ephemeris model which represents an ideal Kepler orbit from the given Kepler elements.
      These are taken as the elements at the ``initial_state_epoch`` and propagated to any other time using the provided ``central_body_gravitational_parameter``.
      See Frame/State Transformations (`link`) for more details on orbital elements in Tudat.
      This function creates an instance of an `EphemerisSettings` derived `KeplerEphemerisSettings` object.

    parameters:
      - name: initial_state_in_keplerian_elements # [py]
        type: numpy.ndarray # [py]
      - name: initialStateInKeplerianElements # [cpp]
        type: Eigen::Vector6d # [cpp]
        description: "Kepler elements at time epochOfInitialState."

      - name: initial_state_epoch # [py]
        type: float # [py]
      - name: epochOfInitialState # [cpp]
        type: double # [cpp]
        description: "Time at which initialStateInKeplerianElements represents the Keplerian state."

      - name: central_body_gravitational_parameter # [py]
        type: float # [py]
      - name: centralBodyGravitationalParameter # [cpp]
        type: double # [cpp]
        description: "Gravitational parameter of the central body that is used in the computations."

      - name: frame_origin # [py]
        type: str, default='SSB' # [py]
      - name: referenceFrameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined."

      - name: frame_orientation # [py]
        type: str, default='ECLIPJ2000' # [py]
      - name: referenceFrameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined."

      - name: root_finder_absolute_tolerance # [py]
        type: float # [py]
      - name: rootFinderAbsoluteTolerance # [cpp]
        type: double, default=200.0 * std::numeric_limits< double >::epsilon( ) # [cpp]
        description: "Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."

      - name: root_finder_maximum_number_of_iterations # [py]
        type: float # [py]
      - name: rootFinderMaximumNumberOfIterations # [cpp]
        type: double, default=200.0 * std::numeric_limits< double >::epsilon( ) # [cpp]
        description: "Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."

    returns:
        type: KeplerEphemerisSettings
        description: ""


  - name: keplerian_from_spice # [py]
  - name: keplerEphemerisFromSpiceSettings # [cpp]
    short_summary: "Factory function for creating Keplerian ephemeris model settings with initial state from Spice."
    extended_summary: |
      Factory function for settings object, defining ephemeris model which represents an ideal Kepler orbit from an initial state from Spice.
      The Kepler elements inferred from the initial state are propagated to any other time using the provided ``central_body_gravitational_parameter``.
      See Frame/State Transformations (`link`) for more details on orbital elements in Tudat.
      This function creates an instance of an `EphemerisSettings` derived `KeplerEphemerisSettings` object.

    parameters:
      - name: body # [py]
        type: str # [py]
      - name: body # [cpp] # (%!) suggest bodyName for consistency with cpp style and parameter of other functions
        type: std::string # [cpp]
        description: "Name of body for which to create ephemeris settings and infer initial state from Spice."

      - name: initial_state_epoch # [py]
        type: float # [py]
      - name: epochOfInitialState # [cpp]
        type: double # [cpp]
        description: "Time at which initialStateInKeplerianElements represents the Keplerian state."

      - name: central_body_gravitational_parameter # [py]
        type: float # [py]
      - name: centralBodyGravitationalParameter # [cpp]
        type: double # [cpp]
        description: "Gravitational parameter of the central body that is used in the computations."

      - name: frame_origin # [py]
        type: str, default='SSB' # [py]
      - name: referenceFrameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined."

      - name: frame_orientation # [py]
        type: str, default='ECLIPJ2000' # [py]
      - name: referenceFrameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined."

      - name: root_finder_absolute_tolerance # [py]
        type: float # [py]
      - name: rootFinderAbsoluteTolerance # [cpp]
        type: double, default=200.0 * std::numeric_limits< double >::epsilon( ) # [cpp]
        description: "Convergence tolerance for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."

      - name: root_finder_maximum_number_of_iterations # [py]
        type: float # [py]
      - name: rootFinderMaximumNumberOfIterations # [cpp]
        type: double, default=200.0 * std::numeric_limits< double >::epsilon( ) # [cpp]
        description: "Maximum iteration for root finder used to convert mean to eccentric anomaly on each call to getCartesianState."

    returns:
        type: KeplerEphemerisSettings
        description: ""


  - name: scaled_by_constant # [py]
  - name: scaledEphemerisSettings # [cpp]
    short_summary: "Factory function for creating scaled ephemeris model settings."
    extended_summary: |
      Factory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.
      The user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).
      This function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.

    parameters:
      - name: unscaled_ephemeris_settings # [py]
        type: EphemerisSettings # [py] # (%! correct type?)
      - name: baseSettings # [cpp]
        type: std::shared_ptr< EphemerisSettings > # [cpp]
        description: "Sets base settings of ephemeris to be scaled."

      - name: scaling_constant # [py]
        type: float # [py]
      - name: scaling # [cpp]
        type: double # [cpp]
        description: "Constant scaling factor to be applied to all elements of the Cartesian state."

      - name: is_scaling_absolute # [py]
        type: bool, default=false # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: "Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value."

    returns:
        type: ScaledEphemerisSettings
        description: ""


  - name: scaled_by_vector # [py]
  - name: scaledEphemerisSettings # [cpp]
    short_summary: "Factory function for creating scaled ephemeris model settings."
    extended_summary: |
      Factory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.
      The user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).
      This function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.

    parameters:
      - name: unscaled_ephemeris_settings # [py]
        type: EphemerisSettings # [py] # (%! correct type?)
      - name: baseSettings # [cpp]
        type: std::shared_ptr< EphemerisSettings > # [cpp]
        description: "Sets base settings of ephemeris to be scaled."

      - name: scaling_vector # [py]
        type: numpy.ndarray[numpy.float64[6, 1]] # [py]
      - name: scaling # [cpp]
        type: Eigen::Vector6d # [cpp]
        description: "Vector containing scaling factors to be applied to each element of the Cartesian state."

      - name: is_scaling_absolute # [py]
        type: bool, default=false # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: "Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value."

    returns:
        type: ScaledEphemerisSettings
        description: ""

  - name: scaled_by_vector_function # [py]
  - name: scaledEphemerisSettings # [cpp]
    short_summary: "Factory function for creating scaled ephemeris model settings."
    extended_summary: |
      Factory function for settings object, defining ephemeris model based on an scaling of an existing ephemeris settings object.
      The user can apply a scaling factor (or an absolute value) to the resulting Cartesian states (for instance for an uncertainty analysis).
      This function creates an instance of an `EphemerisSettings` derived `ScaledEphemerisSettings` object.

    parameters:
      - name: unscaled_ephemeris_settings # [py]
        type: EphemerisSettings # [py] # (%! correct type?)
      - name: baseSettings # [cpp]
        type: std::shared_ptr< EphemerisSettings > # [cpp]
        description: "Sets base settings of ephemeris to be scaled."

      - name: scaling_vector_function # [py]
        type: Callable[[float], numpy.ndarray[numpy.float64[6, 1]]] # [py]
      - name: scaling # [cpp]
        type: std::function< Eigen::Vector6d( const double ) > # [cpp]
        description: "Function returning a vector with the scaling factors to be applied to each element of the Cartesian state."

      - name: is_scaling_absolute # [py]
        type: bool, default=false # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: "Boolean indicating whether ephemeris scaling is absolute. Setting this boolean to true will add the scaling value to the state, instead of the default behaviour of multiplying the state by the scaling value."

    returns:
        type: ScaledEphemerisSettings
        description: ""

  - name: tabulated # [py]
  - name: tabulatedEphemerisSettings # [cpp]
    short_summary: "Factory function for creating ephemeris model settings from tabulated data."
    extended_summary: |
      Factory function for settings object, defining ephemeris model to be created from tabulated data.
      Currently the data that is provided gets interpolated by a 6th order Lagrange interpolator (hardcoded).
      At the edges of the interpolation interval a cubic spline interpolator is used to suppres the influence of Runge's phenomenon.
      This function creates an instance of an `EphemerisSettings` derived `TabulatedEphemerisSettings` object.

    parameters:
      - name: body_state_history # [py] # readonly
        type: dict # [py]
        description: Dictionary of the discrete state history data from which ephemeris is to be created. Keys representing the time (float) and values representing Cartesian states (numpy.ndarray). # [py]
      - name: bodyStateHistory # [cpp]
        type: std::map< double, Eigen::Vector6d > # [cpp]
        description: Data map defining discrete data from which an ephemeris is to be created. Keys representing the time (double) and values representing Cartesian states (Eigen::Vector6d). # [cpp]

      - name: frame_origin # [py]
        type: str, default='SSB' # [py]
      - name: frameOrigin # [cpp]
        type: std::string, default='SSB' # [cpp]
        description: "Origin of frame in which ephemeris data is defined."

      - name: frame_orientation # [py]
        type: str, default='ECLIPJ2000' # [py]
      - name: frameOrientation # [cpp]
        type: std::string, default='ECLIPJ2000' # [cpp]
        description: "Orientation of frame in which ephemeris data is defined."

    returns:
        type: TabulatedEphemerisSettings
        description: ""

#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################
# Rotation Model Setup ( createRotationalModel.h )

extended_summary: |
  This module contains a set of factory functions for setting up the
  rotation models of celestial bodies in an environment.


#########################################################################
#  ███████ ███   ██ ██    ██ ███    ███  ██████
#  ██      ████  ██ ██    ██ ████  ████ █
#  █████   ██ ██ ██ ██    ██ ██ ████ ██  █████
#  ██      ██  ████ ██    ██ ██  ██  ██       █
#  ███████ ██    ██  ██████  ██      ██ ██████
#########################################################################

enums:

  #    py::enum_<tss::RotationModelType>
  #        enum tudat::simulation_setup::RotationModelType

  - name: RotationModelType
    short_summary: "Enumeration of rotation model types."
    extended_summary: |
      Enumeration of rotation model types supported by tudat.

    members:
      - name: simple_rotation_model
      - name: spice_rotation_model
      - name: gcrs_to_itrs_rotation_model
      - name: synchronous_rotation_model
      - name: planetary_rotation_model

  #      py::enum_<tba::IAUConventions>
  #          enum tudat::basic_astrodynamics::IAUConventions

  - name: IAUConventions
    short_summary: "Enumeration of IAU conventions for Earth rotation."
    extended_summary: |
      Enumeration of IAU conventions for Earth rotation supported by tudat.

    members:
      - name: iau_2000_a
      - name: iau_2000_b
      - name: iau_2006


#########################################################################
#   ██████ ██          ██      ██████  ██████ ███████  ██████
#  ██      ██         ████    █       █       ██      █
#  ██      ██        ██  ██    █████   █████  █████    █████
#  ██      ██       ████████        █       █ ██            █
#   ██████ ███████ ██      ██ ██████  ██████  ███████ ██████
#########################################################################

classes:
  # base class:
  #######################################################################

  - name: RotationModelSettings
    short_summary: "Base class for providing settings for automatic rotation model creation."
    extended_summary: |
      This class is a functional base class for settings of rotation models that require no information in addition to their type.
      Basic rotation model has constant orientation of the rotation axis (body-fixed z-axis) and constant rotation rate about this axis.
      Rotation models requiring additional information must be created using the factory functions which create the specific object derived from this base class.

    properties: # [py]
      - name: rotation_type # [py]
        type: RotationModelType # [py]
        description: Type of rotation model that is to be created. # [py]
        readonly: True # [py]

      - name: base_frame # [py]
        type: str # [py]
        description: Base frame of rotation model. # [py]

      - name: target_frame # [py]
        type: str # [py]
        description: Target frame of rotation model. # [py]
        readonly: True # [py]

    methods:
      #      - name: __init__ # [py]
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for rotation models should be instantiated through the factory functions of a derived class." # [cpp]

      - name: getRotationType # [cpp]
        short_summary: "Retrieve rotation model type." # [cpp]
        extended_summary: "Function to retrieve the type of rotation model that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: RotationModelType # [cpp]
            description: Type of rotation model that is to be created. # [cpp]

      - name: getOriginalFrame # [cpp]
        short_summary: "Retrieve base frame." # [cpp]
        extended_summary: "Function to retrieve the base frame of rotation model that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: std::string # [cpp]
            description: Base frame of rotation model. # [cpp]

      - name: getTargetFrame # [cpp]
        short_summary: "Retrieve target frame." # [cpp]
        extended_summary: "Function to retrieve the target frame of rotation model that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: std::string # [cpp]
            description: Target frame of rotation model. # [cpp]

      - name: resetOriginalFrame # [cpp]
        short_summary: "Reset base frame." # [cpp]
        extended_summary: "Function to reset the orientation of the base frame." # [cpp]
        parameters: # [cpp]
          - name: originalFrame # [cpp]
            type: std::string # [cpp]
            description: Base frame of rotation model that is to be defined by the settings object. # [cpp]



##############################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
##############################################################################

functions:
  # factory functions:
  #######################################################################

  - name: simpleRotationModelSettings # [cpp]     # overload cpp
    short_summary: "Factory function for creating simple rotation model settings." # [cpp]
    extended_summary: "Factory function for settings object, defining a basic rotation model with constant orientation of the rotation axis and constant rotation rate about this axis. Rotation from original (inertial) to target (body-fixed) frame at some reference time ``initial_time`` is defined by the ``initial_orientation`` rotation matrix. Rotation about the body-fixed z-axis is defined by the ``rotation_rate`` float variable (in rad/s). This function creates an instance of a `RotationModelSettings` derived `simpleRotationModelSettings` object."  # [cpp]

    parameters: # [cpp]

      - name: originalFrame # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model. # [cpp]

      - name: target_frame # [cpp]
        type: std::string # [cpp]
        description: Target frame of rotation model. # [cpp]

      - name: initialOrientation # [cpp]
        type: Eigen::Quaterniond # [cpp]
        description: Orientation of target frame in base frame at initial time. # [cpp]


      - name: initialTime # [cpp]
        type: double # [cpp]
        description: Initial time (reference epoch for rotation matrices). # [cpp]


      - name: rotationRate # [cpp]
        type: double # [cpp]
        description: Constant rotation rate [rad/s] about rotational axis. # [cpp]

    returns: # [cpp]
        type: SimpleRotationModelSettings # [cpp]
        description: Simple rotation model settings object (derived from `RotationModelSettings` base class). # [cpp]

  #######################################################################

  - name: simple # [py]
  - name: simpleRotationModelSettings # [cpp]     # overload 1, cpp only
    short_summary: "Factory function for creating simple rotation model settings."
    extended_summary: |
      Factory function for settings object, defining a basic rotation model with constant orientation of the rotation axis and constant rotation rate about this axis.
      Rotation from original (inertial) to target (body-fixed) frame at some reference time ``initial_time`` (:math:`t_{0}`) is defined by the ``initial_orientation`` (:math:`\mathbf{R}^{(B/I)}(t_{0})`) rotation matrix.
      Rotation about the body-fixed z-axis is defined by the ``rotation_rate`` (:math:`\omega`) float variable (in rad/s). The rotation matrix is computed from:

      .. math::
         \mathbf{R}^{(B/I)}(t)=mathbf{R}_{z}(\omega(t-t_{0}))(t_{0})\mathbf{R}^{(B/I)}(t_{0})

      where :math:`\mathbf{R}^{(B/I)}` denotes the rotation matrix from inertial to body-fixed frame, and :math:`\mathbf{R}_{z}` denotes a rotaion matrix about the z-axis.

      The matrix :math:`\mathbf{R}^{(B/I)}(t_{0})` is sometimes parameterized by pole right ascension and declination (:math:`\alpha` and :math:`\delta`), as well as the meridian of date :math:`W_{0}` with
 
      .. math::
         \mathbf{R}^{(B/I)}(t_{0})=\mathbf{R}_{z}(W_{0})\mathbf{R}_{x}(\pi/2-\delta)\mathbf{R}_{z}(\pi/2+\alpha)
     
    parameters:
      - name: base_frame # [py]
        type: str # [py]
      - name: originalFrame # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: target_frame # [cpp]
        type: std::string # [cpp]
        description: Target frame of rotation model.

      - name: initial_orientation # [py]
        type: numpy.ndarray[numpy.float64[3, 3]] # [py]
      - name: initialOrientation # [cpp]
        type: Eigen::Matrix3d # [cpp]
        description: Orientation of target frame in base frame at initial time.

      - name: initial_time # [py]
        type: float # [py]
      - name: initialTime # [cpp]
        type: double # [cpp]
        description: Initial time (reference epoch for rotation matrices).

      - name: rotation_rate # [py]
        type: float # [py]
      - name: rotationRate # [cpp]
        type: double # [cpp]
        description: Constant rotation rate [rad/s] about rotational axis.

    returns:
        type: SimpleRotationModelSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.SimpleRotationModelSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` for Earth,
      using a simple rotation model with constant orientation of the rotation axis (body-fixed z-axis), and constant rotation rate about this axis:

      .. code-block:: python # [py]
        # [py]
        # Set parameters describing the rotation between the two frames # [py]
        initial_orientation = np.array([[1, 0, 0], [0, -1, 0], [0, 0, 1]]) # [py]
        initial_time = 12345 # [sec since J2000] # [py]
        rotation_rate = 2e-5 # [rad/s] # [py]
        original_frame = "J2000" # [py]
        target_frame = "Earth_Fixed_Simplified" # [py]
        # Create the rotation model settings and assign to body settings of "Earth" # [py]
        body_settings.get( "Earth" ).rotation_model_settings = environment_setup.rotation_model.simple( # [py]
            original_frame, # [py]
            target_frame, # [py]
            initial_orientation, # [py]
            initial_time, # [py]
            rotation_rate) # [py]

      .. code-block:: cpp # [cpp]
         # [cpp]
         // set parameters describing the rotation between two frames # [cpp]
         Eigen::Quaterniond initialOrientation = ... # [cpp]
         double initialTime = ... # [cpp]
         double rotationRate = ... # [cpp]
         std::string originalFrame = "J2000"; # [cpp]
         std::string targetFrame = "IAU_Earth"; # [cpp]
         // create rotation model settings and assign to body settings of "Earth"  # [cpp]
         bodySettings[ "Earth" ]->rotationModelSettings = std::make_shared< SimpleRotationModelSettings >( # [cpp]
         originalFrame, targetFrame , initialOrientation, initialTime, rotationRate ); # [cpp]


  #######################################################################

  - name: simple_from_spice # [py]
  - name: simpleRotationModelFromSpiceSettings # [cpp]
    short_summary: "Factory function for creating simple rotation model settings using initial orientation and rotation rates from Spice."
    extended_summary: |
      Factory function for settings object, defining a :func:`~tudatpy.numerical_simulation.environment_setup.rotation_model.simple` rotation model with the added functionality that the initial orientation and rotation rate are extracted from Spice, as opposed to provided manually.
      Note that `only` the initial orientation and rotation rate ( at the time defined by ``initial_time`` ) are extracted from Spice - for
      the full Spice rotation model see :func:`~tudatpy.numerical_simulation.environment_setup.rotation_model.spice`.
      Also note the distinction between the ``target_frame`` and ``target_frame_spice`` parameters.

    parameters:
      - name: base_frame # [py]
        type: str # [py]
      - name: originalFrame # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: target_frame # [cpp]
        type: std::string # [cpp]
        description: Target frame of rotation model - name of frame that Tudat assigns to the body-fixed frame

      - name: target_frame_spice # [py]
        type: str # [py]
      - name: targetFrameSpice # [cpp]
        type: std::string # [cpp]
        description: Spice reference of target frame - name of the frame in Spice for which the initial orientation and rotation rate are extracted.

      - name: initial_time # [py]
        type: float # [py]
      - name: initialTime # [cpp]
        type: double # [cpp]
        description: Initial time (reference epoch for rotation matrices).

    returns:
        type: SimpleRotationModelSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.SimpleRotationModelSettings` class

    notes: |
      In order to create a :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.SimpleRotationModelSettings` object which describes a synchronous rotation w.r.t. some ``central_body``,
      we require an ``ephemeris_settings`` attribute to the :class:`~tudatpy.numerical_simulation.environment_setup.BodySettings` object of the ``central_body``.


    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` for Earth,
      using a simple rotation model with constant orientation of the rotation axis (body-fixed z-axis), and constant rotation rate about this axis.
      The initial orientation and rotation rate are extracted from Spice at the time defined by ``initial_time``:

      .. code-block:: python # [py]
         # [py]
         # set parameters for time at which initial data is extracted from spice # [py]
         initial_time = 12345 # [py]
         # set parameters for defining the rotation between frames # [py]
         original_frame = "J2000" # [py]
         target_frame = "IAU_Earth_Simplified" # [py]
         target_frame_spice = "IAU_Earth" # [py]
         # create rotation model settings and assign to body settings of "Earth" # [py]
         body_settings.get( "Earth" ).rotation_model_settings = environment_setup.rotation_model.simple_from_spice( # [py]
         original_frame, target_frame, target_frame_spice, initial_time) # [py]

      # [cpp] cpp code snippet unavailable



  #######################################################################

  - name: synchronous # [py]
  - name: synchronousRotationModelSettings # [cpp]
    short_summary: "Factory function for creating synchronous rotational ephemeris settings."
    extended_summary: |
      Factory function for settings object, defining a synchronous rotation model where rotation of a body is defined from its relative orbit w.r.t. some central body. Specifically
      - the body-fixed x-axis is *always* pointing towards the central body
      - the body-fixed z-axis is *always* perpendicular to the orbital plane (along the direction of :math:`\mathbf{x}\times\mathbf{v}` )
      - the body-fixed y-axis completes the right-handed reference frame

      Such a model can be useful for, for instance, approximate rotation of tidally locked natural satellites or nadir-pointing spacecraft.

    parameters:
      - name: central_body_name # [py]
        type: str # [py]
      - name: centralBodyName # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model.

      - name: base_frame # [py]
        type: str # [py]
      - name: baseFrameOrientation # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: targetFrameSpice # [cpp]
        type: std::string # [cpp]
        description: Spice reference of target frame.

    returns:
        type: SynchronousRotationModelSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.SynchronousRotationModelSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` for the martian moon Phobos,
      We do so by assigning a synchronous rotation model to the rotation model settings of Phobos, using in this case ``"ECLIPJ2000"`` as the base frame,
      and ``"Phobos_Fixed"`` as the target frame.

      .. code-block:: python # [py]
         # [py]
         # define parameters describing the synchronous rotation model
         central_body_name = "Mars"
         original_frame = "ECLIPJ2000"
         target_frame = "Phobos_Fixed"
         # create rotation model settings for target frame and assign to body settings of "Phobos" # [py]
         body_settings.get( "Phobos" ).rotation_model_settings = environment_setup.rotation_model.synchronous(
         central_body_name, original_frame, target_frame)

      # [cpp] cpp code snippet unavailable

  #######################################################################

  - name: spice # [py]
  - name: spiceRotationModelSettings # [cpp]
    short_summary: "Factory function for creating rotation model settings from the Spice interface."
    extended_summary: |
      Factory function for settings object, defining a rotation model directly (and entirely) from Spice interface.

    parameters:
      - name: base_frame # [py]
        type: str # [py]
      - name: baseFrame # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: targetFrame # [cpp]
        type: std::string # [cpp]
        description: Target frame of rotation model.

    returns:
        type: RotationModelSettings
        description: Instance of :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` class.

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` for Earth,
      using full rotation model data from Spice:

      .. code-block:: python # [py]
         # [py]
         # define parameters describing the rotation between frames # [py]
         original_frame = "J2000" # [py]
         target_frame = "IAU_Earth" # [py]
         # create rotation model settings and assign to body settings of "Earth" # [py]
         body_settings.get( "Earth" ).rotation_model_settings = environment_setup.rotation_model.spice( # [py]
         original_frame, target_frame) # [py]

      .. code-block:: cpp # [cpp]
         # [cpp]
         // define parameters describing the rotation between frames # [cpp]
         std::string originalFrame = "J2000"; # [cpp]
         std::string targetFrame = "IAU_Earth"; # [cpp]
         // create rotation model settings and assign to body settings of "Earth" # [cpp]
         bodySettings[ "Earth" ]->rotationModelSettings = std::make_shared< RotationModelSettings >( spice_rotation_model, # [cpp]
         	originalFrame, targetFrame ); # [cpp]


  #######################################################################

  - name: gcrs_to_itrs # [py]
  - name: gcrsToItrsRotationModelSettings # [cpp]
    short_summary: "Factory function for creating high-accuracy Earth rotation model settings."
    extended_summary: |
      Factory function for settings object, defining high-accuracy Earth rotation model according to the IERS 2010 Conventions.
      This settings class has various options to deviate from the default settings, typical applications will use default.
      Note that for this model the original frame must be J2000 or GCRS (in the case of the former, the frame bias between GCRS and J2000 is automatically corrected for). The target frame (e.g. body-fixed frame) name is ITRS.
      The precession-nutation theory may be any member of :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.IAUConventions` (``iau_2000a`` / ``iau_2000b`` or ``iau_2006``).
      Alternative options to modify the input (not shown here) include the EOP correction file, input time scale, short period UT1 and polar motion variations.
      The target frame (e.g. body-fixed frame) name is ITRS.

    parameters:
      - name: precession_nutation_theory # [py]
        type: IAUConventions, default=tba::iau_2006 # [py]
      - name: nutationTheory # [cpp]
        type: basic_astrodynamics::IAUConventions default=basic_astrodynamics::iau_2006 # [cpp]
        description: Setting theory for modelling Earth nutation.

      - name: base_frame # [py]
        type: str, default='GCRS' # [py]
      - name: baseFrameName # [cpp]
        type: std::string, default='GCRS' # [cpp]
        description: Base frame of rotation model

    returns:
        type: GcrsToItrsRotationModelSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.GcrsToItrsRotationModelSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` for Earth,
      using a high-accuracy Earth rotation model as defined by IERS 2010 conventions:


      .. code-block:: python # [py]
         # [py]
         # define parameters describing the rotation between frames # [py]
         precession_nutation_theory = environment_setup.rotation_model.IAUConventions.iau_2006 # [py]
         original_frame = "J2000" # [py]
         # create rotation model settings and assign to body settings of "Earth" # [py]
         body_settings.get( "Earth" ).rotation_model_settings = environment_setup.rotation_model.gcrs_to_itrs( # [py]
         precession_nutation_theory, original_frame) # [py]

      .. code-block:: cpp # [cpp]
         # [cpp]
         // define parameters describing the rotation between frames # [cpp]
         IAUConventions precessionNutationTheory = iau_2006; # [cpp]
         std::string originalFrame = "J2000"; # [cpp]
         // create rotation model settings and assign to body settings of "Earth" # [cpp]
         bodySettings[ "Earth" ]->rotationModelSettings = boost::make_shared< GcrsToItrsRotationModelSettings >( # [cpp]
         precessionNutationTheory, originalFrame ); # [cpp]



  #######################################################################

  - name: constantRotationModelSettings # [cpp]
    short_summary: "Factory function for creating simple rotation model settings for target-frames with constant orientation." # [cpp]
    extended_summary: " Factory function for settings object, defining simple rotation model setting objects with constant rotation matrix. These model settings are for target frames which do not have a rotational rate in the base frame and are fully defined by their initial orientation. This function creates an instance of a `RotationModelSettings` derived `SimpleRotationModelSettings` object." # [cpp]

    parameters: # [cpp]

      - name: baseFrame # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model. # [cpp]

      - name: targetFrame # [cpp]
        type: std::string # [cpp]
        description: Target frame of rotation model. # [cpp]

      - name: initialOrientation # [cpp]
        type: Eigen::Quaterniond # [cpp]
        description: Orientation of target frame in base frame at initial time (constant throughout). # [cpp]

    returns: # [cpp]
        type: SimpleRotationModelSettings # [cpp]
        description: Simple rotation model settings object (derived from RotationModelSettings base class) with constant orientation of target in base frame. # [cpp]

  #######################################################################

  - name: constant # [py]
  - name: constantRotationModelSettings # [cpp] # overload cpp
    short_summary: "Factory function for creating simple rotation model settings for target-frames with constant orientation."
    extended_summary: |
      Factory function for settings object, defining simple rotation model setting objects with constant rotation matrix.
      These model settings are for target frames which do not have a rotational rate in the base frame and are fully defined by their initial orientation.

    parameters:
      - name: base_frame # [py]
        type: str # [py]
      - name: baseFrame # [cpp]
        type: std::string # [cpp]
        description: Base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: targetFrame # [cpp]
        type: std::string # [cpp]
        description: Target frame of rotation model.

      - name: initial_orientation # [py]
        type: numpy.ndarray[numpy.float64[3, 3]] # [py]
      - name: initialOrientation # [cpp]
        type: Eigen::Matrix3d # [cpp]
        description: Rotation matrix from inertial to body-fixed (base to target) frame at initial time (constant throughout).

    returns:
        type: SimpleRotationModelSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.SimpleRotationModelSettings` class.

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` for Earth,
      using a constant rotation matrix between Earth-fixed and inertial frame:

      .. code-block:: python # [py]
        # [py]
        # define parameters describing the constant orientation between frames # [py]
        original_frame = "ECLIPJ2000"  # [py]
        target_frame = "Earth_fixed"  # [py]
        constant_orientation = np.array([[1, 0, 0], [0, -1, 0], [0, 0, 1]])  # [py]
        # create rotation model settings and assign to body settings of "Earth" # [py]
        body_settings.get( "Earth" ).rotation_model_settings = environment_setup.rotation_model.constant( # [py]
            original_frame, # [py]
            target_frame, # [py]
            constant_orientation ) # [py]


      # [cpp] cpp code snippet unavailable

  #######################################################################


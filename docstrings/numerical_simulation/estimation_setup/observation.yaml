#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################
# Atmosphere Setup ( createAtmopshereModel.h )

extended_summary: |
  This module contains a set of factory functions for setting up the
  observation models, for use in the tudat estimation framework


#########################################################################
#  ███████ ███   ██ ██    ██ ███    ███  ██████
#  ██      ████  ██ ██    ██ ████  ████ █
#  █████   ██ ██ ██ ██    ██ ██ ████ ██  █████
#  ██      ██  ████ ██    ██ ██  ██  ██       █
#  ███████ ██    ██  ██████  ██      ██ ██████
#########################################################################

# no enums


#########################################################################
#   ██████ ██          ██      ██████  ██████ ███████  ██████
#  ██      ██         ████    █       █       ██      █
#  ██      ██        ██  ██    █████   █████  █████    █████
#  ██      ██       ████████        █       █ ██            █
#   ██████ ███████ ██      ██ ██████  ██████  ███████ ██████
#########################################################################


##############################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
##############################################################################

functions:
  # factory functions:
  #######################################################################

  - name: one_way_range # [py]
    short_summary: "Factory function for creating settings for a one-way range observable."
    extended_summary: |
      Factory function for creating settings for a one-way range observable.

    parameters:
      - name: link_ends # [py]
        type: LinkEnds # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires that the
          ``transmitter`` and ``receiver`` :class:`LinkEndType` entries be defined.

      - name: light_time_correction_settings # [py]
        type: list( LightTimeCorrectionSettings ), default = list() # [py]
        description: |
          List of corrections for the light-time that are to be used. Default is none, which will result
          in the signal being modelled as moving in a straight line with the speed of light

      - name: bias_settings # [py]
        type: ObservationBiasSettings, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiases observation)	

 
    returns:
        type: ObservationModelSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observaion_setup.ObservationModelSettings`
          defining the settings for the one-way observable.

#######################################################################

  - name: one_way_open_loop_doppler # [py]
    short_summary: "Factory function for creating settings for a one-way open-loop observable."
    extended_summary: |
      Factory function for creating settings for a one-way open-loop observable. The observable is *approximately* equal to
      the range-rate between the link ends, divided by *c*. The full model one-way Doppler observable :math:`h_{D(1),AB}` from 
      link end *A* to link end *B* is computed from: 
    
      .. math::
         h_{D(1),AB}=\frac{d\tau_{A}}{dt_{A}}\frac{t_{A}}{dt_{B}}\frac{dt_{B}}{d\tau_{B}}-1
         
      where :math:`t` and :math:`\tau` denote coordinate and proper time of the transmitter A and receiver B, respectively. The
      resulting observable is non-dimensional (but can be converted to an observed range-rate by multiplying with speed of light :math:`c`)
      This observable represents the 'instantaneous (non-integrated)' Doppler observable, as obtained from open-loop observations.
      It should *not* be used for the modelling of the typical closed-loop observations used in deep space tracking. The coordinate
      time derivative :math:`\frac{t_{A}}{dt_{B}}` is always computed when generating this observable. Settings for the proper time
      rates :math:`\frac{d\tau}{dt}` should be specified by the user through this function.

    parameters:
      - name: link_ends # [py]
        type: LinkEnds # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires that the
          ``transmitter`` and ``receiver`` :class:`LinkEndType` entries be defined.

      - name: light_time_correction_settings # [py]
        type: list( LightTimeCorrectionSettings ), default = list() # [py]
        description: |
          List of corrections for the light-time that are to be used. Default is none, which will result
          in the signal being modelled as moving in a straight line with the speed of light

      - name: bias_settings # [py]
        type: ObservationBiasSettings, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiases observation)

      - name: transmitter_proper_time_rate_settings # [py]
        type: DopplerProperTimeRateSettings, default = None # [py]
        description: |
          Settings for computing the transmitter proper time rate :math:`\frac{d\tau}{dt}`, default is none (:math:`\frac{d\tau}{dt}=1`)

      - name: receiver_proper_time_rate_settings # [py]
        type: DopplerProperTimeRateSettings, default = None # [py]
        description: |
          Settings for computing the receiver proper time rate :math:`\frac{d\tau}{dt}`, default is none (:math:`\frac{d\tau}{dt}=1`)
    returns:
        type: ObservationModelSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observaion_setup.ObservationModelSettings`
          defining the settings for the angular position observable.

#######################################################################

  - name: two_way_open_loop_doppler # [py]
    short_summary: "Factory function for creating settings for a two-way open-loop observable."
    extended_summary: |
      Factory function for creating settings for a two-way open-loop observable. The observable is *approximately* equal to
      the two-way range-rate between the link ends, divided by *c*. This model uses two combined one-way open loop observables,
      defined by the :func:`~tudatpy.estimation_setup.observation_setup.one_way_open_loop_doppler` function.  The combined effect
      from two one-way Doppler effects: one from link end :math:`A` to link end  :math:`B`, and one from :math:`B` to :math:`C`, computed as:  
    
      .. math::
         h_{D(2),ABC}=(h_{D(1),AB}+1)(h_{D(1),BC}+1)-1

      The resulting observable is non-dimensional (but can be converted to an observed range-rate by multiplying with speed of light :math:`c`)

    parameters:
      - name: uplink_doppler_settings # [py]
        type: OneWayDopplerObservationSettings # [py]
        description: |
          Settings for uplink leg of one-way observable, created using :func:`~tudatpy.estimation_setup.observation_setup.one_way_open_loop_doppler`

      - name: downlink_doppler_settings # [py]
        type: OneWayDopplerObservationSettings # [py]
        description: |
          Settings for downlink leg of one-way observable, created using :func:`~tudatpy.estimation_setup.observation_setup.one_way_open_loop_doppler`

      - name: bias_settings # [py]
        type: ObservationBiasSettings, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the full observation, default is none (unbiases observation). Note that,
          even if no bias is applied to the two-way observable, the constituent one-way observables may still be biased.

    returns:
        type: ObservationModelSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observaion_setup.ObservationModelSettings`
          defining the settings for the angular position observable.

#######################################################################

  - name: one_way_closed_loop_doppler # [py]
    short_summary: "Factory function for creating settings for a one-way closed loop Doppler observable."
    extended_summary: |
      Factory function for creating settings for a one-way closed loop Doppler observable.  

    parameters:
      - name: link_ends # [py]
        type: LinkEnds # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires that the
          ``transmitter`` and ``receiver`` :class:`LinkEndType` entries be defined.

      - name: integration_time # [py]
        type: float # [py]
        description: |
          Integration time that is to be used for the observable. NOTE: This setting is to be moved to the :class:`ObservationSimulationSettings` class and
          associated factory functions.


      - name: light_time_correction_settings # [py]
        type: list( LightTimeCorrectionSettings ), default = list() # [py]
        description: |
          List of corrections for the light-time that are to be used. Default is none, which will result
          in the signal being modelled as moving in a straight line with the speed of light

      - name: bias_settings # [py]
        type: ObservationBiasSettings, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiases observation)

    returns:
        type: ObservationModelSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observaion_setup.ObservationModelSettings`
          defining the settings for the one-way closed loop observable.

#######################################################################

  - name: angular_position # [py]
    short_summary: "Factory function for creating settings for an angular position observable."
    extended_summary: |
      Factory function for creating settings for an angular position observable. This observable can be used for
      optical astrometry, VLBI, etc. and computes the relative angular position in terms of right ascension :math:`alpha` and declination :math:`delta`

    parameters:
      - name: link_ends # [py]
        type: LinkEnds # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires that the
          ``transmitter`` and ``receiver`` :class:`LinkEndType` entries be defined.

      - name: light_time_correction_settings # [py]
        type: list( LightTimeCorrectionSettings ), default = list() # [py]
        description: |
          List of corrections for the light-time that are to be used. Default is none, which will result
          in the signal being modelled as moving in a straight line with the speed of light

      - name: bias_settings # [py]
        type: ObservationBiasSettings, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiases observation)
    returns:
        type: ObservationModelSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observaion_setup.ObservationModelSettings`
          defining the settings for the angular position observable.


  - name: cartesian_position # [py]
    short_summary: "Factory function for creating settings for a Cartesian position observable."
    extended_summary: |
      Factory function for creating settings for a Cartesian position observable. Note that this observable is typically not
      realized in reality, but can be very useful for verification or analysis purposes. This observable provides the inertial
      (w.r.t. global frame origin) Cartesian position of the ``observed_body`` defined by the ``link_ends`` input. The observable
      has size 3, and contains the :math:`x`, :math:`y` and :math:`z` position

    parameters:
      - name: link_ends # [py]
        type: LinkEnds # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires that the
          ``observed_body``` :class:`LinkEndType` entries be defined.
	

      - name: bias_settings # [py]
        type: ObservationBiasSettings, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiases observation)	

 
    returns:
        type: ObservationModelSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observaion_setup.ObservationModelSettings`
          defining the settings for the cartesian position observable.

#######################################################################

  - name: cartesian_velocity # [py]
    short_summary: "Factory function for creating settings for a Cartesian velocity observable."
    extended_summary: |
      Factory function for creating settings for a Cartesian velocity observable. Note that this observable is typically not
      realized in reality, but can be very useful for verification or analysis purposes. This observable provides the inertial
      (w.r.t. global frame origin) Cartesian velocity of the ``observed_body`` defined by the ``link_ends`` input. The observable
      has size 3, and contains the :math:`x`, :math:`y` and :math:`z` velocity

    parameters:
      - name: link_ends # [py]
        type: LinkEnds # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires that the
          ``observed_body``` :class:`LinkEndType` entries be defined.
	

      - name: bias_settings # [py]
        type: ObservationBiasSettings, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiases observation)	

 
    returns:
        type: ObservationModelSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observaion_setup.ObservationModelSettings`
          defining the settings for the cartesian velocity observable.

#######################################################################

  - name: 313_euler_angles # [py]
    short_summary: "Factory function for creating settings for observable containing the body orientation as Euler angles."
    extended_summary: |
      Factory function for creating settings for observable containing the body orientation as Euler angles. This observable can be
      used for *e.g.* body attitude observattions, but can also be very useful as 'synthetic' observable for verification or analysis purposes. 
      This observable provides the rotation from inertial (defined by the global frame orientation) to body-fixed orientation of the 
      body specified by the ``observed_body`` in the ``link_ends`` input.  The observable
      has size 3, and contains the  3-1-3 (e.g. z-x-z) Euler angles

    parameters:
      - name: link_ends # [py]
        type: LinkEnds # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires that the
          ``observed_body``` :class:`LinkEndType` entries be defined.
	

      - name: bias_settings # [py]
        type: ObservationBiasSettings, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiases observation)	

 
    returns:
        type: ObservationModelSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observaion_setup.ObservationModelSettings`
          defining the settings for the Euler angle observable.

  #######################################################################
  #######################################################################
  ############### LIGHT-TIME CORRECTIONS ################################
  #######################################################################
  #######################################################################

  - name: first_order_relativistic_light_time_correction # [py]
    short_summary: "Factory function for creating settings for first-order relativistic light-time corrections."
    extended_summary: |
      Factory function for creating settings for first-order relativistic light-time corrections: the correction to 
      the light time of a (set of) stationary point masses, computed up to c−2 according to general relativity as formulated by e.g. Moyer (2000). 
      One ambiguity in the model is the time at which the states of the perturbing bodies are evaluated. We distinguish two cases:

      * In the case where the perturbing body contains a link end of the observation (for instance perturbation due to Earth gravity field, 
        with one of the link ends being an Earth-based station), the time at which the Earth’s state is evaluated equals the transmission time if Earth acts as transmitter, and reception time if 
        Earth acts as receiver. 
      * In other cases, where the perturbing body is not involved in the link ends, its state is evaluated at the midpoint time between transmitter and receiver.



    parameters:
      - name: perturbing_bodies # [py]
        type: str	 # [py]
        description: |
          A list containing the names of the bodies due to which the light-time correction is to be taken into account.
	

    returns:
        type: LightTimeCorrectionSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observaion_setup.LightTimeCorrectionSettings`
          defining the settings for the light-time corrections


  #######################################################################
  #######################################################################
  ############### BIASES 		 ################################
  #######################################################################
  #######################################################################

  - name: absolute_bias # [py]
    short_summary: "Factory function for creating settings for an absolute observation bias."
    extended_summary: |
      Factory function for creating settings for an absolute observation bias. When calculating the observable value, applying this setting
      will take the physically ideal observation :math:`h`, and modify it to obtain the biased observation :math:`\tilde{h}` as follows:

      .. math::
         \tilde{h}=h+K

      where :math:`K` is the ``bias_value``. For an observable with size greater than 1, :math:`K` is a vector and the multiplication is component-wise.

    parameters:
      - name: bias_value # [py]
        type: np.array	 # [py]
        description: |
          A vector containing the bias that is to be applied to the observable. This vector should be the same size as the observable to which it is
          applied (*e.g.* size 1 for a range observable, size 2 for angular position, *etc*.)
	

    returns:
        type: ObservationBiasSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observaion_setup.ObservationBiasSettings`
          defining the settings for the observation bias

#######################################################################

  - name: relative_bias # [py]
    short_summary: "Factory function for creating settings for a relative observation bias."
    extended_summary: |
      Factory function for creating settings for a relative observation bias. When calculating the observable value, applying this setting
      will take the physically ideal observation :math:`h`, and modify it to obtain the biased observation :math:`\tilde{h}` as follows:

      .. math::
         \tilde{h}=h(1+K)

      where :math:`K` is the``bias_value``. For an observable with size greater than 1, :math:`K` is a vector and the multiplication is component-wise.

    parameters:
      - name: bias_value # [py]
        type: np.array	 # [py]
        description: |
          A vector containing the bias that is to be applied to the observable. This vector should be the same size as the observable to which it is
          applied (*e.g.* size 1 for a range observable, size 2 for angular position, *etc*.)
	

    returns:
        type: ObservationBiasSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observaion_setup.ObservationBiasSettings`
          defining the settings for the observation bias

#######################################################################

  - name: combined_bias # [py]
    short_summary: "Factory function for creating settings for a combined observation bias."
    extended_summary: |
      Factory function for creating settings for a combined observation bias, calculating by combining any number of bias types.
      Each contribution of the combined bias is computed from the unbiased observable, so when applying both a relative and absolute bias, we get:

      ... math::
         \tilde{h}=h+K_{a}+hK_{r}

      And, crucially:

      .. math::
         \tilde{h}\neq (h+K_{a})(1+K_{r})

      where :math:`K_{r}` and :math:`K_{a}` is the relative and absolute bias, respectively.

    parameters:
      - name: bias_list # [py]
        type: list(ObservationBiasSettings)	 # [py]
        description: |
          A list containing the bias the bias settings that are to be applied to the observable.
	

    returns:
        type: ObservationBiasSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observaion_setup.ObservationBiasSettings`
          defining the settings for the observation bias


  #######################################################################
  #######################################################################
  ############### VIABILITY 		 ################################
  #######################################################################
  #######################################################################

  - name: elevation_angle_viability # [py]
    short_summary: "Factory function for defining observation elevation angle viability settings."
    extended_summary: |
      Factory function for defining observation elevation angle viability settings. When simulating observations, this setting
      will omit any observations for which the local elevation angle at a ground station is less than some limit value, when
      using the :func:`simulate_observations` function.	

    parameters:

      - name: link_ends_list # [py]
        type: list([str,str])	 # [py]
        description: |
          List of link ends (as defined by body/reference point pair, see TODO), for which the viability settings are to be created.
          To apply these settings to *all* ground station on a given body (such as "Earth"), use ["Earth", ""] is entry in this list.
		
      - name: elevation_angle # [py]
        type: float	 # [py]
        description: |
          Limit elevation angle, below which no observations are produced when using the :func:`simulate_observations` function. Note: this
          value must be in radians.
     
    returns:
        type: ObservationViabilitySettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observaion_setup.ObservationViabilitySettings`
          defining the settings for observation viability

#######################################################################

  - name: body_avoidance_viability # [py]
    short_summary: "Factory function for defining body avoidance observation viability settings."
    extended_summary: |
      Factory function for defining body avoidance observation viability settings. When simulating observations, this setting
      will omit any observations for which the signal path passes 'too close' to a body, when
      using the :func:`simulate_observations` function. The definition of 'too close' is computed
      as the angle between:
      
      * The line-of-sight vector from a link end to a given third body
      * The line-of-sight between two link ends 

      This constraint is typically used to prevent the Sun from being too close to the field-of-view of the telescope(s), as defined by
      a so-called 'SPE' (Sun-Probe-Earth) angle constraint. The present viability setting generalizes this constraint.

    parameters:

      - name: link_ends_list # [py]
        type: list([str,str])	 # [py]
        description: |
          List of link ends (as defined by body/reference point pair, see TODO), for which the viability settings are to be created.
          To apply these settings to *all* ground station on a given body (such as "Earth"), use ["Earth", ""] is entry in this list.
          For each link end included in this list, it will be checked if a signal received by and/or transmited (or reflected) by this
          link end passes too close to the specified body.

		
      - name: body_to_avoid # [py]
        type: float	 # [py]
        description: |
          Name of the body which the signal path should not pass 'too close' to.

      - name: avoidance_angle # [py]
        type: float	 # [py]
        description: |
          Limit angle (generalization of SPE angle), below which no observations are produced when using the :func:`simulate_observations` function. Note: this
          value must be in radians.
     
    returns:
        type: ObservationViabilitySettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observaion_setup.ObservationViabilitySettings`
          defining the settings for observation viability

#######################################################################

  - name: body_avoidance_viability # [py]
    short_summary: "Factory function for defining body occulation viability settings."
    extended_summary: |
      Factory function for defining body occultation observation viability settings. When simulating observations, this setting
      will omit any observations for which the signal path is occulted by a given body, when
      using the :func:`simulate_observations` function. The occultation is computed using the shape model of the specified body

    parameters:

      - name: link_ends_list # [py]
        type: list([str,str])	 # [py]
        description: |
          List of link ends (as defined by body/reference point pair, see TODO), for which the viability settings are to be created.
          To apply these settings to *all* ground station on a given body (such as "Earth"), use ["Earth", ""] is entry in this list.
          For each link end included in this list, it will be checked if a signal received by and/or transmited (or reflected) by this
          link end is occulted by the specified body.

		
      - name: body_to_avoid # [py]
        type: float	 # [py]
        description: |
          Name of the body which the signal path should not be occulted by

    returns:
        type: ObservationViabilitySettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observaion_setup.ObservationViabilitySettings`
          defining the settings for observation viability


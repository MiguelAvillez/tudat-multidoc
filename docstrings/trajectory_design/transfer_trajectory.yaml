extended_summary: |
  TODO

# TODO: The attribute below API isn't working!
#???:
#  - name: DEFAULT_MINIMUM_PERICENTERS
#    short_summary: "Minimum pericenter radii during fly-by."
#    extended_summary: "TODO"
#    type: dict[string, float] # [py]

#############################################################################
# Enums
#############################################################################
enums:
  - name: TransferLegTypes
    short_summary: "Enumeration of available leg types."
    extended_summary: "TODO... extended summary needed?"

    members:
      - name: unpowered_unperturbed_leg_type # [py]
      - name: dsm_position_based_leg_type # [py]
      - name: dsm_velocity_based_leg_type # [py]

      - name: unpowered_unperturbed_leg # [cpp]
      - name: dsm_position_based_leg # [cpp]
      - name: dsm_velocity_based_leg # [cpp]

#############################################################################
# Classes
#############################################################################
classes:
  - name: TransferNodeSettings
    short_summary: "Base class for providing settings for transfer node."
    extended_summary: |
      Functional (base) class for settings of transfer node that require no information in addition to their type.
      Transfer node classes requiring additional information must be created using an object derived from this class.

  - name: SwingbyNodeSettings
    short_summary: "Class for defining settings of swingby node."
    extended_summary: |
      `TransferNodeSettings` derived class for providing settings for swingby nodes, including the minimum periapsis
      radius.

  - name: EscapeAndDepartureNodeSettings
    short_summary: "Class for defining settings of escape and departure node."
    extended_summary: |
      `TransferNodeSettings` derived class for providing settings for escape and departure nodes, including the
      departure semi-major axis and eccentricity.

  - name: CaptureAndInsertionNodeSettings
    short_summary: "Class for defining settings of capture and insertion node."
    extended_summary: |
      `TransferNodeSettings` derived class for providing settings for capture and insertion nodes, including the
      capture semi-major axis and eccentricity.

  - name: TransferLegSettings
    short_summary: "Base class for providing settings for transfer leg."
    extended_summary: |
      Functional (base) class for settings of transfer leg that require no information in addition to their type.
      Transfer leg classes requiring additional information must be created using an object derived from this class.
    # TODO: remove 2nd line of extended_summary since TransferLegSettings doesn't have derived classes?

  - name: TransferTrajectory
    short_summary: TODO
    extended_summary: TODO

    properties: # [py]
      - name: delta_v # [py]
        type: float # [py]
        description: Total Delta V used in the transfer trajectory. # [py]
        readonly: True # [py]

      - name: time_of_flight # [py]
        type: float # [py]
        description: Total time of flight of the transfer trajectory. # [py]
        readonly: True # [py]

      - name: delta_v_per_node # [py]
        type: list[float] # [py]
        description: List of the Delta Vs applied in each node (corresponding to each swingby). # [py]
        readonly: True # [py]

      - name: delta_v_per_leg # [py]
        type: list[float] # [py]
        description: List of the Delta Vs applied in each leg (corresponding to each deep space maneuver). # [py]
        readonly: True # [py]

      - name: number_of_nodes # [py]
        type: float # [py]
        description: Number of nodes in the transfer trajectory. # [py]
        readonly: True # [py]

      - name: number_of_legs # [py]
        type: float # [py]
        description: Number of legs in the transfer trajectory. # [py]
        readonly: True # [py]

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor" # [cpp]
        extended_summary: TODO # [cpp]

      - name: evaluate # [py]
      - name: evaluateTrajectory # [cpp]
        short_summary: "Evaluate transfer trajectory."
        extended_summary: |
          Function to evaluate the transfer trajectory, which consists of computing the Delta V and time of flight.
        # TODO: Meaning of parameters... link to explanation?

        parameters:
          - name: node_times # [py]
            type: list[float] # [py]
          - name: nodeTimes # [cpp]
            type: std::vector< double > # [cpp]
            # TODO: additional explanation about meaning of parameters... here or somewhere else?
            description: "List of the time at each node."

          - name: leg_parameters # [py]
            # TODO: list[list] or list[list[float]] - since for no dsm's the inner lists are empty
            type: list[list]
          - name: legFreeParameters # [cpp]
            type: std::vector< Eigen::VectorXd > # [cpp]
            # TODO: additional explanation about meaning of parameters... here or somewhere else?
            description: "List of the parameters characterizing each leg."

          - name: node_parameters # [py]
            # TODO: list[list] or list[list[float]] - since for no dsm's the inner lists are empty
            type: list[list]
          - name: nodeFreeParameters # [cpp]
            type: std::vector< Eigen::VectorXd > # [cpp]
            description: "List of the parameters characterizing each node."

        returns:
          type: None # [py]
          type: void # [cpp]

      # TODO: this counts as a function (not a property), right?
      - name: single_node_delta_v # [py]
      - name: getNodeDeltaV # [cpp]
        short_summary: "Retrieves the Delta V of the specified node (corresponding to a swingby)."
        extended_summary: "TODO"

        parameters:
          - name: node_index # [py]
            type: int # [py]
          - name: nodeIndex # [cpp]
            type: int # [cpp]

        returns:
          type: float # [py]
          type: double # [cpp]
          description: Delta V for the specified node.

      # TODO: this counts as a function (not a property), right?
      - name: single_leg_delta_v # [py]
      - name: getLegDeltaV # [cpp]
        short_summary: "Retrieves the Delta V of the specified leg (corresponding to a deep space maneuver)."
        extended_summary: "TODO"

        parameters:
          - name: leg_index # [py]
            type: int # [py]
          - name: legIndex # [cpp]
            type: int # [cpp]

        returns:
          type: float # [py]
          type: double # [cpp]
          description: Delta V for the specified leg.

      # TODO: this counts as a function (not a property), right?
      - name: states_along_trajectory # [py]
      - name: getStatesAlongTrajectory # [cpp]
        short_summary: "Returns the state history throughout the trajectory."
        extended_summary: |
          Function that returns the state history throughout the trajectory, using the same number of data points in
          each leg. For each leg, the retrieved states are equally spaced in time. Each state is computed by
          propagating the leg's initial state as a Kepler orbit until the desired time.

        parameters:
          - name: number_of_data_points_per_leg # [py]
            type: int # [py]
          - name: numberOfDataPointsPerLeg # [cpp]
            type: int # [py]

      - name: getTotalDeltaV # [cpp]
        short_summary: "Retrieves the total Delta V used in the transfer trajectory." # [cpp]
        extended_summary: TODO
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          type: double # [cpp]
          description: Delta V. # [cpp]

      - name: getTotalTimeOfFlight # [cpp]
        short_summary: "Retrieves the total time of flight of the transfer trajectory." # [cpp]
        extended_summary: TODO
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          type: double # [cpp]
          description: Time of flight. # [cpp]

      - name: getDeltaVPerNode # [cpp]
        short_summary: "Returns the Delta V applied in each node (corresponding to each swingby)." # [cpp]
        extended_summary: TODO
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          type: std::vector< double > # [cpp]
          description: Delta V per node. # [cpp]

      - name: getDeltaVPerLeg # [cpp]
        short_summary: "Returns the Delta V applied in each leg (corresponding to each deep space maneuver)."  # [cpp]
        extended_summary: TODO
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          type: std::vector< double > # [cpp]
          description: Delta V per leg. # [cpp]

      - name: getNumberOfNodes # [cpp]
        short_summary: "Retrieves the number of nodes in the transfer trajectory." # [cpp]
        extended_summary: TODO
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          type: double # [cpp]
          description: Number of nodes. # [cpp]

      - name: getNumberOfLegs # [cpp]
        short_summary: "Retrieves the number of legs in the transfer trajectory." # [cpp]
        extended_summary: TODO
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          type: double # [cpp]
          description: Number of legs. # [cpp]

#############################################################################
# Functions
#############################################################################
functions:
  - name: mga_transfer_settings # [py]
  - name: getMgaTransferTrajectorySettings # [cpp]

    short_summary: |
      Function to get the settings of the legs and nodes constituting the specified trajectory with multiple swingbys.
    extended_summary: "TODO"

    parameters:
      - name: body_order # [py]
        type: list[str] # [py]
      - name: fullBodiesList # [cpp]
        type: std::vector< std::string > # [cpp]
        description: "List of bodies to visit, including departure body, swingby bodies and arrival body."

      - name: leg_type # [py]
        type: TransferLegTypes # [py]
      - name: identicalTransferLegType # [cpp]
        type: TransferLegTypes # [cpp]
        description: "Type of transfer leg between bodies."

      - name: departure_orbit # [py]
        type: tuple[float, float], default=(TUDAT_NAN, TUDAT_NAN) # [py]
      - name: departureOrbit # [cpp]
        type: std::pair< double, double >, default=std::make_pair(TUDAT_NAN, TUDAT_NAN) # [cpp]
        description: "Tuple of (semi-major axis, eccentricity) specifying the departure orbit."

      - name: arrival_orbit # [py]
        type: tuple[float, float], default=(TUDAT_NAN, TUDAT_NAN) # [py]
      - name: arrivalOrbit # [cpp]
        type: std::pair< double, double >, default=std::make_pair(TUDAT_NAN, TUDAT_NAN) # [cpp]
        description: "Tuple of (semi-major axis, eccentricity) specifying the arrival orbit."

      # TODO: default values - not linking properly
      - name: minimum_pericenters # [py]
        type: dict[string, float], default=DEFAULT_MINIMUM_PERICENTERS # [py]
      - name: minimumPericenterRadii # [cpp]
        type: std::map< std::string, double >, default=, default=tms::DEFAULT_MINIMUM_PERICENTERS # [cpp]
        description: |
          Minimum pericenter radii, where each body is specified as key and the respective minimum pericenter radius as
          value.

    returns:
      type: std::pair< std::vector< std::shared_ptr< TransferLegSettings > >, std::vector< std::shared_ptr< TransferNodeSettings > > > # [cpp]
      type: tuple[ list[TransferLegSettings], list[TransferNodeSettings] ] # [py]
      description: "Tuple specifying the settings of each transfer leg and node."

  - name: unpowered_leg # [py]
  - name: unpoweredLeg # [cpp]

    short_summary: |
      Factory function for creating the settings of an unpowered leg.
    extended_summary: "TODO"

    parameters:
      
    returns:
      type: TransferLegSettings
      description: Transfer leg settings.

  - name: dsm_position_based_leg # [py]
  - name: dsmPositionBasedLeg # [cpp]

    short_summary: |
      Factory function for creating the settings of a transfer leg with 1 deep space maneuver described using
      the position formulation.
    extended_summary: "TODO"

    returns:
      type: TransferLegSettings
      description: Transfer leg settings.

  - name: dsm_velocity_based_leg # [py]
  - name: dsmVelocityBasedLeg # [cpp]

    short_summary: |
      Factory function for creating the settings of a transfer leg with 1 deep space maneuver described using
      the velocity formulation.
    extended_summary: "TODO"

    returns:
      type: TransferLegSettings
      description: Transfer leg settings.

  - name: swingby_node # [py]
  - name: swingbyNode # [cpp]

    short_summary: Factory function for creating the settings of a swingby node.
    extended_summary: "TODO"

    parameters:
      - name: minimum_periapsis # [py]
        type: float # [py]
      - name: minimumPeriapsisDistance # [cpp]
        type: double # [cpp]
        description: Minimum periapsis radius.

    returns:
      type: SwingbyNodeSettings
      description: Swingby node settings.

  - name: departure_node # [py]
  - name: escapeAndDepartureNode # [cpp]

    short_summary: Factory function for creating the settings of an escape or departure node.
    extended_summary: "TODO"

    parameters:
      - name: departure_semi_major_axis # [py]
        type: float # [py]
      - name: departureSemiMajorAxis # [cpp]
        type: double # [cpp]
        description: Departure orbit semi-major axis.

      - name: departure_eccentricity # [py]
        type: float # [py]
      - name: departureEccentricity # [cpp]
        type: double # [cpp]
        description: Departure orbit eccentricity.

    returns:
      type: EscapeAndDepartureNodeSettings
      description: Escape or departure node settings.

  - name: capture_node # [py]
  - name: captureAndInsertionNode # [cpp]

    short_summary: Factory function for creating the settings of a capture or insertion node.
    extended_summary: TODO

    parameters:
      - name: capture_semi_major_axis # [py]
        type: float # [py]
      - name: captureSemiMajorAxis # [cpp]
        type: double # [cpp]
        description: Capture orbit semi-major axis.

      - name: capture_eccentricity # [py]
        type: float # [py]
      - name: captureEccentricity # [cpp]
        type: double # [cpp]
        description: Capture orbit eccentricity.

    returns:
      type: CaptureAndInsertionNodeSettings
      description: Capture or insertion node settings.

  - name: print_parameter_definitions # [py]
  - name: printTransferParameterDefinition # [cpp]

    short_summary: |
      Prints the list of parameters required to define the transfer trajectory, according to the
      specified node and leg settings.
    extended_summary: TODO

    parameters:
      - name: leg_settings # [py]
        type: list[ TransferLegSettings ] # [py]
      - name: legSettings # [cpp]
        type: std::vector< std::shared_ptr< TransferLegSettings > > # [cpp]
        description: List of transfer leg settings.

      - name: node_settings # [py]
        type: list [ TransferNodeSettings ] # [py]
      - name: nodeSettings # [cpp]
        type: std::vector< std::shared_ptr< TransferNodeSettings > > # [cpp]
        description: List of transfer node settings.

    returns:
      type: None # [py]
      type: void # [cpp]

  - name: create_transfer_trajectory

    short_summary: |
      Factory function which creates a transfer trajectory consisting of a departure node, swingby node(s) and
      a capture node, connected by legs of the selected type.
    extended_summary: TODO
    #The function creates a transfer trajectory consisting of a departure node, a sequence of transfer legs and
    #swingby nodes, and a capture node. Depending on the specified

    parameters:
      - name: bodies # [py]
        type: SystemOfBodies # [py]
      - name: bodyMap # [cpp]
        type: SystemOfBodies # [cpp]
        description: System of bodies to be used in the transfer trajectory.

      - name: leg_settings # [py]
        type: list[ TransferLegSettings ] # [py]
      - name: legSettings # [cpp]
        type: std::vector< std::shared_ptr< TransferLegSettings > > # [cpp]
        description: List of transfer leg settings.

      - name: node_settings # [py]
        type: list [ TransferNodeSettings ] # [py]
      - name: nodeSettings # [cpp]
        type: std::vector< std::shared_ptr< TransferNodeSettings > > # [cpp]
        description: List of transfer node settings.

      - name: node_names # [py]
        type: list [str] # [py]
      - name: nodeIds # [cpp]
        type: std::vector< std::string > # [cpp]
        description: Sequence of bodies used as transfer nodes.

      - name: central_body # [py]
        type: str # [py]
      - name: centralBody # [cpp]
        type: std::string # [cpp]
        # TODO: is propagated a good word?
        description: Central body with respect to which the trajectory is propagated.

    returns:
      type: TransferTrajectory
      description: Transfer trajectory object.
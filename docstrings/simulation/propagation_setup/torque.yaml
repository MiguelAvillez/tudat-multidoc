description: "This module provides the functionality for creating torque settings."
notes: "None"

# The structure of this file follows the order of expose_propagation_setup.cpp (tudatpy) and
# includes content for torqueSettings.h (tudat)



classes:

  ###### enums

  #       py::enum_<tba::AvailableTorque>
  #        enum tudat::basic_astrodynamics::AvailableTorque

  - name: AvailableTorque
    short_summary: "Enumeration of available torque types."
    extended_summary: |
      Enumeration of torque types supported by tudat.

    attributes:

      - name: torque_free # [cpp]
      - name: underfined_torque # [cpp]
      - name: second_order_gravitational_torque # [cpp]
      - name: aerodynamic_torque # [cpp]
      - name: spherical_harmonic_gravitational_torque # [cpp]
      - name: inertial_torque # [cpp]
      - name: dissipative_torque # [cpp]
      - name: custom_torque # [cpp]

      - name: torque_free_type # [py]
      - name: underfined_torque_type # [py]
      - name: second_order_gravitational_torque_type # [py]
      - name: aerodynamic_torque_type # [py]
      - name: spherical_harmonic_gravitational_torque_type # [py]
      - name: inertial_torque_type # [py]
      - name: dissipative_torque_type # [py]
      - name: custom_torque_type # [py]

  ######

  # base
  - name: TorqueSettings
    short_summary: "Functional base class to define settings for torques."
    extendend_summary: |
      This is a functional base class to define settings for torques that require no information in addition to their type.
      Classes defining settings for torque models requiring additional information must be
      derived from this class.
      Bodies exerting and undergoing torque are set outside of this class.
      This class can be used for the easy setup of torque models
      (see createTorqueModels.h), but users may also chose to do so manually.
      (Derived) Class members are all public, for ease of access and modification.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user because this is a base class." # [cpp]


  # derived
  - name: SphericalHarmonicTorqueSettings
    short_summary: "`TorqueSettings`-derived class to define settings for torques caused by spherical harmonic gravity."
    extendend_summary: |
      `TorqueSettings`-derived class to define settings for torques caused by spherical harmonic gravity.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for torques should be instantiated through the factory functions of a derived class." # [cpp]


functions:

  # factory functions

  # Aerodynamic
  - name: aerodynamicTorque # [cpp]
  - name: aerodynamic # [py]
    short_summary: "Creates the settings for the aerodynamic torque."
    extended_summary: |
      Creates the settings for the aerodynamic torque exerted by a body with an atmosphere model and shape model on
      another body. The body exerting the torque needs to have both an atmosphere model and a shape model defined.
      Furthermore, the body undergoing the torque needs to have the aerodynamic coefficient interface and its moment
      coefficients defined. In the case that the aerodynamic coefficients are defined as a function of the vehicle
      orientation (e.g. angle of attack and sideslip angle), these angles can be manually or automatically defined.

    returns:
        type: TorqueSettings
        description: Torque settings object.


  # Spherical harmonic
  - name: sphericalHarmonicGravitationalTorque # [cpp]
  - name: spherical_harmonic_gravitational # [py]
    short_summary: "Creates the settings for the spherical harmonic torque."
    extended_summary: |
      Torque exerted by a point mass on a body with an arbitrary degree/order spherical harmonics mass distribution.
      The body exerting the torque only needs to have a gravitational model defined (point-mass or spherical harmonic),
      while the body undergoing the torque needs to have a spherical harmonic gravity field defined.

    parameters:
      - name: maximumDegree # [cpp]
        type: int # [cpp]
      - name: maximum_degree # [py]
        type: int # [py]
        description: Maximum degree of the spherical harmonic expansion.

      - name: maximumOrder # [cpp]
        type: int # [cpp]
      - name: maximum_order # [py]
        type: int # [py]
        description: Maximum order of the spherical harmonic expansion.

    returns:
        type: TorqueSettings
        description: Torque settings object.


  # Second degree gravitational
  - name: secondDegreeGravitationalTorque # [cpp]
  - name: second_degree_gravitational # [py]
    short_summary: "Creates the settings for the second-degree gravitational torque."
    extended_summary: |
      Torque exerted by a point mass on a body with a degree two spherical harmonics mass distribution.
      A degree two spherical harmonics mass distribution can be represented by an inertia tensor; thus,
      for this torque model, the body undergoing the torque needs to have an inertia tensor defined.
      The body exerting the torque only needs to have a gravitational model defined (either point-mass or spherical
      harmonics).

    returns:
        type: TorqueSettings
        description: Torque settings object.


  # Custom
  - name: customTorqueSettings # [cpp]
  - name: custom # [py]
    short_summary: "Creates the settings for a custom torque."
    extended_summary: |
      Torque exerted by a point mass on a body with a degree two spherical harmonics mass distribution.
      A degree two spherical harmonics mass distribution can be represented by an inertia tensor; thus,
      for this torque model, the body undergoing the torque needs to have an inertia tensor defined.
      The body exerting the torque only needs to have a gravitational model defined (either point-mass or spherical
      harmonics).

    parameters:
      - name: torqueFunction # [cpp]
        type: std::function<Eigen::Vector3d(const double)> # [cpp]
      - name: torque_function # [py]
        type: Callable[[float], list] # [py]
        description: Custom torque function with time as an independent variable.

      - name: scalingFunction # [cpp]
        type: std::function<double(const double)>, default=nullptr # [cpp]
      - name: scaling_function # [py]
        type: Callable[[float], float], default=None # [py]
        description: Scaling function with time as an independent variable to be multiplied by the custom torque function.

    returns:
        type: TorqueSettings
        description: Torque settings object.
description: "This module provides the functionality for creating integrator settings."
notes: "None"

# The structure of this file follows the order of expose_integrator_setup.cpp (tudatpy) and
# includes content for createNumericalIntegrator.h and bulirschStoerVariableStepsizeIntegrator.h (tudat)

# Enums
# TODO
#       py::enum_<tni::AvailableIntegrators>
#       py::enum_<tni::RungeKuttaCoefficients::CoefficientSets>
#       py::enum_<tni::ExtrapolationMethodStepSequences>

classes:

  ###### enums

  #    py::enum_<tni::AvailableIntegrators>
  #        enum tudat::numerical_integrators::AvailableIntegrators

  - name: AvailableIntegrators
    short_summary: "Enumeration of available integrators."
    extended_summary: |
      Enumeration of integrators supported by tudat.

    attributes:

      - name: euler # [cpp]
      - name: rungeKutta4 # [cpp]
      - name: rungeKuttaVariableStepSize # [cpp]
      - name: bulirschStoer # [cpp]
      - name: adamsBashforthMoulton # [cpp]

      - name: euler_type # [py]
      - name: runge_kutta_4_type # [py]
      - name: runge_kutta_variable_step_size_type # [py]
      - name: bulirsch_stoer_type # [py]
      - name: adams_bashforth_moulton_type # [py]


  #    py::enum_<tni::RungeKuttaCoefficients::CoefficientSets>
  #        enum tudat::numerical_integrators::RungeKuttaCoefficients::CoefficientSets

  - name: CoefficientSets
    short_summary: "Coefficient sets for Runge-Kutta integrators."
    extended_summary: |
      Coefficient sets for Runge-Kutta integrators.

    attributes:

      - name: undefinedCoefficientSet # [cpp]
      - name: rungeKuttaFehlberg45 # [cpp]
      - name: rungeKuttaFehlberg56 # [cpp]
      - name: rungeKuttaFehlberg78 # [cpp]
      - name: rungeKutta87DormandPrince # [cpp]

      - name: rkf_45 # [py]
      - name: rkf_56 # [py]
      - name: rkf_78 # [py]
      - name: rkdp_87 # [py]


  #       py::enum_<tni::ExtrapolationMethodStepSequences>
  #           enum tudat::numerical_integrators::ExtrapolationMethodStepSequences

  - name: ExtrapolationMethodStepSequences
    short_summary: "Enumeration of available extrapolation method step sequences."
    extended_summary: |
      Enumeration of extrapolation method step sequences supported by tudat.

    attributes:

      - name: bulirsch_stoer_sequence
      - name: deufelhard_sequence

  ######

  # base
  - name: IntegratorSettings
    short_summary: "Functional base class to define settings for integrators."
    extendend_summary: |
      Class to define settings for numerical integrators, for instance for use in numerical integration of equations of motion/
      variational equations. This class can be used for simple integrators such as fixed step RK and Euler. Integrators that
      require more settings to define have their own derived class.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user because this is a base class." # [cpp]

    attributes:
      - name: initial_time # [py]
        type: float # [py]
        description: Initial time of the integration. # [py]


  # derived (1)
  - name: RungeKuttaVariableStepSizeSettingsScalarTolerances
    short_summary: "`IntegratorSettings`-derived class to define settings for Runge Kutta integrators with scalar tolerances."
    extendend_summary: |
      `IntegratorSettings`-derived class to define settings for Runge Kutta integrators with scalar tolerances. This
      class is actually derived from an intermediate class (`RungeKuttaVariableStepSizeBaseSettings`, not documented),
      which is derived directly from `IntegratorSettings`.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for integrators should be instantiated through the factory functions of a derived class." # [cpp]


  # derived (2)
  - name: RungeKuttaVariableStepSizeSettingsVectorTolerances
    short_summary: "`IntegratorSettings`-derived class to define settings for Runge Kutta integrators with vector tolerances."
    extendend_summary: |
      `IntegratorSettings`-derived class to define settings for Runge Kutta integrators with vector tolerances. This
      class is actually derived from an intermediate class (`RungeKuttaVariableStepSizeBaseSettings`, not documented),
      which is derived directly from `IntegratorSettings`.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for integrators should be instantiated through the factory functions of a derived class." # [cpp]


  # derived (3)
  - name: BulirschStoerIntegratorSettings
    short_summary: "`IntegratorSettings`-derived class to define settings for Bulirsch-Stoer integrator settings."
    extendend_summary: |
      `IntegratorSettings`-derived class to define settings for Bulirsch-Stoer integrator settings.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for integrators should be instantiated through the factory functions of a derived class." # [cpp]


  # derived (4)
  - name: AdamsBashforthMoultonSettings
    short_summary: "`IntegratorSettings`-derived class to define settings for Adams-Bashforth-Moulton integrator settings."
    extendend_summary: |
      `IntegratorSettings`-derived class to define settings for Adams-Bashforth-Moulton integrator settings.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for integrators should be instantiated through the factory functions of a derived class." # [cpp]


functions:

  # factory functions

  # Euler
  - name: eulerSettings # [cpp]
  - name: euler # [py]
    short_summary: "Creates the settings for the Euler integrator."
    extended_summary: |
      Factory function to create settings for the Euler integrator. For this integrator, the step size is kept
      constant.

    parameters:
      - name: initialTime # [cpp]
        type: double # [cpp]
      - name: initial_time # [py]
        type: float # [py]
        description: Start time (independent variable) of numerical integration.

      - name: initialTimeStep # [cpp]
        type: double # [cpp]
      - name: initial_time_step # [py]
        type: float # [py]
        description: Initial and constant value for the time step.

      - name: saveFrequency # [cpp]
        type: int, default=1 # [cpp]
      - name: save_frequency # [py]
        type: int, default=1 # [py]
        description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).

      - name: assessTerminationOnMinorSteps # [cpp]
        type: bool, default=false # [cpp]
      - name: assess_termination_on_minor_steps # [py]
        type: bool, default=false # [py]
        description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).

    returns:
        type: IntegratorSettings
        description: Integrator settings object.


  # Runge Kutta 4
  - name: rungeKutta4Settings # [cpp]
  - name: runge_kutta_4 # [py]
    short_summary: "Creates the settings for the Runge Kutta 4 integrator."
    extended_summary: |
      Factory function to create settings for the Runge Kutta 4 integrator. For this integrator, the step size is kept
      constant.

    parameters:
      - name: initialTime # [cpp]
        type: double # [cpp]
      - name: initial_time # [py]
        type: float # [py]
        description: Start time (independent variable) of numerical integration.

      - name: initialTimeStep # [cpp]
        type: double # [cpp]
      - name: initial_time_step # [py]
        type: float # [py]
        description: Initial and constant value for the time step.

      - name: saveFrequency # [cpp]
        type: int, default=1 # [cpp]
      - name: save_frequency # [py]
        type: int, default=1 # [py]
        description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).

      - name: assessTerminationOnMinorSteps # [cpp]
        type: bool, default=false # [cpp]
      - name: assess_termination_on_minor_steps # [py]
        type: bool, default=false # [py]
        description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).

    returns:
        type: IntegratorSettings
        description: Integrator settings object.


  # Runge Kutta variable step size with scalar tolerances (cpp)
  - name: rungeKuttaVariableStepSettingsScalarTolerances
    short_summary: "Creates the settings for the Runge-Kutta variable step size integrator with scalar tolerances." # [cpp]
    extended_summary: | # [cpp]
      Factory function to create settings for the Runge-Kutta variable step size integrator with scalar tolerances. # [cpp]
      For this integrator, the step size is varied based on the tolerances and safety factor provided. # [cpp]
      The tolerance is composed of an absolute and a relative part. # [cpp]
      Different coefficient sets (Butcher's tableau) can be used (see the `RungeKuttaCoefficients::CoefficientSets` enum). # [cpp]

    parameters: # [cpp]
      - name: initialTime # [cpp]
        type: double # [cpp]
        description: Start time (independent variable) of numerical integration. # [cpp]

      - name: initialTimeStep # [cpp]
        type: double # [cpp]
        description: Initial time step to be used. # [cpp]

      - name: coefficientSet # [cpp]
        type: RungeKuttaCoefficients::CoefficientSets # [cpp]
        description: Coefficient set (Butcher's tableau) to be used in the integration.  # [cpp]

      - name: minimumStepSize # [cpp]
        type: double # [cpp]
        description: Minimum time step to be used during the integration. # [cpp]

      - name: maximumStepSize # [cpp]
        type: double # [cpp]
        description: Maximum time step to be used during the integration. # [cpp]

      - name: relativeErrorTolerance # [cpp]
        type: double # [cpp]
        description: Relative scalar tolerance to adjust the time step. # [cpp]

      - name: absoluteErrorTolerance # [cpp]
        type: double # [cpp]
        description: Absolute scalar tolerance to adjust the time step. # [cpp]

      - name: saveFrequency # [cpp]
        type: int, default=1 # [cpp]
        description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step). # [cpp]

      - name: assessTerminationOnMinorSteps # [cpp]
        type: bool, default=false # [cpp]
        description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false). # [cpp]

      - name: safetyFactorForNextStepSize # [cpp]
        type: double, default=0.8 # [cpp]
        description: Safety factor used in the step size control. # [cpp]

      - name: maximumFactorIncreaseForNextStepSize # [cpp]
        type: double, default=4.0 # [cpp]
        description: Maximum increase between consecutive time steps, expressed as the factor between new and old step size. # [cpp]

      - name: minimumFactorDecreaseForNextStepSize # [cpp]
        type: double, default=0.1 # [cpp]
        description: Minimum increase between consecutive time steps, expressed as the factor between new and old step size. # [cpp]

    returns: # [cpp]
        type: RungeKuttaVariableStepSizeSettingsScalarTolerances # [cpp]
        description: RungeKuttaVariableStepSizeSettingsScalarTolerances object. # [cpp]


  # Runge Kutta variable step size with vector tolerances (cpp)
  - name: rungeKuttaVariableStepSettingsVectorTolerances
    short_summary: "Creates the settings for the Runge-Kutta variable step size integrator with vector tolerances." # [cpp]
    extended_summary: | # [cpp]
      Factory function to create settings for the Runge-Kutta variable step size integrator with vector tolerances. # [cpp]
      For this integrator, the step size is varied based on the tolerances and safety factor provided. # [cpp]
      The tolerance is composed of an absolute and a relative part. # [cpp]
      Different coefficient sets (Butcher's tableau) can be used (see the `RungeKuttaCoefficients::CoefficientSets` enum). # [cpp]

    parameters: # [cpp]
      - name: initialTime # [cpp]
        type: double # [cpp]
        description: Start time (independent variable) of numerical integration. # [cpp]

      - name: initialTimeStep # [cpp]
        type: double # [cpp]
        description: Initial time step to be used. # [cpp]

      - name: coefficientSet # [cpp]
        type: RungeKuttaCoefficients::CoefficientSets # [cpp]
        description: Coefficient set (Butcher's tableau) to be used in the integration.  # [cpp]

      - name: minimumStepSize # [cpp]
        type: double # [cpp]
        description: Minimum time step to be used during the integration. # [cpp]

      - name: maximumStepSize # [cpp]
        type: double # [cpp]
        description: Maximum time step to be used during the integration. # [cpp]

      - name: relativeErrorTolerance # [cpp]
        type: Eigen::Matrix # [cpp]
        description: Relative vector tolerance to adjust the time step. # [cpp]

      - name: absoluteErrorTolerance # [cpp]
        type: Eigen::Matrix # [cpp]
        description: Absolute vector tolerance to adjust the time step. # [cpp]

      - name: saveFrequency # [cpp]
        type: int, default=1 # [cpp]
        description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step). # [cpp]

      - name: assessTerminationOnMinorSteps # [cpp]
        type: bool, default=false # [cpp]
        description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false). # [cpp]

      - name: safetyFactorForNextStepSize # [cpp]
        type: double, default=0.8 # [cpp]
        description: Safety factor used in the step size control. # [cpp]

      - name: maximumFactorIncreaseForNextStepSize # [cpp]
        type: double, default=4.0 # [cpp]
        description: Maximum increase between consecutive time steps, expressed as the factor between new and old step size. # [cpp]

      - name: minimumFactorDecreaseForNextStepSize # [cpp]
        type: double, default=0.1 # [cpp]
        description: Minimum increase between consecutive time steps, expressed as the factor between new and old step size. # [cpp]

    returns: # [cpp]
        type: RungeKuttaVariableStepSizeSettingsVectorTolerances # [cpp]
        description: RungeKuttaVariableStepSizeSettingsVectorTolerances object. # [cpp]


  # Runge Kutta variable step size (py)
  - name: runge_kutta_variable_step_size # [py]
    short_summary: "Creates the settings for the Runge-Kutta variable step size integrator." # [py]
    extended_summary: | # [py]
      Factory function to create settings for the Runge-Kutta variable step size integrator with vector tolerances. # [py]
      For this integrator, the step size is varied based on the tolerances and safety factor provided. # [py]
      The tolerance can be either scalar or vector; it is composed of an absolute and a relative part. # [py]
      Different coefficient sets (Butcher's tableau) can be used (see the `RungeKuttaCoefficients::CoefficientSets` enum). # [py]

    parameters: # [py]
      - name: initial_time # [py]
        type: float # [py]
        description: Start time (independent variable) of numerical integration. # [py]

      - name: initial_time_step # [py]
        type: float # [py]
        description: Initial time step to be used. # [py]

      - name: coefficient_set # [py]
        type: RungeKuttaCoefficients::CoefficientSets # [py]
        description: Coefficient set (Butcher's tableau) to be used in the integration.  # [py]

      - name: minimum_step_size # [py]
        type: float # [py]
        description: Minimum time step to be used during the integration. # [py]

      - name: maximum_step_size # [py]
        type: float # [py]
        description: Maximum time step to be used during the integration. # [py]

      - name: relative_error_tolerance # [py]
        type: float or np.ndarray # [py]
        description: Relative vector tolerance to adjust the time step. # [py]

      - name: absolute_error_tolerance # [py]
        type: float or np.ndarray # [py]
        description: Absolute vector tolerance to adjust the time step. # [py]

      - name: save_frequency # [py]
        type: int, default=1 # [py]
        description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step). # [py]

      - name: assess_termination_on_minor_steps # [py]
        type: bool, default=false # [py]
        description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false). # [py]

      - name: safety_factor # [py]
        type: float, default=0.8 # [py]
        description: Safety factor used in the step size control. # [py]

      - name: maximum_factor_increase # [py]
        type: float, default=4.0 # [py]
        description: Maximum increase between consecutive time steps, expressed as the factor between new and old step size. # [py]

      - name: minimum_factor_increase # [py]
        type: float, default=0.1 # [py]
        description: Minimum increase between consecutive time steps, expressed as the factor between new and old step size. # [py]

    returns: # [py]
        type: RungeKuttaVariableStepSizeSettingsScalarTolerances or RungeKuttaVariableStepSizeSettingsVectorTolerances # [py]
        description: RungeKuttaVariableStepSizeSettingsScalarTolerances or RungeKuttaVariableStepSizeSettingsVectorTolerances object. # [py]


  # Bulirsch-Stoer integrator
  - name: bulirschStoerIntegratorSettings # [cpp]
  - name: bulirsch_stoer # [py]
    short_summary: "Creates the settings for the Bulirsch-Stoer integrator."
    extended_summary: |
      Factory function to create settings for the Bulirsch-Stoer integrator.
      For this integrator, the step size is varied based on the tolerances and safety factor provided.
      The tolerance is composed of an absolute and a relative part.
      Different extrapolation sequences can be used (see the `ExtrapolationMethodStepSequences` enum).

    parameters:
      - name: initialTime # [cpp]
        type: double # [cpp]
      - name: initial_time # [py]
        type: float # [py]
        description: Start time (independent variable) of numerical integration.

      - name: initialTimeStep # [cpp]
        type: double # [cpp]
      - name: initial_time_step # [py]
        type: float # [py]
        description: Initial time step to be used.

      - name: extrapolationSequence # [cpp]
        type: ExtrapolationMethodStepSequences # [cpp]
      - name: extrapolation_sequence # [py]
        type: ExtrapolationMethodStepSequences # [py]
        description: Extrapolation sequence to be used in the integration.

      - name: maximumNumberOfSteps # [cpp]
        type: int # [cpp]
      - name: maximum_number_of_steps # [py]
        type: int # [py]
        description: Number of entries in the sequence (e.g., number of integrations used for a single extrapolation).

      - name: minimumStepSize # [cpp]
        type: double # [cpp]
      - name: minimum_step_size # [py]
        type: float # [py]
        description: Minimum time step to be used during the integration.

      - name: maximumStepSize # [cpp]
        type: double # [cpp]
      - name: maximum_step_size # [py]
        type: float # [py]
        description: Maximum time step to be used during the integration.

      - name: relativeErrorTolerance # [cpp]
        type: double, default=1.0E-12 # [cpp]
      - name: relative_error_tolerance # [py]
        type: float, default=1.0E-12 # [py]
        description: Relative tolerance to adjust the time step.

      - name: absoluteErrorTolerance # [cpp]
        type: double, default=1.0E-12 # [cpp]
      - name: absolute_error_tolerance # [py]
        type: float, default=1.0E-12 # [py]
        description: Relative tolerance to adjust the time step.

      - name: saveFrequency # [cpp]
        type: int, default=1 # [cpp]
      - name: save_frequency # [py]
        type: int, default=1 # [py]
        description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).

      - name: assessTerminationOnMinorSteps # [cpp]
        type: bool, default=false # [cpp]
      - name: assess_termination_on_minor_steps # [py]
        type: bool, default=false # [py]
        description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).

      - name: safetyFactorForNextStepSize # [cpp]
        type: double, default=0.7 # [cpp]
      - name: safety_factor # [py]
        type: float, default=0.7 # [py]
        description: Safety factor used in the step size control.

      - name: maximumFactorIncreaseForNextStepSize # [cpp]
        type: double, default=10.0 # [cpp]
      - name: maximum_factor_increase # [py]
        type: float, default=10.0 # [py]
        description: Maximum increase between consecutive time steps, expressed as the factor between new and old step size.

      - name: minimumFactorDecreaseForNextStepSize # [cpp]
        type: double, default=0.1 # [cpp]
      - name: minimum_factor_increase # [py]
        type: float, default=0.1 # [py]
        description: Minimum increase between consecutive time steps, expressed as the factor between new and old step size.

    returns:
        type: BulirschStoerIntegratorSettings
        description: BulirschStoerIntegratorSettings object.


 # Adams-Bashorth-Moulton integrator
  - name: adamsBashforthMoultonSettings # [cpp]
  - name: adams_bashforth_moulton # [py]
    short_summary: "Creates the settings for the Bulirsch-Stoer integrator."
    extended_summary: |
      Factory function to create settings for the Adams-Bashorth-Moulton integrator.
      For this integrator, the step size is varied based on the tolerances and safety factor provided.
      The tolerance is composed of an absolute and a relative part.
      Different coefficient sets (Butcher's tableau) can be used (see the `RungeKuttaCoefficients::CoefficientSets` enum).

    parameters:
      - name: initialTime # [cpp]
        type: double # [cpp]
      - name: initial_time # [py]
        type: float # [py]
        description: Start time (independent variable) of numerical integration.

      - name: initialTimeStep # [cpp]
        type: double # [cpp]
      - name: initial_time_step # [py]
        type: float # [py]
        description: Initial time step to be used.

      - name: minimumStepSize # [cpp]
        type: double # [cpp]
      - name: minimum_step_size # [py]
        type: float # [py]
        description: Minimum time step to be used during the integration.

      - name: maximumStepSize # [cpp]
        type: double # [cpp]
      - name: maximum_step_size # [py]
        type: float # [py]
        description: Maximum time step to be used during the integration.

      - name: relativeErrorTolerance # [cpp]
        type: double, default=1.0E-12 # [cpp]
      - name: relative_error_tolerance # [py]
        type: float, default=1.0E-12 # [py]
        description: Relative tolerance to adjust the time step.

      - name: absoluteErrorTolerance # [cpp]
        type: double, default=1.0E-12 # [cpp]
      - name: absolute_error_tolerance # [py]
        type: float, default=1.0E-12 # [py]
        description: Relative tolerance to adjust the time step.

      - name: minimumOrder # [cpp]
        type: int, default=6 # [cpp]
      - name: minimum_order # [py]
        type: int, default=6 # [cpp]
        description: Minimum order of the integrator.

      - name: maximumOrder # [cpp]
        type: int, default=11 # [cpp]
      - name: maximum_order # [py]
        type: int, default=11 # [cpp]
        description: Maximum order of the integrator.

      - name: saveFrequency # [cpp]
        type: int, default=1 # [cpp]
      - name: save_frequency # [py]
        type: int, default=1 # [py]
        description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).

      - name: assessTerminationOnMinorSteps # [cpp]
        type: bool, default=false # [cpp]
      - name: assess_termination_on_minor_steps # [py]
        type: bool, default=false # [py]
        description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).

      - name: bandwidth # [cpp]
        type: double, default=200.0 # [cpp]
      - name: bandwidth # [py]
        type: float, default=200.0 # [py]
        description: Maximum error factor for doubling the stepsize.

    returns:
        type: AdamsBashforthMoultonSettings
        description: AdamsBashforthMoultonSettings object.
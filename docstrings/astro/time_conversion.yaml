#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################
summary: |
  Conversions and computation on date and time.

extended_summary: |
  This module provide a variety of functions to convert time and date from Julian Dates and calendar dates.
  Conversion between different time scales are also possible.
  Different helpers are also included to ease the most common operation on dates and times.

notes: |
  - Unless specified otherwise, the time used in Tudatpy is in seconds since J2000, the 1st of January 2000.

references: |
  Chapter 2 of: Kaplan, G. United States Naval Observatory Circular No. 179, The IAU Resolutions on Astronomical Reference Systems, Time Scales, and Earth Rotation Models.
  
  This document can be accessed at the following link: https://www.usno.navy.mil/USNO/astronomical-applications/publications/Circular_179.pdf/view

#########################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████
#########################################################################
functions:
  #######################################################################
  - name: calendar_date_to_julian_day
    short_summary: "Convert a calendar date to Julian days."

    extended_summary: ""

    parameters:
      - name: calendar_date
        type: datetime.datetime
        description: "Datetime, using the default Python library. Both the date and the time (hour, minutes, and seconds), can be specified. Milliseconds are ignored."

    returns:
        type: float
        description: "Date in Julian days since January 1st 4713 BC."

    examples: |
      In this example, the calendar date of the 21st of May 2022 at 13:52 and 41 seconds is converted to Julian days.

      .. code-block:: python

        # Define the calendar date using datetime
        calendar_date = datetime.datetime(2022, 5, 21, 13, 52, 41)
        # Convert the calendar date to Julian days since January 1st 4713 BC 
        julian_date = time_conversion.calendar_date_to_julian_day(calendar_date)
        # Print the converted output
        print(julian_date)  # prints 2459721.0782523146

  #######################################################################
  - name: calendar_date_to_julian_day_since_epoch
    short_summary: "Convert a calendar date to Julian days since a given epoch."

    extended_summary: ""

    parameters:
      - name: calendar_date
        type: datetime.datetime
        description: "Datetime, using the default Python library. Both the date and the time (hour, minutes, and seconds), can be specified. Milliseconds are ignored."
      - name: epoch_since_julian_day_zero
        type: float, default = constants.JULIAN_DAY_ON_J2000
        description: "Epoch since when the Julian days have to be counted. By default, set to `constants.JULIAN_DAY_ON_J2000` (2451545.0) corresponding to the 1st of January 2000."

    returns:
        type: float
        description: "Date in Julian days since the given epoch."

    examples: |
      In this example, the calendar date of the 21st of May 2022 at 13:52 and 41 seconds is converted to Julian days since J2000 (the 1st of January 2000).

      .. code-block:: python

        # Define the calendar date using datetime
        calendar_date = datetime.datetime(2022, 5, 21, 13, 52, 41)
        # Convert the calendar date to Julian days since J2000
        julian_date = time_conversion.calendar_date_to_julian_day_since_epoch(calendar_date)
        # Print the converted output
        print(julian_date)  # prints 8176.07825231459

  #######################################################################
  - name: julian_day_to_calendar_date
    short_summary: "Convert Julian days to a calendar date."

    extended_summary: "Inverse function of :func:`calendar_date_to_julian_day`."

    parameters:
      - name: julian_day
        type: float
        description: "Date in Julian days since January 1st 4713 BC."

    returns:
        type: datetime.datetime
        description: "Calendar date using the Datetime Python library, containing the date and time corresponding to the Julian date input."

    examples: |
      In this example, the Julian date `2459721.0783` (in days since January 1st 4713 BC), is converted to a calendar date.

      .. code-block:: python

        # Define the Julian date in days since January 1st 4713 BC
        julian_date = 2459721.0783
        # Convert the Julian date to a calendar date
        calendar_date = time_conversion.julian_day_to_calendar_date(julian_date)
        # Print the converted output
        print(calendar_date)  # prints datetime.datetime(2022, 5, 21, 13, 52, 45)


  #######################################################################
  - name: julian_day_to_seconds_since_epoch
    short_summary: "Convert Julian days to seconds since a given epoch."

    extended_summary: ""

    parameters:
      - name: julian_day
        type: float
        description: "Date in Julian days since January 1st 4713 BC."
      - name: epoch_since_julian_day_zero
        type: float, default = constants.JULIAN_DAY_ON_J2000
        description: "Epoch since when the Julian days have to be counted. By default, set to `constants.JULIAN_DAY_ON_J2000` (2451545.0), corresponding to the 1st of January 2000."

    returns:
        type: float
        description: "Seconds since the Julian date and the given epoch."

    examples: |
      In this example, the Julian date `2459721.0783` (in days since January 1st 4713 BC), is converted to seconds since J2000 (January 1st 2000).

      .. code-block:: python

        # Define the Julian date in days since January 1st 4713 BC
        julian_date = 2459721.0783
        # Convert the Julian date to the number of seconds since J2000
        seconds_since_J2000 = time_conversion.julian_day_to_seconds_since_epoch(julian_date)
        # Print the converted output
        print(seconds_since_J2000)  # prints 706413165.1200145

  #######################################################################
  - name: seconds_since_epoch_to_julian_years_since_epoch
    short_summary: "Convert the number of seconds since a given (unspecified) epoch to Julian years since the same epoch."
    
    extended_summary: ""

    parameters:
      - name: seconds_since_epoch
        type: float
        description: "Seconds elapsed since a given (unspecified) epoch."

    returns:
        type: float
        description: |
          Julian years since the specified epoch.
          
          Since this is a float, not a integer, meaning that the fraction of the year is also included.

    examples: |
      In this example, `706413165.12` seconds since a given epoch are converted to Julian years since the same epoch.

      .. code-block:: python

        # Define the number of seconds elapsed
        seconds_since_epoch = 706413165.12
        # Convert the number of seconds to Julian years
        julian_years = time_conversion.seconds_since_epoch_to_julian_years_since_epoch(seconds_since_epoch)
        # Print the converted output
        print(julian_years)  # prints 22.38488240930869

  #######################################################################
  - name: seconds_since_epoch_to_julian_centuries_since_epoch
    short_summary: "Convert the number of seconds since a given (unspecified) epoch to Julian centuries since the same epoch."
    
    extended_summary: ""

    parameters:
      - name: seconds_since_epoch
        type: float
        description: "Seconds elapsed since a given (unspecified) epoch."

    returns:
        type: float
        description: |
          Julian centuries since the specified epoch.
          
          Since this is a float, not a integer, meaning that the fraction of the century is also included.

    examples: |
      In this example, `706413165.12` seconds since a given epoch are converted to Julian centuries since the same epoch.

      .. code-block:: python

        # Define the number of seconds elapsed
        seconds_since_epoch = 706413165.12
        # Convert the number of seconds to Julian centuries
        julian_centuries = time_conversion.seconds_since_epoch_to_julian_centuries_since_epoch(seconds_since_epoch)
        # Print the converted output
        print(julian_centuries)  # prints 0.2238488240930869

  #######################################################################
  - name: julian_day_to_modified_julian_day
    short_summary: "Convert a Julian day to a Modified Julian day."
    
    extended_summary: ""

    parameters:
      - name: julian_day
        type: float
        description: "Date in Julian days (number of days since January 1st 4713 BC)."

    returns:
        type: float
        description: "Date in modified Julian days (number of days since November 17th 1858)."

    examples: |
      In this example, the Julian date `2451545.0` (J2000) is converted to a modified Julian date.

      .. code-block:: python

        # Convert from Julian Days to Modified Julian Days
        MJD = time_conversion.julian_day_to_modified_julian_day(constants.JULIAN_DAY_ON_J2000)
        # Print the converted output
        print(MJD)  # prints 51544.5
  #######################################################################
  - name: modified_julian_day_to_julian_day
    short_summary: "Convert a Modified Julian day to a Julian day."
    
    extended_summary: "Inverse function of :func:`julian_day_to_modified_julian_day`."

    parameters:
      - name: modified_julian_day
        type: float
        description: "Date in modified Julian days (number of days since November 17th 1858)."

    returns:
        type: float
        description: "Date in Julian days (number of days since January 1st 4713 BC)."

    examples: |
      In this example, the Modified Julian date `51544.5` ( corresponding to J2000) is converted to a modified Julian date.

      .. code-block:: python

        # Define J2000 in Modified Julian Days
        J2000_MJD = 51544.5
        # Convert from Modified Julian Days to Julian Days
        J2000 = time_conversion.modified_julian_day_to_julian_day(J2000_MJD)
        # Print the converted output
        print(J2000)  # prints 2451545.0

  #######################################################################
  - name: calendar_date_to_day_of_year
    short_summary: "Determine the number of full days that have passed in the year of a given calendar date."
    
    extended_summary: ""

    parameters:
      - name: calendar_date
        type: datetime.datetime
        description: "Datetime, using the default Python library. Both the date and the time (hour, minutes, and seconds), can be specified. Milliseconds are ignored."

    returns:
        type: int
        description: "Number of full days that have passed in the year at the given calendar date."

    examples: |
      In this example, the number of days that have passed in 2020 when the date is the 2nd of May is computed.

      .. code-block:: python

        # Define the 2nd of May 2020
        date = datetime.datetime(2020, 5, 2)
        # Compute the number of full days that have passed in 2020 when at the given date
        days_passed = time_conversion.calendar_date_to_day_of_year(date)
        # Print the converted output
        print(J2000)  # prints 122.0

  #######################################################################
  - name: year_and_days_in_year_to_calendar_date
    short_summary: "Create the calendar date from the year and the number of days in the year."
    
    extended_summary: "Can be seen as the inverse function of :func:`calendar_date_to_day_of_year`."

    parameters:
      - name: year
        type: int
        description: "Calendar year."
      - name: days_in_year
        type: int
        description: "Number of days that have passed in the year."

    returns:
        type: datetime.datetime
        description: "Corresponding calendar date."

    examples: |
      In this example, the calendar date corresponding to when 122 days have passed in 2020 is computed.

      .. code-block:: python

        # Compute the calendar date when 122 days have passed in 2020
        date = time_conversion.year_and_days_in_year_to_calendar_date(2020, 122)
        # Print the converted output
        print(J2000)  # prints datetime.datetime(2020, 5, 2, 0, 0)

  #######################################################################
  - name: calculate_seconds_in_current_julian_day
    short_summary: "Determine the number of seconds that have elapsed in the given Julian day."
    
    extended_summary: ""

    parameters:
      - name: julian_day
        type: float
        description: "Date in Julian days (number of days since January 1st 4713 BC)."

    returns:
        type: float
        description: "Number of seconds that have passed in the given Julian day."

    examples: |
      In this example, the number of seconds that have elapsed at the Julian day `2451545.2` is computed.

      .. code-block:: python

        # Compute the number of seconds that have passed in the given Julian day
        seconds_passed = time_conversion.calculate_seconds_in_current_julian_day(constants.JULIAN_DAY_ON_J2000)
        # Print the converted output
        print(seconds_passed)  # prints 43200.0

  #######################################################################
  - name: is_leap_year
    short_summary: "Assess wether a year is a leap year or not."
    
    extended_summary: ""

    parameters:
      - name: year
        type: int
        description: "Calendar year."

    returns:
        type: bool
        description: "A value of True means that the year is a leap year."

    examples: |
      In this example, the first list should contains only `True`, and the second `False`, since the first list uses leap years and the second does not.

      .. code-block:: python

        # Check known leap years
        leap_years = [time_conversion.is_leap_year(year) for year in [2020, 2016, 2000, 2400]]
        # Print the converted output
        print(leap_years)  # prints [True, True, True, True]
        # Check known non-leap years
        non_leap_years = [time_conversion.is_leap_year(year) for year in [2021, 2022, 2100, 2001]]
        # Print the converted output
        print(non_leap_years)  # prints [False, False, False, False]

  #######################################################################
  - name: get_days_in_month
    short_summary: "Get the number of days in the month of a given year."
    
    extended_summary: ""

    parameters:
      - name: month
        type: int
        description: "Calendar month."
      - name: year
        type: int
        description: "Calendar year."

    returns:
        type: int
        description: "Number of days in the month of the given year."

    examples: |
      In this example, the number of days in February for both 2021 and 2020 are computed.

      .. code-block:: python

        # Check the number of days in February 2021
        days_feb_2021 = time_conversion.get_days_in_month(2, 2021)
        # Print the converted output
        print(days_feb_2021)  # prints 28
        # Check the number of days in February 2022
        days_feb_2020 = time_conversion.get_days_in_month(2, 2020)
        # Print the converted output
        print(days_feb_2020)  # prints 29
  #######################################################################
  - name: TCB_to_TDB
    short_summary: "Convert time from the TCB scale to the TDB scale."
    
    extended_summary: "The TCB scale is the Barycentric Coordinate Time, and the TDB scale is the Barycentric Dynamical Time."

    parameters:
      - name: TCB_time
        type: float
        description: "Time in seconds since J2000, in the TCB time scale."

    returns:
        type: float
        description: "Time in seconds since J2000, in the TDB time scale."

    examples: |
      In this example, the calendar date of the 17th of February 2022, at 15:41 and 2 seconds is first converted to Julian seconds since J2000.
      Then, this date and time is converted from the TCB scale to the TDB scale.

      .. code-block:: python

        # Define the date and time
        date = datetime.datetime(2022, 2, 17, 15, 41, 2)
        # Convert it in Julian days since J2000
        date_J2000 = time_conversion.calendar_date_to_julian_day(date)
        # Convert it in Julian seconds since J2000
        date_J2000_sec = time_conversion.julian_day_to_seconds_since_epoch(date_J2000)
        # Check the date from the TCB scale to the TDB scale
        date_TDB_scale = time_conversion.TCB_to_TDB(date_J2000_sec)
        # Print the converted output
        print(date_TDB_scale)  # prints 698384439.9176273
  #######################################################################
  - name: TDB_to_TCB
    short_summary: "Convert time from the TBD scale to the TCB scale."
    
    extended_summary: |
      The TDB scale is the Barycentric Dynamical Time, and the TCB scale is the Barycentric Coordinate Time.

      Inverse function of :func:`TCB_to_TDB`.

    parameters:
      - name: TDB_time
        type: float
        description: "Time in seconds since J2000, in the TDB time scale."

    returns:
        type: float
        description: "Time in seconds since J2000, in the TCB time scale."
  #######################################################################
  - name: TCG_to_TT
    short_summary: "Convert time from the TCG scale to the TT scale."
    
    extended_summary: "The TCG scale is the Geocentric Coordinate Time, and the TT scale is the Terrestrial Time."

    parameters:
      - name: TCG_time
        type: float
        description: "Time in seconds since J2000, in the TCG time scale."

    returns:
        type: float
        description: "Time in seconds since J2000, in the TT time scale."
  #######################################################################
  - name: TT_to_TCG
    short_summary: "Convert time from the TT scale to the TCG scale."
    
    extended_summary: |
      The TT scale is the Terrestrial Time, and the TCG scale is the Geocentric Coordinate Time.

      Inverse function of :func:`TCG_to_TT`.

    parameters:
      - name: TT_time
        type: float
        description: "Time in seconds since J2000, in the TT time scale."

    returns:
        type: float
        description: "Time in seconds since J2000, in the TCG time scale."
  #######################################################################
  - name: TAI_to_TT
    short_summary: "Convert time from the TAI scale to the TT scale."
    
    extended_summary: "The TAI scale is the International Atomic Time, and the TT scale is the Terrestrial Time."

    parameters:
      - name: TAI_time
        type: float
        description: "Time in seconds since J2000, in the TAI time scale."

    returns:
        type: float
        description: "Time in seconds since J2000, in the TT time scale."
  #######################################################################
  - name: TT_to_TAI
    short_summary: "Convert time from the TT scale to the TAI scale."
    
    extended_summary: |
      The TT scale is the Terrestrial Time, and the TAI scale is the International Atomic Time.

      Inverse function of :func:`TAI_to_TT`.

    parameters:
      - name: TT_time
        type: float
        description: "Time in seconds since J2000, in the TT time scale."

    returns:
        type: float
        description: "Time in seconds since J2000, in the TAI time scale."
  #######################################################################
  - name: TT_to_TDB_approximate
    short_summary: "Approximately convert time from the TT scale to the TDB scale."
    
    extended_summary: "The TT scale is the Terrestrial Time, and the TDB scale is the Barycentric Dynamical Time."

    parameters:
      - name: TT_time
        type: float
        description: "Time in seconds since J2000, in the TT time scale."

    returns:
        type: float
        description: "Time in seconds since J2000, in the TDB time scale."